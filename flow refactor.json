[
    {
        "id": "6d5ddc6b8286095b",
        "type": "subflow",
        "name": "Daily Report",
        "info": "Trigger -> load notification settings -> check schedule & resolve window -> fetch device/pin maps -> build mappers -> build & run queries -> compose email + CSV -> send",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "f1dd0cdb302de4b4"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "BASE_URL",
                "type": "str",
                "value": "http://localhost:1880"
            },
            {
                "name": "TZ",
                "type": "str",
                "value": "Asia/Bangkok"
            },
            {
                "name": "EXPORT_PATH",
                "type": "str",
                "value": "/api/export"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f1dd0cdb302de4b4",
        "type": "http request",
        "z": "6d5ddc6b8286095b",
        "name": "GET /api/notification-settings",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/api/notification-settings",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 260,
        "y": 120,
        "wires": [
            [
                "4155af29a44ee150"
            ]
        ]
    },
    {
        "id": "4155af29a44ee150",
        "type": "function",
        "z": "6d5ddc6b8286095b",
        "name": "Check Schedule & Resolve Window",
        "func": "// Check Schedule & Resolve Window (v3 - Native JS)\n// Note: This version uses native Date object and is less robust with timezones than Day.js.\n// It assumes the Node-RED server's timezone matches the desired timezone.\n\nconst tz = env.get('TZ') || 'Asia/Bangkok';\n// เราไม่สามารถใช้ `new Date()` โดยตรงและระบุ Timezone ได้\n// ดังนั้นเราจะใช้ `Date.toLocaleString()` เพื่อแปลงเวลาให้เป็น Timezone ที่ต้องการ\nconst now = new Date();\nconst nowStr = now.toLocaleString('en-US', { timeZone: tz, hour12: false });\nconst [nowDate, nowTime] = nowStr.split(', ');\nconst [nowH, nowM] = nowTime.split(':').map(Number);\n\nconst settings = msg.payload || {};\n\nif (!settings.schedule || !Array.isArray(settings.schedule.configs)) {\n    node.status({ fill: 'grey', shape: 'ring', text: 'No schedule' });\n    return null;\n}\n\nconst todayWeekday = now.getDay();\nconst weekdays = settings.schedule.weekdays || [true, true, true, true, true, true, true];\nconst todayOn = weekdays[todayWeekday] !== false;\n\nconst activeConfigs = (settings.schedule.configs || []).filter(c =>\n    (c?.active === undefined ? true : !!c.active) && todayOn\n);\n\nconst hits = activeConfigs.filter(c => {\n    const [hitH, hitM] = String(c.sendAt || '00:00').split(':').map(Number);\n    // เปรียบเทียบชั่วโมงและนาทีปัจจุบันกับเวลาในตาราง\n    return nowH === hitH && nowM === hitM;\n});\n\nif (hits.length === 0) {\n    const nexts = activeConfigs.map(c => String(c.sendAt)).filter(Boolean).join(', ');\n    node.status({ fill: 'blue', shape: 'ring', text: `Waiting ${nexts}` });\n    return null;\n}\n\nfor (const hit of hits) {\n    const newMsg = {};\n    \n    newMsg.report_id = RED.util.generateId();\n    newMsg.recipients = settings.recipients || { email: [], telegram: [] };\n\n    // สร้างอ็อบเจกต์ Date สำหรับช่วงเวลาเริ่มต้นและสิ้นสุด\n    function toToday(hm) {\n        const [H, M] = String(hm || '00:00').split(':').map(Number);\n        const d = new Date(now.getFullYear(), now.getMonth(), now.getDate(), H, M, 0, 0);\n        return d;\n    }\n\n    const S = toToday(hit.rangeStart);\n    const E = toToday(hit.rangeEnd);\n    const T = toToday(hit.sendAt);\n\n    let startTs, endTs;\n    if (hit.rangeStart === hit.rangeEnd) {\n        endTs = E;\n        // หากเวลาปัจจุบันก่อนเวลาสิ้นสุด ให้ถอยไป 1 วัน\n        if (T < E) endTs = new Date(endTs.getTime() - 24 * 60 * 60 * 1000);\n        startTs = new Date(endTs.getTime() - 24 * 60 * 60 * 1000);\n    } else {\n        endTs = E;\n        let startCandidate = S;\n        if (E < S) startCandidate = new Date(startCandidate.getTime() - 24 * 60 * 60 * 1000);\n        if (T < E) {\n            endTs = new Date(endTs.getTime() - 24 * 60 * 60 * 1000);\n            startCandidate = new Date(startCandidate.getTime() - 24 * 60 * 60 * 1000);\n        }\n        startTs = startCandidate;\n    }\n    \n    // จัดรูปแบบวันที่และเวลา\n    function pad(n) { return n < 10 ? '0' + n : n; }\n    function formatDate(d) {\n        return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())} ${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;\n    }\n    \n    newMsg.window = {\n        start: formatDate(startTs),\n        end: formatDate(endTs),\n        startISO: startTs.toISOString(),\n        endISO: endTs.toISOString(),\n        displayRange: `${hit.rangeStart}–${hit.rangeEnd}`,\n        displayLabel: `${hit.rangeStart}-${String(hit.rangeEnd || '00:00')}`,\n        reportDate: `${pad(endTs.getDate())}/${pad(endTs.getMonth() + 1)}/${endTs.getFullYear()}`,\n        label: hit.label || ''\n    };\n    \n    const labelPart = hit.label ? `_${hit.label}` : '';\n    const endTsFormatted = `${pad(endTs.getDate())}${pad(endTs.getMonth() + 1)}${endTs.getFullYear()}_${pad(endTs.getHours())}${pad(endTs.getMinutes())}`;\n    newMsg.attachmentName = `daily${labelPart}_${endTsFormatted}.csv`;\n\n    node.status({ fill: 'green', shape: 'dot', text: `Run ${hit.sendAt} (${newMsg.window.label})` });\n    \n    node.send(newMsg);\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 120,
        "wires": [
            [
                "90cc6dff43d8119b",
                "bf26a40a41be6cc5"
            ]
        ]
    },
    {
        "id": "90cc6dff43d8119b",
        "type": "http request",
        "z": "6d5ddc6b8286095b",
        "name": "GET /api/device-map",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/api/device-map",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 200,
        "wires": [
            [
                "142856d8e6db0804"
            ]
        ]
    },
    {
        "id": "bf26a40a41be6cc5",
        "type": "http request",
        "z": "6d5ddc6b8286095b",
        "name": "GET /api/pin-map",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/api/pin-map",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 300,
        "y": 260,
        "wires": [
            [
                "ec849689791e409f"
            ]
        ]
    },
    {
        "id": "142856d8e6db0804",
        "type": "change",
        "z": "6d5ddc6b8286095b",
        "name": "topic=deviceMap",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "deviceMap",
                "tot": "str"
            }
        ],
        "x": 520,
        "y": 200,
        "wires": [
            [
                "a3f4e9b45571eb11"
            ]
        ]
    },
    {
        "id": "ec849689791e409f",
        "type": "change",
        "z": "6d5ddc6b8286095b",
        "name": "topic=pinMap",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "pinMap",
                "tot": "str"
            }
        ],
        "x": 510,
        "y": 260,
        "wires": [
            [
                "a3f4e9b45571eb11"
            ]
        ]
    },
    {
        "id": "a3f4e9b45571eb11",
        "type": "function",
        "z": "6d5ddc6b8286095b",
        "name": "EnsureBothMaps",
        "func": "// EnsureBothMaps (v2: Concurrent-safe)\nconst report_id = msg.report_id;\nif (!report_id) {\n    node.warn(\"Message missing report_id, cannot join maps safely.\");\n    return null;\n}\n\nconst key = msg.topic;\nconst flowBuf = flow.get('mapsBufObj') || {};\n\nif (!flowBuf[report_id]) {\n    flowBuf[report_id] = {};\n}\n\nflowBuf[report_id][key] = msg.payload;\nflow.set('mapsBufObj', flowBuf);\n\nconst reportBuf = flowBuf[report_id];\n\nif (!reportBuf.deviceMap || !reportBuf.pinMap) {\n    return null; // Wait for the other part for this specific report\n}\n\n// Both parts arrived, create the output message\nconst out = { \n    payload: { \n        deviceMap: reportBuf.deviceMap, \n        pinMap: reportBuf.pinMap \n    } \n};\n\n// Clean up the buffer for this completed report\ndelete flowBuf[report_id];\nflow.set('mapsBufObj', flowBuf);\n\n// Carry over all essential properties from the original message\nout.window = msg.window;\nout.recipients = msg.recipients;\nout.attachmentName = msg.attachmentName;\nout.report_id = msg.report_id; // <-- สำคัญมาก: ต้องส่งต่อ ID ไปด้วย\n\nreturn out;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 230,
        "wires": [
            [
                "79912f7fabd8dca1"
            ]
        ]
    },
    {
        "id": "79912f7fabd8dca1",
        "type": "function",
        "z": "6d5ddc6b8286095b",
        "name": "Build Mappers",
        "func": "let deviceMap = msg.payload && msg.payload.deviceMap;\nlet pinMap = msg.payload && msg.payload.pinMap;\nif ((!deviceMap || !pinMap) && Array.isArray(msg.payload)) {\n  const a = msg.payload[0], b = msg.payload[1];\n  const looks = (o) => o && typeof o === 'object' && Object.keys(o).some(k => /^room[A-G]$/.test(k) || /^name[A-G]$/.test(k));\n  if (looks(a)) { deviceMap = a; pinMap = b; } else if (looks(b)) { deviceMap = b; pinMap = a; }\n}\nif (!deviceMap || typeof deviceMap !== 'object') { node.error('Device map missing'); return null; }\nif (!pinMap || typeof pinMap !== 'object') { node.error('Pin map missing'); return null; }\n\nfunction buildMacToRoom(map) {\n  const out = {};\n  for (const L of ['A', 'B', 'C', 'D', 'E', 'F', 'G']) {\n    const mac = (map[`room${L}`] || '').trim();\n    const name = (map[`name${L}`] || '').trim();\n    if (mac && name) out[mac] = name;\n  }\n  return out;\n}\n\nfunction sensorName(mac, pin) {\n  const byMac = pinMap[mac] || {};\n  const n = byMac[pin];\n  return n && String(n).trim() ? n : `PIN ${pin}`;\n}\n\nmsg.macToRoom = buildMacToRoom(deviceMap);\nmsg.roomToMac = Object.fromEntries(Object.entries(msg.macToRoom).map(([mac, room]) => [room, mac]));\nmsg.allMacs = Object.keys(msg.macToRoom);\nmsg.sensorName = (mac, p) => sensorName(mac, p);\n\n// --- START: โค้ดแก้ไข ---\n// ตรวจสอบว่ามี MAC address ที่จะใช้ในรายงานหรือไม่\nif (msg.allMacs.length === 0) {\n  node.warn(\"No active devices found in device map. Stopping report flow.\");\n  return null; // หยุดการทำงานของ Flow ถ้าไม่มีอุปกรณ์\n}\n// --- END: โค้ดแก้ไข ---\n\n// สร้าง String ของ MAC address สำหรับใช้ใน SQL (ยังคงจำเป็นสำหรับ Uptime Flow ใหม่)\nmsg.allMacsInQuotes = msg.allMacs.map(m => `'${m}'`).join(',');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 360,
        "wires": [
            [
                "ba8f0f7775fc7420",
                "37fbbd3bbd51acc1",
                "9ec0b30a66aa13a5",
                "46be75ddfa08b645",
                "7fed98e1103d82dc",
                "263477a701e045de"
            ]
        ]
    },
    {
        "id": "ba8f0f7775fc7420",
        "type": "template",
        "z": "6d5ddc6b8286095b",
        "name": "Build Query: Rules",
        "field": "topic",
        "template": "SELECT * FROM alert_rules;",
        "output": "str",
        "x": 1030,
        "y": 300,
        "wires": [
            [
                "a07aa44cabcbba3a"
            ]
        ]
    },
    {
        "id": "37fbbd3bbd51acc1",
        "type": "template",
        "z": "6d5ddc6b8286095b",
        "name": "Build Query: Stats",
        "field": "topic",
        "fieldType": "msg",
        "syntax": "mustache",
        "template": "SELECT mac, pin,\n    AVG(avg_temp) as avg_temp, MIN(min_temp) as min_temp, MAX(max_temp) as max_temp,\n    AVG(avg_hum) as avg_hum, MIN(min_hum) as min_hum, MAX(max_hum) as max_hum\nFROM dht_22\nWHERE `timestamp` >= '{{window.start}}' AND `timestamp` < '{{window.end}}'\nGROUP BY mac, pin\n\nUNION ALL\n\nSELECT mac, 'OVERALL' as pin,\n    AVG(avg_temp) as avg_temp, MIN(min_temp) as min_temp, MAX(max_temp) as max_temp,\n    AVG(avg_hum) as avg_hum, MIN(min_hum) as min_hum, MAX(max_hum) as max_hum\nFROM dht_22\nWHERE `timestamp` >= '{{window.start}}' AND `timestamp` < '{{window.end}}'\nGROUP BY mac;",
        "output": "str",
        "x": 1030,
        "y": 380,
        "wires": [
            [
                "dbbe65bc4c52610b"
            ]
        ]
    },
    {
        "id": "9ec0b30a66aa13a5",
        "type": "template",
        "z": "6d5ddc6b8286095b",
        "name": "Build Query: Times",
        "field": "topic",
        "fieldType": "msg",
        "syntax": "mustache",
        "template": "-- Robust min/max time picking in local time (Asia/Bangkok window)\n-- Per-sensor\nSELECT\n  t.mac,\n  t.pin,\n  (SELECT l.`timestamp` FROM dht_22 l\n    WHERE l.mac = t.mac AND l.pin = t.pin\n      AND l.`timestamp` >= '{{window.start}}' AND l.`timestamp` < '{{window.end}}'\n    ORDER BY l.min_temp ASC, l.`timestamp` ASC LIMIT 1) AS time_min_temp,\n  (SELECT l.`timestamp` FROM dht_22 l\n    WHERE l.mac = t.mac AND l.pin = t.pin\n      AND l.`timestamp` >= '{{window.start}}' AND l.`timestamp` < '{{window.end}}'\n    ORDER BY l.max_temp DESC, l.`timestamp` ASC LIMIT 1) AS time_max_temp,\n  (SELECT l.`timestamp` FROM dht_22 l\n    WHERE l.mac = t.mac AND l.pin = t.pin\n      AND l.`timestamp` >= '{{window.start}}' AND l.`timestamp` < '{{window.end}}'\n    ORDER BY l.min_hum ASC, l.`timestamp` ASC LIMIT 1) AS time_min_hum,\n  (SELECT l.`timestamp` FROM dht_22 l\n    WHERE l.mac = t.mac AND l.pin = t.pin\n      AND l.`timestamp` >= '{{window.start}}' AND l.`timestamp` < '{{window.end}}'\n    ORDER BY l.max_hum DESC, l.`timestamp` ASC LIMIT 1) AS time_max_hum\nFROM (\n  SELECT mac, pin\n  FROM dht_22\n  WHERE `timestamp` >= '{{window.start}}' AND `timestamp` < '{{window.end}}'\n  GROUP BY mac, pin\n) AS t\n\nUNION ALL\n\n-- OVERALL per mac\nSELECT\n  t.mac,\n  'OVERALL' AS pin,\n  (SELECT l.`timestamp` FROM dht_22 l\n    WHERE l.mac = t.mac\n      AND l.`timestamp` >= '{{window.start}}' AND l.`timestamp` < '{{window.end}}'\n    ORDER BY l.min_temp ASC, l.`timestamp` ASC LIMIT 1) AS time_min_temp,\n  (SELECT l.`timestamp` FROM dht_22 l\n    WHERE l.mac = t.mac\n      AND l.`timestamp` >= '{{window.start}}' AND l.`timestamp` < '{{window.end}}'\n    ORDER BY l.max_temp DESC, l.`timestamp` ASC LIMIT 1) AS time_max_temp,\n  (SELECT l.`timestamp` FROM dht_22 l\n    WHERE l.mac = t.mac\n      AND l.`timestamp` >= '{{window.start}}' AND l.`timestamp` < '{{window.end}}'\n    ORDER BY l.min_hum ASC, l.`timestamp` ASC LIMIT 1) AS time_min_hum,\n  (SELECT l.`timestamp` FROM dht_22 l\n    WHERE l.mac = t.mac\n      AND l.`timestamp` >= '{{window.start}}' AND l.`timestamp` < '{{window.end}}'\n    ORDER BY l.max_hum DESC, l.`timestamp` ASC LIMIT 1) AS time_max_hum\nFROM (\n  SELECT mac\n  FROM dht_22\n  WHERE `timestamp` >= '{{window.start}}' AND `timestamp` < '{{window.end}}'\n  GROUP BY mac\n) AS t;",
        "output": "str",
        "x": 1030,
        "y": 420,
        "wires": [
            [
                "2ef53e8552b70db2"
            ]
        ]
    },
    {
        "id": "a07aa44cabcbba3a",
        "type": "mysql",
        "z": "6d5ddc6b8286095b",
        "mydb": "5e560f07cfec117a",
        "name": "MySQL: Fetch Rules",
        "x": 1290,
        "y": 300,
        "wires": [
            [
                "86269550a6d4b448"
            ]
        ]
    },
    {
        "id": "949f82e57c3ebd90",
        "type": "mysql",
        "z": "6d5ddc6b8286095b",
        "mydb": "5e560f07cfec117a",
        "name": "MySQL: Fetch Events",
        "x": 1280,
        "y": 340,
        "wires": [
            [
                "de85dccbe9eb685c"
            ]
        ]
    },
    {
        "id": "dbbe65bc4c52610b",
        "type": "mysql",
        "z": "6d5ddc6b8286095b",
        "mydb": "5e560f07cfec117a",
        "name": "MySQL: Compute Stats",
        "x": 1280,
        "y": 380,
        "wires": [
            [
                "579f19ac9fadceb1"
            ]
        ]
    },
    {
        "id": "2ef53e8552b70db2",
        "type": "mysql",
        "z": "6d5ddc6b8286095b",
        "mydb": "5e560f07cfec117a",
        "name": "MySQL: Get Min/Max Times",
        "x": 1280,
        "y": 420,
        "wires": [
            [
                "01f596b99e0927c0"
            ]
        ]
    },
    {
        "id": "86269550a6d4b448",
        "type": "change",
        "z": "6d5ddc6b8286095b",
        "name": "topic=rules",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "rules",
                "tot": "str"
            }
        ],
        "x": 1670,
        "y": 300,
        "wires": [
            [
                "c1115f55b7709fa6"
            ]
        ]
    },
    {
        "id": "de85dccbe9eb685c",
        "type": "change",
        "z": "6d5ddc6b8286095b",
        "name": "topic=events",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "events",
                "tot": "str"
            }
        ],
        "x": 1670,
        "y": 340,
        "wires": [
            [
                "c1115f55b7709fa6"
            ]
        ]
    },
    {
        "id": "579f19ac9fadceb1",
        "type": "change",
        "z": "6d5ddc6b8286095b",
        "name": "topic=stats",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "stats",
                "tot": "str"
            }
        ],
        "x": 1670,
        "y": 380,
        "wires": [
            [
                "c1115f55b7709fa6"
            ]
        ]
    },
    {
        "id": "01f596b99e0927c0",
        "type": "change",
        "z": "6d5ddc6b8286095b",
        "name": "topic=statTimes",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "statTimes",
                "tot": "str"
            }
        ],
        "x": 1660,
        "y": 420,
        "wires": [
            [
                "c1115f55b7709fa6"
            ]
        ]
    },
    {
        "id": "6fd4f0f9a42e5ad6",
        "type": "function",
        "z": "6d5ddc6b8286095b",
        "name": "Process & Structure Data",
        "func": "// Process & Structure Data (V11B — Priority: DeviceOffline > SensorOffline > Critical > Warning > Time(desc) > Pin(asc) > Name)\n// [FIXED] เพิ่มการตรวจสอบข้อมูลขาเข้าเพื่อป้องกันข้อมูลที่ยังไม่ถูก Join\nconst requiredKeys = ['rules', 'events', 'stats', 'statTimes', 'kpis', 'uptime_results'];\nconst payloadOk = msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload);\nconst missingKeys = payloadOk ? requiredKeys.filter(k => !msg.payload.hasOwnProperty(k)) : requiredKeys;\n\nif (!payloadOk || missingKeys.length > 0) {\n  node.warn(`Received incomplete or malformed data payload. Required keys missing: ${missingKeys.join(', ')}. Halting report generation.`);\n  return null; // หยุดการทำงานของ Flow ทันที\n}\n\nconst { rules, events, stats, statTimes, kpis, uptime_results } = msg.payload;\n\nfunction buildRanges(rules) {\n  const out = { room: {}, sensor: {} };\n  for (const r of (rules || [])) {\n    const rng = {\n      warn: { min: r.warn_min, max: r.warn_max },\n      crit: { min: r.crit_min, max: r.crit_max }\n    };\n    if (r.scope === 'room' && r.sensor_name === 'overall') {\n      out.room[r.metric] = rng;\n    } else if (r.scope === 'sensor') {\n      out.sensor[`${r.mac}|${r.sensor_name}|${r.metric}`] = rng;\n    }\n  }\n  return out;\n}\nmsg.accept = buildRanges(rules || []);\n\nfunction judge(v, r) {\n  if (v == null || !r) return 'unknown';\n  const w = r.warn, c = r.crit;\n  if (c && ((c.min != null && v < c.min) || (c.max != null && v > c.max))) return 'critical';\n  if (w && ((w.min != null && v < w.min) || (w.max != null && v > w.max))) return 'warning';\n  return 'ok';\n}\n\nconst em = { ok: '✅', warning: '⚠️', critical: '❌', unknown: '❓' };\nconst tz = env.get('TZ') || 'Asia/Bangkok';\nmsg.rooms = [];\n\n// helpers\nfunction toTs(x) { const t = new Date(x).getTime(); return isNaN(t) ? 0 : t; }\nfunction parsePinKey(pinOrName) {\n  if (pinOrName == null) return 99999;\n  const s = String(pinOrName);\n  const m = s.match(/\\d+/);\n  const n = m ? Number(m[0]) : NaN;\n  return isNaN(n) ? 99999 : n;\n}\nfunction formatDuration(minutes) {\n  if (minutes < 1) return '<1 นาที';\n  const days = Math.floor(minutes / 1440);\n  const hours = Math.floor((minutes % 1440) / 60);\n  const mins = minutes % 60;\n\n  const parts = [];\n  if (days > 0) parts.push(`${days} วัน`);\n  if (hours > 0) parts.push(`${hours} ชม.`);\n  if (mins > 0) parts.push(`${mins} นาที`);\n\n  return parts.join(' ');\n}\n\nfor (const mac of (msg.allMacs || [])) {\n  const roomName = msg.macToRoom[mac];\n  const room = { name: roomName, mac, overall: {}, sensors: [], alerts: [], kpi: {} };\n\n  // Overall stats\n  const overallStat = (stats || []).find(s => s.mac === mac && s.pin === 'OVERALL') || {};\n  const overallTimes = (statTimes || []).find(s => s.mac === mac && s.pin === 'OVERALL') || {};\n  room.overall = { ...overallStat, ...overallTimes };\n\n  // Sensor stats\n  const sensorStats = (stats || []).filter(s => s.mac === mac && s.pin !== 'OVERALL');\n  for (const ss of sensorStats) {\n    const sName = msg.sensorName(mac, ss.pin);\n    const sTimes = (statTimes || []).find(s => s.mac === mac && s.pin === ss.pin) || {};\n    const tRule = msg.accept.sensor[`${mac}|${sName}|temp`];\n    const hRule = msg.accept.sensor[`${mac}|${sName}|hum`];\n    const tStat = judge(ss.avg_temp, tRule);\n    const hStat = judge(ss.avg_hum, hRule);\n    room.sensors.push({ ...ss, ...sTimes, name: sName, temp_status: tStat, hum_status: hStat });\n  }\n\n  // Sort sensors: abnormal first, then by pin number\n  const statusScore = { critical: 2, warning: 1, ok: 0, unknown: -1 };\n  room.sensors.sort((a, b) => {\n    const scoreA = Math.max(statusScore[a.temp_status], statusScore[a.hum_status]);\n    const scoreB = Math.max(statusScore[b.temp_status], statusScore[b.hum_status]);\n    if (scoreA !== scoreB) return scoreB - scoreA;\n    return String(a.pin).localeCompare(String(b.pin), undefined, { numeric: true });\n  });\n\n  // Overall room statuses\n  room.overall.temp_status = judge(room.overall.avg_temp, msg.accept.room.temp);\n  room.overall.hum_status = judge(room.overall.avg_hum, msg.accept.room.hum);\n\n  // Build & sort alerts with new priority\n  const alertStatusScore = { critical: 2, warning: 1 };\n\n  function alertRank(a) {\n    // 0 = Device Offline, 1 = Sensor Offline, 2 = Other Critical, 3 = Warning, 4 = Others\n    if (a.is_device && a.is_offline) return 0;\n    if (!a.is_device && a.is_offline) return 1;\n    if (a.level === 'critical') return 2;\n    if (a.level === 'warning') return 3;\n    return 4;\n  }\n\n  room.alerts = (events || [])\n    .filter(e => e.mac === mac)\n    .map(e => {\n      const a = { ...e, duration_text: '' };\n\n      const metricLower = String(e.metric || '').toLowerCase();\n      const looksConn = metricLower.includes('connect') || metricLower.includes('offline');\n      let offlineFlag = false;\n      if (looksConn) {\n        const raw = e.trigger_value;\n        if (raw === 0 || String(raw).trim() === '0' || /ออฟไลน์/i.test(String(raw))) {\n          offlineFlag = true;\n        }\n      }\n\n      if (metricLower === 'temp') { a.metric_desc = 'อุณหภูมิ'; a.unit = '°C'; }\n      else if (metricLower === 'hum') { a.metric_desc = 'ความชื้น'; a.unit = '%'; }\n      else if (looksConn) {\n        a.metric_desc = 'การเชื่อมต่อ'; a.unit = '';\n        a.trigger_value = offlineFlag ? 'ออฟไลน์' : (e.trigger_value == 1 ? 'ออนไลน์' : (e.trigger_value || ''));\n\n        if (offlineFlag) {\n          if (!e.closed_at) {\n            a.duration_text = ' (ออฟไลน์ต่อเนื่อง)';\n          } else {\n            const durationMin = Math.round((toTs(e.closed_at) - toTs(e.opened_at)) / 60000);\n            a.duration_text = ` (${formatDuration(durationMin)})`;\n          }\n        }\n\n      } else {\n        a.metric_desc = e.metric; a.unit = '';\n      }\n\n      a.opened_at_ts = toTs(e.opened_at);\n      a.time = new Date(e.opened_at)\n        .toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit', timeZone: tz })\n        .padStart(5, '0');\n\n      const sensorName = (e.sensor_name || '').trim();\n      const nameLower = sensorName.toLowerCase();\n      const isRealDeviceName = (nameLower === 'device');\n      const isDeviceType = (e.sensor_type === 'device');\n      a.is_device = isDeviceType || isRealDeviceName;\n\n      a.is_offline = !!offlineFlag;\n\n      a.pin_sort = parsePinKey(e.pin != null ? e.pin : sensorName);\n      a.sensor_name = sensorName || (a.is_device ? room.name : 'ไม่ระบุชื่อ');\n\n      return a;\n    })\n    .sort((x, y) => {\n      const rx = alertRank(x), ry = alertRank(y);\n      if (rx !== ry) return rx - ry;\n      const sx = alertStatusScore[x.level] || 0;\n      const sy = alertStatusScore[y.level] || 0;\n      if (sx !== sy) return sy - sx;\n      const tsX = x.opened_at_ts || 0;\n      const tsY = y.opened_at_ts || 0;\n      if (tsX !== tsY) return tsY - tsX;\n      const pinX = x.pin_sort, pinY = y.pin_sort;\n      if (pinX !== pinY) return pinX - pinY;\n      return String(x.sensor_name || '').localeCompare(String(y.sensor_name || ''), undefined, { numeric: true });\n    });\n\n  // KPIs\n  const kpiData = (kpis || []).find(k => k.mac === mac) || {};\n  const uptimeData = (uptime_results || []).find(u => u.mac === mac) || {};\n  room.kpi.uptime_pct = uptimeData.uptime_pct;\n  room.kpi.latest_data_ts = kpiData.latest_data_ts;\n  room.kpi.open_alerts_count = room.alerts.filter(a => a.status === 'open' || a.status === 'ack').length;\n\n  // Overall status\n  let finalStatus = 'ok';\n  const hasCriticalAlert = room.alerts.some(a => a.level === 'critical');\n  const hasWarningAlert = room.alerts.some(a => a.level === 'warning');\n  if (hasCriticalAlert || room.overall.temp_status === 'critical' || room.overall.hum_status === 'critical') {\n    finalStatus = 'critical';\n  } else if (hasWarningAlert || room.overall.temp_status === 'warning' || room.overall.hum_status === 'warning') {\n    finalStatus = 'warning';\n  }\n  room.overall_status = finalStatus;\n  room.overall_status_emoji = em[finalStatus];\n\n  msg.rooms.push(room);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 360,
        "wires": [
            [
                "f741b320550f13e8"
            ]
        ]
    },
    {
        "id": "b86a5038e2abdd91",
        "type": "function",
        "z": "6d5ddc6b8286095b",
        "name": "Compose Email Body",
        "func": "// ===== Compose Email Body (v4.6: Improved alert detail format) =====\n\n// --- Helper Functions ---\nfunction fmtNum(n, u = '', p = 1, fallback = '-') { if (n == null || isNaN(n)) return fallback; const val = Number(n).toFixed(p); return u ? `${val}&nbsp;${u}` : val; }\nfunction fmtTime(t, fallback = '-') { if (!t) return fallback; const d = new Date(t); if (isNaN(d.getTime())) return fallback; const h = String(d.getHours()).padStart(2, '0'); const m = String(d.getMinutes()).padStart(2, '0'); return `${h}:${m}`; }\nfunction getStatusPill(status) { const pills = { ok: { text: 'ปกติ', class: 'status-pill-ok' }, warning: { text: 'เฝ้าระวัง', class: 'status-pill-warn' }, critical: { text: 'วิกฤติ', class: 'status-pill-crit' } }; const pill = pills[status] || { text: '❓ ไม่ทราบ', class: 'status-pill-unknown' }; return `<span class=\"status-pill ${pill.class}\">${pill.text}</span>`; }\nfunction getLevelPill(level) { const pills = { warning: { text: 'เฝ้าระวัง', class: 'status-pill-warn' }, critical: { text: 'วิกฤติ', class: 'status-pill-crit' } }; const pill = pills[level] || { text: level, class: 'status-pill-unknown' }; return `<span class=\"status-pill ${pill.class}\">${pill.text}</span>`; }\nfunction getSummaryReason(room, rules, maxLines = 5) {\n    if (room.overall_status === 'ok') return 'สถานะปกติ';\n\n    const levelScore = { critical: 2, warning: 1 };\n    const groupedBySensor = {};\n\n    // จัดกลุ่มตาม sensor\n    for (const alert of (room.alerts || [])) {\n        const sensorName = alert.sensor_name || 'ไม่ระบุชื่อ';\n        if (!groupedBySensor[sensorName]) {\n            groupedBySensor[sensorName] = { problems: new Set(), maxScore: 0 };\n        }\n\n        let desc = '';\n        const m = String(alert.metric || '').toLowerCase();\n        const ruleLevelKey = alert.level === 'critical' ? 'crit' : 'warn';\n        const rg = rules?.sensor?.[`${alert.mac}|${sensorName}|${m}`]?.[ruleLevelKey];\n\n        if (m === 'temp') {\n            if (rg) {\n                if (rg.max != null && alert.trigger_value > rg.max) desc = 'อุณหภูมิสูงมาก';\n                else if (rg.min != null && alert.trigger_value < rg.min) desc = 'อุณหภูมิต่ำมาก';\n            }\n            if (!desc) desc = 'อุณหภูมิสูงผิดปกติ';\n        } else if (m === 'hum') {\n            if (rg) {\n                if (rg.max != null && alert.trigger_value > rg.max) desc = 'ความชื้นสูงมาก';\n                else if (rg.min != null && alert.trigger_value < rg.min) desc = 'ความชื้นต่ำมาก';\n            }\n            if (!desc) desc = 'ความชื้นผิดปกติ';\n        } else if (m.includes('connect') || m.includes('offline')) {\n            desc = 'ออฟไลน์';\n        }\n\n        if (desc) {\n            groupedBySensor[sensorName].problems.add(desc);\n            const score = levelScore[alert.level] || 0;\n            if (score > groupedBySensor[sensorName].maxScore) {\n                groupedBySensor[sensorName].maxScore = score;\n            }\n        }\n    }\n\n    // แปลงเป็น array เพื่อจัดเรียง\n    let reasons = Object.entries(groupedBySensor).map(([sensorName, data]) => ({\n        sensorName,\n        problemText: Array.from(data.problems).join(', '),\n        score: data.maxScore\n    }));\n\n    // เรียงตามความรุนแรง → sensorName\n    reasons.sort((a, b) => {\n        if (b.score !== a.score) return b.score - a.score;\n        return a.sensorName.localeCompare(b.sensorName, undefined, { numeric: true });\n    });\n\n    if (reasons.length === 0) return 'มีเหตุการณ์ที่ต้องตรวจสอบ แต่ไม่พบสาเหตุที่ชัดเจน';\n\n    const limited = reasons.slice(0, maxLines).map(r => `<li>${r.sensorName}: ${r.problemText}</li>`);\n    if (reasons.length > maxLines) limited.push('<li>... </li>');\n\n    return `<ul style=\"margin:0; padding-left:20px; text-align:left;\">${limited.join('')}</ul>`;\n}\n\n// --- Main Logic (สำหรับ 1 ห้อง) ---\nconst r = msg.payload;\nif (!r || typeof r !== 'object' || !r.name || !r.overall) {\n    node.warn(`Skipping malformed room data for email: ${JSON.stringify(r)}`);\n    return null;\n}\n\nconst lastTwoDigits = Date.now() % 100;\nconst invisibleUniqueId = '\\u200b'.repeat(lastTwoDigits + 1);\n\nconst rangeLabel = msg.window?.displayLabel || msg.window?.displayRange || '';\nconst reportLabel = msg.window?.label ? ` ${msg.window.label}` : '';\n\nmsg.topic = `[📢Daily Report${reportLabel} | ${r.overall_status_emoji} ${r.name}] ประจำวันที่ ${msg.window.reportDate} (${rangeLabel})` + invisibleUniqueId;\nconst preheaderText = `สรุปห้อง ${r.name}: สถานะ ${r.overall_status}`;\n\n// --- HTML and CSS Generation ---\nconst styles = `<style type=\"text/css\"> body { margin:0!important; padding:0!important; background:#ffffff; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; } .email-background { background:#f4f7f9; padding:20px 0; } .preheader { display:none!important; visibility:hidden; opacity:0; color:transparent; height:0; width:0; } .status-pill { padding:6px 14px; border-radius:20px; font-size:12px; font-weight:700; color:#fff; display:inline-block; white-space:nowrap; vertical-align:middle; text-shadow:0 1px 2px rgba(0,0,0,.1); box-shadow:0 2px 4px rgba(0,0,0,.1);} .status-pill-ok{background:linear-gradient(135deg,#00c851,#007e33);} .status-pill-warn{background:linear-gradient(135deg,#ffbb33,#ff8800);color:#fff;} .status-pill-crit{background:linear-gradient(135deg,#ff4444,#cc0000);} .status-pill-unknown{background:linear-gradient(135deg,#78909c,#546e7a);} .main-container{background:#fff; box-shadow:0 0 0 1px #e1e8ed, 0 20px 40px rgba(0,0,0,.1); overflow:hidden; margin:20px auto; max-width:800px;} .header-section{background:linear-gradient(135deg,#3B82F6,#1e40af); color:#fff; padding:30px; text-align:center; position:relative; overflow:hidden; border-top-left-radius:16px; border-top-right-radius:16px;} .room-card{background:#fff; border:1px solid #e1e8ed; border-radius:12px; margin:30px; overflow:hidden; box-shadow:0 4px 12px rgba(0,0,0,.05);} .room-header{background:linear-gradient(135deg,#f1f7ff,#e8f4fd); padding:20px 24px; border-bottom:1px solid #e1e8ed;} .room-content{padding:24px;} .alert-box{border-radius:8px; padding:16px 20px; margin-bottom:24px; border-left:4px solid; box-shadow:0 2px 8px rgba(0,0,0,.05);} .alert-box.warning{border-left-color:#ff8800; background:linear-gradient(135deg,#fff8e1,#ffecb3); color:#e65100;} .alert-box.critical{border-left-color:#cc0000; background:linear-gradient(135deg,#ffebee,#ffcdd2); color:#b71c1c;} .data-table{width:100%; border-collapse:collapse; border-radius:8px; overflow:hidden; box-shadow:0 2px 8px rgba(0,0,0,.05); margin-bottom:24px;} .data-table th{background:linear-gradient(135deg,#f8f9fa,#e9ecef); color:#495057; font-size:13px; font-weight:700; padding:14px 12px; text-align:center; border:1px solid #e9ecef;} .data-table td{padding:14px 12px; border:1px solid #e9ecef; text-align:center; font-size:14px; background:#fff; font-weight:600; color:#374151;} .data-table .details-left{text-align:left!important; padding-left:16px!important;} .data-table tr:nth-child(even) td{background:#f8f9fa;} .section-header{font-size:16px; font-weight:700; color:#1565c0; margin:0 0 16px 0; padding:0 0 8px 0; border-bottom:2px solid #e3f2fd; display:flex; align-items:center; gap:8px;} .footer{background:linear-gradient(135deg,#3B82F6,#1e40af); color:#fff; padding:30px; text-align:center; font-size:14px; border-bottom-left-radius:16px; border-bottom-right-radius:16px;} .emoji{display:inline-block; margin-right:8px;}</style>`;\n\nlet html = `<!DOCTYPE html><html lang=\"th\"><head><title>${msg.topic}</title><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">${styles}</head>`;\nhtml += `<body class=\"email-background\"><span class=\"preheader\">${preheaderText}</span>`;\nhtml += `<div class=\"main-container\">`;\nhtml += `<div class=\"header-section\"><h1 style=\"font-size:28px; font-weight:700; margin:0 0 8px 0; text-shadow:0 2px 4px rgba(0,0,0,.2);\"><span class=\"emoji\">📊</span>รายงานสรุปประจำวัน</h1><p style=\"font-size:16px; opacity:.95; margin:0; font-weight:700;\"><strong>วันที่:</strong> ${msg.window.reportDate} | <strong>ช่วงเวลา:</strong> ${rangeLabel} น. (UTC+7)</p></div>`;\n\nconst MAX_ALERTS = 3;\nconst cleanName = r.name.replace('ปกติ', '').replace('เฝ้าระวัง', '').replace('วิกฤติ', '').trim();\nhtml += `<div class=\"room-card\">`;\nhtml += `<div class=\"room-header\"><table role=\"presentation\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" style=\"border-collapse:collapse;\"><tr><td align=\"left\" style=\"font-size:18px; font-weight:700; color:#1565c0;\"><span class=\"emoji\">🏢</span>${cleanName}</td><td align=\"right\" style=\"white-space:nowrap;\">${getStatusPill(r.overall_status)}</td></tr></table></div>`;\nhtml += `<div class=\"room-content\">`;\nif (r.overall_status !== 'ok') { const reasonClass = r.overall_status === 'critical' ? 'critical' : 'warning'; html += `<div class=\"alert-box ${reasonClass}\"><strong style=\"display:block; margin-bottom:5px;\">สาเหตุหลัก:</strong> ${getSummaryReason(r, msg.accept)}</div>`; }\nhtml += `<h3 class=\"section-header\"><span class=\"emoji\">📈</span><span>สถานะโดยรวม</span></h3><table class=\"data-table\"><tr><th>เวลาออนไลน์</th><th>เหตุการณ์ที่ยังไม่ปกติ</th><th>ข้อมูลล่าสุด</th><th>ช่วงข้อมูล</th></tr><tr><td>${fmtNum(r.kpi?.uptime_pct, '%', 2)}</td><td>${r.kpi?.open_alerts_count ?? 0}</td><td>${fmtTime(r.kpi?.latest_data_ts)} น.</td><td>${rangeLabel} น.</td></tr></table>`;\nhtml += `<h3 class=\"section-header\"><span class=\"emoji\">🌡️</span><span>อุณหภูมิและความชื้นโดยรวม</span></h3><table class=\"data-table\"><tr><th>ตัวชี้วัด</th><th>ค่าเฉลี่ย</th><th>สูงสุด (เวลา)</th><th>ต่ำสุด (เวลา)</th></tr><tr><td>อุณหภูมิ</td><td>${fmtNum(r.overall.avg_temp, '°C')}</td><td>${fmtNum(r.overall.max_temp, '°C')} (${fmtTime(r.overall.time_max_temp)} น.)</td><td>${fmtNum(r.overall.min_temp, '°C')} (${fmtTime(r.overall.time_min_temp)} น.)</td></tr><tr><td>ความชื้น</td><td>${fmtNum(r.overall.avg_hum, '%')}</td><td>${fmtNum(r.overall.max_hum, '%')} (${fmtTime(r.overall.time_max_hum)} น.)</td><td>${fmtNum(r.overall.min_hum, '%')} (${fmtTime(r.overall.time_min_hum)} น.)</td></tr></table>`;\n\nconst alertCount = r.alerts ? r.alerts.length : 0;\nhtml += `<h3 class=\"section-header\"><span class=\"emoji\">🚨</span><span>เหตุการณ์ที่เกิดขึ้น (${alertCount} เหตุการณ์)</span></h3>`;\n\nif (r.alerts && r.alerts.length > 0) {\n    html += `<table class=\"data-table\"><tr><th style=\"width:15%;\">เวลา</th><th style=\"width:25%;\">ตำแหน่ง</th><th style=\"width:20%;\">ระดับ</th><th>รายละเอียด</th></tr>`;\n\n    for (const a of r.alerts.slice(0, MAX_ALERTS)) {\n        // ===== START: โค้ดส่วนที่แก้ไข =====\n        let detail;\n        const metricLower = String(a.metric || '').toLowerCase();\n\n        if (metricLower === 'temp' || metricLower === 'hum') {\n            let description = '';\n            let thresholdText = '';\n            const ruleLevel = a.level === 'critical' ? 'crit' : 'warn';\n            const ruleKey = `${a.mac}|${a.sensor_name}|${metricLower}`;\n            const rule = msg.accept?.sensor?.[ruleKey]?.[ruleLevel];\n            const metricName = (metricLower === 'temp') ? 'อุณหภูมิ' : 'ความชื้น';\n\n            if (rule) {\n                if (rule.max != null && a.trigger_value > rule.max) {\n                    description = `${metricName}สูงผิดปกติ`;\n                    thresholdText = `(เกณฑ์ ${rule.max}${a.unit || ''})`;\n                } else if (rule.min != null && a.trigger_value < rule.min) {\n                    description = `${metricName}ต่ำผิดปกติ`;\n                    thresholdText = `(เกณฑ์ ${rule.min}${a.unit || ''})`;\n                }\n            }\n            \n            if (!description) {\n                description = `${metricName}ผิดปกติ`;\n            }\n\n            detail = `${description} ${a.trigger_value}${a.unit || ''}${thresholdText}`;\n        } else {\n            // กรณีอื่นๆ เช่น Connectivity\n            detail = `${a.trigger_value}${a.unit || ''}`;\n        }\n\n        // เพิ่มข้อความเรื่องระยะเวลา (ถ้ามี)\n        detail = `${detail}${a.duration_text || ''}`.trim();\n        // ===== END: โค้ดส่วนที่แก้ไข =====\n        \n        html += `<tr><td>${a.time} น.</td><td>${a.sensor_name}</td><td>${getLevelPill(a.level)}</td><td>${detail}</td></tr>`;\n    }\n\n    html += `</table>`;\n    if (r.alerts.length > MAX_ALERTS) { html += `<p style=\"font-size:13px; color:#6c757d; margin:-16px 0 0 0; text-align:right;\">+${r.alerts.length - MAX_ALERTS} รายการที่เหลือ (ดูในไฟล์แนบ)</p>`; }\n} else {\n    html += `<div style=\"text-align:center; padding:20px 0; color:#28a745; font-weight:700;\">✅ <strong>ไม่พบเหตุการณ์ผิดปกติในช่วงเวลานี้</strong></div>`;\n}\nhtml += `</div></div>`;\n\nconst genAt = new Date().toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit', second: '2-digit', timeZone: env.get('TZ') || 'Asia/Bangkok' });\nhtml += `<div class=\"footer\"><p style=\"margin:0 0 8px 0; font-weight:700;\">รายงานนี้สร้างโดยระบบอัตโนมัติ เวลา ${genAt}</p><p style=\"margin:0; font-weight:700;\">ไฟล์แนบ: <span style=\"font-weight:700;\">${msg.attachmentName || 'ไม่มี'}</span></p></div>`;\nhtml += `</div></body></html>`;\n\nmsg.payload = html;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2720,
        "y": 320,
        "wires": [
            [
                "3cee4dec5268f711"
            ]
        ]
    },
    {
        "id": "3cee4dec5268f711",
        "type": "change",
        "z": "6d5ddc6b8286095b",
        "name": "Store Email Body",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "emailTextBody",
                "tot": "msg"
            }
        ],
        "x": 2990,
        "y": 320,
        "wires": [
            [
                "3c024db2459e5ada"
            ]
        ]
    },
    {
        "id": "1b2f1d4a145429c5",
        "type": "function",
        "z": "6d5ddc6b8286095b",
        "name": "Prepare Attachment + To",
        "func": "msg.attachments=[{ filename: msg.attachmentName, content: msg.payload, contentType: 'text/csv' }];\nmsg.payload = msg.emailTextBody; // body\n// set recipients to msg.to (comma separated)\nconst emails = (msg.recipients && Array.isArray(msg.recipients.email)) ? msg.recipients.email : [];\nif (emails.length) msg.to = emails.join(',');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3590,
        "y": 320,
        "wires": [
            [
                "6705ace90aa6e3cd"
            ]
        ]
    },
    {
        "id": "6705ace90aa6e3cd",
        "type": "e-mail",
        "z": "6d5ddc6b8286095b",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "",
        "dname": "Send Email",
        "x": 3790,
        "y": 320,
        "wires": []
    },
    {
        "id": "46be75ddfa08b645",
        "type": "template",
        "z": "6d5ddc6b8286095b",
        "name": "Build Query: Events",
        "field": "topic",
        "fieldType": "msg",
        "syntax": "mustache",
        "template": "SELECT *\nFROM alert_events\nWHERE opened_at <  '{{window.end}}'\n  AND COALESCE(closed_at, '9999-12-31 00:00:00') >= '{{window.start}}'\n  AND mac IN ({{{allMacsInQuotes}}})\nORDER BY mac, sensor_name, opened_at ASC, COALESCE(closed_at, '9999-12-31 00:00:00') ASC;\n",
        "output": "str",
        "x": 1030,
        "y": 340,
        "wires": [
            [
                "949f82e57c3ebd90"
            ]
        ]
    },
    {
        "id": "b1c2d3e4f5a6b7c8",
        "type": "split",
        "z": "6d5ddc6b8286095b",
        "name": "Split Recipients",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 3100,
        "y": 400,
        "wires": [
            [
                "c2d3e4f5a6b7c8d9"
            ]
        ]
    },
    {
        "id": "c2d3e4f5a6b7c8d9",
        "type": "change",
        "z": "6d5ddc6b8286095b",
        "name": "Prepare Telegram Msg",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "chatId",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "move",
                "p": "chatId",
                "pt": "msg",
                "to": "payload.chatId",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "telegramMessage",
                "pt": "msg",
                "to": "payload.content",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "message",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.options.parse_mode",
                "pt": "msg",
                "to": "MarkdownV2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3440,
        "y": 400,
        "wires": [
            [
                "87c968f52bb723cd"
            ]
        ]
    },
    {
        "id": "7fed98e1103d82dc",
        "type": "template",
        "z": "6d5ddc6b8286095b",
        "name": "Build Query: KPIs",
        "field": "topic",
        "fieldType": "msg",
        "syntax": "mustache",
        "template": "-- V3: KPIs Query (Uptime logic moved to separate nodes)\nSELECT \n    mac,\n    MAX(timestamp) AS latest_data_ts\nFROM dht_22\nWHERE timestamp >= '{{window.start}}' AND timestamp < '{{window.end}}' AND mac IN ({{{allMacsInQuotes}}})\nGROUP BY mac;",
        "output": "str",
        "x": 1030,
        "y": 260,
        "wires": [
            [
                "683725ffb13d9186"
            ]
        ]
    },
    {
        "id": "683725ffb13d9186",
        "type": "mysql",
        "z": "6d5ddc6b8286095b",
        "mydb": "5e560f07cfec117a",
        "name": "MySQL: Compute KPIs",
        "x": 1310,
        "y": 260,
        "wires": [
            [
                "f3d9089983c0d891"
            ]
        ]
    },
    {
        "id": "f3d9089983c0d891",
        "type": "change",
        "z": "6d5ddc6b8286095b",
        "name": "topic=kpis",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "kpis",
                "tot": "str"
            }
        ],
        "x": 1680,
        "y": 260,
        "wires": [
            [
                "c1115f55b7709fa6"
            ]
        ]
    },
    {
        "id": "263477a701e045de",
        "type": "function",
        "z": "6d5ddc6b8286095b",
        "name": "Prepare Uptime Queries",
        "func": "const macs = msg.allMacs || [];\nconst { start, end } = msg.window;\n\nif (macs.length === 0) {\n  return null;\n}\n\n// สร้างส่วนของ UNION ALL สำหรับแต่ละ MAC address\nconst all_queries = macs.map(mac => `\n    (\n        SELECT id, mac, status, time \n        FROM esp_status_log \n        WHERE mac = '${mac}' AND time >= '${start}' AND time <= '${end}'\n    )\n    UNION ALL\n    (\n        SELECT id, mac, status, time FROM (\n            SELECT id, mac, status, time \n            FROM esp_status_log \n            WHERE mac = '${mac}' AND time < '${start}' \n            ORDER BY time DESC, id DESC \n            LIMIT 1\n        ) AS prev_status\n    )\n`).join(' UNION ALL ');\n\n// SQL สุดท้ายที่รวมทุกอย่างแล้ว\nconst final_sql = `${all_queries} ORDER BY mac ASC, time ASC, id ASC;`;\n\nmsg.topic = final_sql;\nmsg.payload = []; // ไม่ต้องใช้ payload เพราะเราใส่ค่าลงใน SQL โดยตรง\nmsg.timeRange = { start: start, end: end }; // ส่งช่วงเวลาไปด้วย\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 480,
        "wires": [
            [
                "b143ae9b026c575e"
            ]
        ]
    },
    {
        "id": "b143ae9b026c575e",
        "type": "mysql",
        "z": "6d5ddc6b8286095b",
        "mydb": "5e560f07cfec117a",
        "name": "Query Uptime History",
        "x": 1240,
        "y": 480,
        "wires": [
            [
                "abadb063e438cff2"
            ]
        ]
    },
    {
        "id": "abadb063e438cff2",
        "type": "function",
        "z": "6d5ddc6b8286095b",
        "name": "Calculate Uptime %",
        "func": "// รับข้อมูลทั้งหมดจาก DB\nconst allRows = Array.isArray(msg.payload) ? msg.payload : [];\nconst { start, end } = msg.timeRange || {};\nconst allMacs = msg.allMacs || [];\n\nconst startMs = new Date(start).getTime();\nconst endMs = new Date(end).getTime();\n\nif (!Number.isFinite(startMs) || !Number.isFinite(endMs) || endMs <= startMs) {\n    msg.payload = [];\n    return msg;\n}\n\nconst resultsByMac = {};\nallRows.forEach(row => {\n    if (!resultsByMac[row.mac]) {\n        resultsByMac[row.mac] = [];\n    }\n    resultsByMac[row.mac].push(row);\n});\n\nconst uptime_results = allMacs.map(mac => {\n    const rows = resultsByMac[mac] || [];\n\n    const list = rows\n        .map(r => ({ id: r.id, status: String(r.status || '').toLowerCase(), ts: new Date(r.time).getTime() }))\n        .filter(r => Number.isFinite(r.ts) && r.id)\n        .sort((a, b) => {\n            if (a.ts !== b.ts) return a.ts - b.ts;\n            return a.id - b.id;\n        });\n\n    if (list.length === 0) {\n        return { mac: mac, uptime_pct: 0.0 };\n    }\n\n    let onlineMs = 0;\n    let cursor_ts = startMs;\n    let last_status = 'offline';\n\n    const pointsBefore = list.filter(p => p.ts < startMs);\n    if (pointsBefore.length > 0) {\n        last_status = pointsBefore[pointsBefore.length - 1].status;\n    }\n\n    for (const point of list) {\n        if (point.ts < cursor_ts) {\n            last_status = point.status;\n            continue;\n        }\n        const seg_end = Math.min(point.ts, endMs);\n        if (seg_end > cursor_ts) {\n            if (last_status === 'online') {\n                onlineMs += (seg_end - cursor_ts);\n            }\n        }\n        cursor_ts = point.ts;\n        last_status = point.status;\n        if (cursor_ts >= endMs) break;\n    }\n\n    if (cursor_ts < endMs) {\n        if (last_status === 'online') {\n            onlineMs += (endMs - cursor_ts);\n        }\n    }\n\n    const totalMs = endMs - startMs;\n    const uptimePct = totalMs > 0 ? +(onlineMs / totalMs * 100).toFixed(2) : 0;\n\n    return { mac: mac, uptime_pct: uptimePct };\n});\n\nmsg.topic = \"uptime_results\";\nmsg.payload = uptime_results; // ผลลัพธ์เป็น Array ที่สมบูรณ์แล้ว\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 480,
        "wires": [
            [
                "98fa99731bd86149"
            ]
        ]
    },
    {
        "id": "98fa99731bd86149",
        "type": "change",
        "z": "6d5ddc6b8286095b",
        "name": "topic=uptime_results",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "uptime_results",
                "tot": "str"
            }
        ],
        "x": 1660,
        "y": 480,
        "wires": [
            [
                "c1115f55b7709fa6"
            ]
        ]
    },
    {
        "id": "18e2de05a8f5794c",
        "type": "change",
        "z": "6d5ddc6b8286095b",
        "name": "Check ",
        "rules": [
            {
                "t": null,
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2070,
        "y": 360,
        "wires": [
            [
                "6fd4f0f9a42e5ad6"
            ]
        ]
    },
    {
        "id": "f741b320550f13e8",
        "type": "function",
        "z": "6d5ddc6b8286095b",
        "name": "Rooms",
        "func": "// Fan-out Rooms (v2: الصحيح) — แตก msg.rooms ออกเป็นข้อความต่อห้อง\n// และส่งต่อ property ที่จำเป็นสำหรับแต่ละห้องไปให้ครบถ้วน\n\nif (!Array.isArray(msg.rooms) || msg.rooms.length === 0) {\n    node.status({ fill: 'yellow', shape: 'ring', text: 'No rooms to fan-out' });\n    return null;\n}\n\n// เก็บค่ากลางที่ต้องใช้ร่วมกันทั้งหมดไว้ก่อน\nconst baseProperties = {\n    window: msg.window,\n    recipients: msg.recipients,\n    accept: msg.accept,\n    report_id: msg.report_id // ส่งต่อ report_id ไปด้วย\n};\n\nfor (const room of msg.rooms) {\n    // สร้าง message ใหม่สำหรับแต่ละห้องโดยเฉพาะ\n    const roomMsg = {};\n\n    // 1. ใส่ข้อมูลเฉพาะของห้องนี้เป็น payload หลัก\n    roomMsg.payload = room;\n    \n    // 2. พกค่ากลางที่จำเป็นไปด้วย\n    roomMsg.window = baseProperties.window;\n    roomMsg.recipients = baseProperties.recipients;\n    roomMsg.accept = baseProperties.accept;\n    roomMsg.report_id = baseProperties.report_id;\n\n    // 3. ตั้งค่า property สำหรับการดึง CSV และตั้งชื่อไฟล์\n    roomMsg.roomMac = room.mac; // << สำคัญมากสำหรับ GET CSV node\n    \n    const reportLabel = baseProperties.window.label || room.name;\n    const safeRoomName = room.name.replace(/\\s+/g, '_');\n    const d = new Date(baseProperties.window.end);\n    const dateStr = `${String(d.getDate()).padStart(2,'0')}${String(d.getMonth()+1).padStart(2,'0')}${d.getFullYear()}`;\n    \n    roomMsg.attachmentName = `Daily_Report_${reportLabel}_${dateStr}.csv`;\n\n    // ส่ง message ของห้องนี้ออกไป\n    node.send(roomMsg);\n}\n\n// ไม่ต้องส่ง msg เดิมออกไปแล้ว\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2460,
        "y": 360,
        "wires": [
            [
                "b86a5038e2abdd91",
                "a9b1c2d3e4f5a6b7"
            ]
        ]
    },
    {
        "id": "c1115f55b7709fa6",
        "type": "join",
        "z": "6d5ddc6b8286095b",
        "name": "Join All Data",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "5",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1900,
        "y": 360,
        "wires": [
            [
                "18e2de05a8f5794c"
            ]
        ]
    },
    {
        "id": "3c024db2459e5ada",
        "type": "change",
        "z": "6d5ddc6b8286095b",
        "name": "Prepare CSV",
        "rules": [
            {
                "t": "set",
                "p": "msg.payload.from",
                "pt": "msg",
                "to": "window.startISO",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "msg.payload.to",
                "pt": "msg",
                "to": "window.endISO",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "msg.payload.type",
                "pt": "msg",
                "to": "csv",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "msg.payload.macs",
                "pt": "msg",
                "to": "roomMac",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3190,
        "y": 320,
        "wires": [
            [
                "d7c4dcf44846893f"
            ]
        ]
    },
    {
        "id": "d7c4dcf44846893f",
        "type": "http request",
        "z": "6d5ddc6b8286095b",
        "name": "GET CSV",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "query",
        "url": "http://localhost:1880/api/export",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 3380,
        "y": 320,
        "wires": [
            [
                "1b2f1d4a145429c5"
            ]
        ]
    },
    {
        "id": "87c968f52bb723cd",
        "type": "telegram sender",
        "z": "6d5ddc6b8286095b",
        "name": "",
        "bot": "ac1b0163af36f2a7",
        "haserroroutput": false,
        "outputs": 1,
        "x": 3770,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "fe2c72fcaf2df146",
        "type": "comment",
        "z": "6d5ddc6b8286095b",
        "name": "veiv rdyo nibj hdpi",
        "info": "",
        "x": 4170,
        "y": 160,
        "wires": []
    },
    {
        "id": "0720ef5c79415c4f",
        "type": "comment",
        "z": "6d5ddc6b8286095b",
        "name": "oopc nzll dawl rbyl",
        "info": "",
        "x": 4170,
        "y": 120,
        "wires": []
    },
    {
        "id": "a9b1c2d3e4f5a6b7",
        "type": "function",
        "z": "6d5ddc6b8286095b",
        "name": "Compose Telegram Message",
        "func": "// ===== Compose Telegram Message (v7.4 - Quote header + date/time) =====\n\nconst telegramRecipients = msg.recipients?.telegram;\nif (!telegramRecipients || telegramRecipients.length === 0) {\n    node.status({ fill: \"yellow\", shape: \"ring\", text: \"No Telegram recipients\" });\n    return null;\n}\n\nfunction fmtNum(n, u = '', p = 1) {\n    if (n == null || isNaN(n)) return 'N/A';\n    return u ? `${Number(n).toFixed(p)}${u}` : Number(n).toFixed(p);\n}\nfunction fmtTime(t) {\n    if (!t) return '—';\n    try {\n        const d = new Date(t);\n        const hh = String(d.getHours()).padStart(2, '0');\n        const mm = String(d.getMinutes()).padStart(2, '0');\n        return `${hh}:${mm}`;\n    } catch { return 'Invalid Time'; }\n}\nfunction escapeMarkdown(text) {\n    if (typeof text !== 'string') text = String(text);\n    const charsToEscape = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];\n    let out = '';\n    for (const ch of text) out += charsToEscape.includes(ch) ? '\\\\' + ch : ch;\n    return out;\n}\nfunction statusEmojiCircle(s) {\n    const k = String(s || '').toLowerCase();\n    if (k === 'ok' || k === 'normal') return '🟢';\n    if (k === 'warning' || k === 'warn') return '🟡';\n    if (k === 'critical' || k === 'crit') return '🔴';\n    if (k === 'offline') return '⚫️';\n    return '⚪️';\n}\n\n// ===== Summary Reason =====\nfunction getSummaryReasonTelegram(room, rules, escapeFn, maxLines = 5) {\n    if (room.overall_status === 'ok') return escapeFn('✅ สถานะปกติ');\n\n    function getProblemText(alert) {\n        const m = String(alert.metric || '').toLowerCase();\n        const isConnDown = m.includes('connect') || m.includes('offline') || /ออฟไลน์/i.test(String(alert.trigger_value || ''));\n        if (isConnDown) return { dir: 'other', text: '🔌 ออฟไลน์' };\n\n        if (m === 'temp' || m === 'hum') {\n            const ruleLevelKey = alert.level === 'critical' ? 'crit' : 'warn';\n            const sensorName = alert.sensor_name || 'ไม่ระบุชื่อ';\n            const key = `${alert.mac}|${sensorName}|${m}`;\n            const rg = rules?.sensor?.[key]?.[ruleLevelKey];\n            if (!rg) return null;\n\n            if (alert.level === 'critical') {\n                if (rg.max != null && alert.trigger_value > rg.max) {\n                    return { dir: 'up', text: m === 'temp' ? '🥵 อุณหภูมิสูงมาก' : '💦 ความชื้นสูงมาก', score: 2 };\n                } else if (rg.min != null && alert.trigger_value < rg.min) {\n                    return { dir: 'down', text: m === 'temp' ? '🥶 อุณหภูมิต่ำมาก' : '🏜️ ความชื้นต่ำมาก', score: 2 };\n                }\n            } else if (alert.level === 'warning') {\n                if (rg.max != null && alert.trigger_value > rg.max) {\n                    return { dir: 'up', text: m === 'temp' ? '🌡️ อุณหภูมิสูงผิดปกติ' : '💧 ความชื้นสูงผิดปกติ', score: 1 };\n                } else if (rg.min != null && alert.trigger_value < rg.min) {\n                    return { dir: 'down', text: m === 'temp' ? '🌡️ อุณหภูมิต่ำผิดปกติ' : '💧 ความชื้นต่ำผิดปกติ', score: 1 };\n                }\n            }\n        }\n        return null;\n    }\n\n    if (!room.alerts || room.alerts.length === 0) {\n        return escapeFn('⚠️ มีเหตุการณ์ที่ต้องตรวจสอบ แต่ไม่พบสาเหตุรายอุปกรณ์ที่ชัดเจน');\n    }\n\n    const levelScore = { 'critical': 2, 'warning': 1 };\n    const groupedBySensor = {};\n\n    for (const alert of room.alerts) {\n        const sensorName = alert.sensor_name || 'ไม่ระบุชื่อ';\n        if (!groupedBySensor[sensorName]) groupedBySensor[sensorName] = { up: null, down: null, others: new Set(), maxScore: 0 };\n        const problem = getProblemText(alert);\n        if (problem) {\n            if (problem.dir === 'up') {\n                if (!groupedBySensor[sensorName].up || problem.score > (groupedBySensor[sensorName].up.score || 0)) {\n                    groupedBySensor[sensorName].up = problem;\n                }\n            } else if (problem.dir === 'down') {\n                if (!groupedBySensor[sensorName].down || problem.score > (groupedBySensor[sensorName].down.score || 0)) {\n                    groupedBySensor[sensorName].down = problem;\n                }\n            } else {\n                groupedBySensor[sensorName].others.add(problem.text);\n            }\n            const score = problem.score || levelScore[alert.level] || 0;\n            if (score > groupedBySensor[sensorName].maxScore) groupedBySensor[sensorName].maxScore = score;\n        }\n    }\n\n    let reasons = Object.entries(groupedBySensor).map(([sensorName, data]) => {\n        const problems = [];\n        const offline = Array.from(data.others).filter(t => t.includes('ออฟไลน์'));\n        const rest    = Array.from(data.others).filter(t => !t.includes('ออฟไลน์'));\n        problems.push(...offline);\n        if (data.up) problems.push(data.up.text);\n        if (data.down) problems.push(data.down.text);\n        problems.push(...rest);\n        return { sensorName, problemText: problems.join(', '), score: data.maxScore };\n    });\n\n    reasons.sort((a, b) => b.score !== a.score ? b.score - a.score : a.sensorName.localeCompare(b.sensorName, undefined, { numeric: true }));\n\n    const limited = reasons.slice(0, maxLines).map(r => `> • *${escapeFn(r.sensorName)}:* ${r.problemText}`);\n    if (reasons.length > maxLines) limited.push(`> ...และอีก ${reasons.length - maxLines} รายการ`);\n    if (limited.length === 0) return escapeFn('⚠️ มีเหตุการณ์ที่ต้องตรวจสอบ แต่ไม่พบสาเหตุรายอุปกรณ์ที่ชัดเจน');\n    return limited.join('\\n');\n}\n\n// ===== Build message =====\nconst r = msg.payload;\nif (!r || typeof r !== 'object' || !r.name || !r.overall) {\n    node.warn(`Skipping malformed room data for Telegram: ${JSON.stringify(r)}`);\n    return null;\n}\n\nconst lines = [];\nconst roomStatus = r.overall_status || r.overall?.status || 'unknown';\nconst roomDot = statusEmojiCircle(roomStatus);\n\n// Header (quoted as requested)\nconst dateText = escapeMarkdown(msg.window.reportDate || '');\nconst rangeText = escapeMarkdown(msg.window.displayRange || '');\nlines.push(`> *📊 รายงานสรุปห้อง: ${roomDot} ${escapeMarkdown(r.name)}*`);\nlines.push(`> *วันที่:* *${dateText}* \\\\| *ช่วงเวลา:* *${rangeText}*`);\nlines.push('');\n\n// Temperature block\nlines.push(`> *🌡️ อุณหภูมิโดยรวม*`);\nlines.push(`> • เฉลี่ย: \\`${escapeMarkdown(fmtNum(r.overall.avg_temp, '°C'))}\\` ${r.overall.temp_status === 'ok' ? '✅' : '❗️'}`);\nlines.push(`> • สูงสุด: \\`${escapeMarkdown(fmtNum(r.overall.max_temp, '°C'))}\\` _\\\\(เวลา ${escapeMarkdown(fmtTime(r.overall.time_max_temp))}\\\\)_`);\nlines.push(`> • ต่ำสุด: \\`${escapeMarkdown(fmtNum(r.overall.min_temp, '°C'))}\\` _\\\\(เวลา ${escapeMarkdown(fmtTime(r.overall.time_min_temp))}\\\\)_`);\nlines.push('');\n\n// Humidity block\nlines.push(`> *💧 ความชื้นโดยรวม*`);\nlines.push(`> • เฉลี่ย: \\`${escapeMarkdown(fmtNum(r.overall.avg_hum, '%'))}\\` ${r.overall.hum_status === 'ok' ? '✅' : '❗️'}`);\nlines.push(`> • สูงสุด: \\`${escapeMarkdown(fmtNum(r.overall.max_hum, '%'))}\\` _\\\\(เวลา ${escapeMarkdown(fmtTime(r.overall.time_max_hum))}\\\\)_`);\nlines.push(`> • ต่ำสุด: \\`${escapeMarkdown(fmtNum(r.overall.min_hum, '%'))}\\` _\\\\(เวลา ${escapeMarkdown(fmtTime(r.overall.time_min_hum))}\\\\)_`);\nlines.push('');\n\n// Alerts block (quoted)\nconst alertCount = Array.isArray(r.alerts) ? r.alerts.length : 0;\nif (alertCount > 0) {\n    lines.push(`> *🚨 มีเหตุการณ์เกิดขึ้น ${alertCount} เหตุการณ์*`);\n    lines.push(`> *สาเหตุหลัก:*`);\n    const summary = getSummaryReasonTelegram(r, msg.accept, escapeMarkdown);\n    const summaryQuoted = summary.split('\\n').map(l => l.startsWith('>') ? l : `> ${l}`).join('\\n');\n    lines.push(summaryQuoted);\n}\n\nmsg.telegramMessage = lines.join('\\n');\nmsg.payload = telegramRecipients;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 400,
        "wires": [
            [
                "b1c2d3e4f5a6b7c8"
            ]
        ]
    },
    {
        "id": "ac1b0163af36f2a7",
        "type": "telegram bot",
        "z": "6d5ddc6b8286095b",
        "botname": "PCSGH_Server_Monitoring2",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "pollinterval": 300,
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": 6667,
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbothost": "0.0.0.0",
        "localbotport": 8443,
        "publicbotport": 8443,
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "c1a8b9f7.1d2e3f",
        "type": "subflow",
        "name": "Send Notification",
        "info": "Subflow to handle sending notifications via Email.",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "13d6c2b7c8c202f1"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c1465768540b83e1",
        "type": "http request",
        "z": "c1a8b9f7.1d2e3f",
        "name": "Get Notification Settings",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1880/api/notification-settings",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 80,
        "wires": [
            [
                "e28cfda9df19f4d1"
            ]
        ]
    },
    {
        "id": "e28cfda9df19f4d1",
        "type": "change",
        "z": "c1a8b9f7.1d2e3f",
        "name": "ย้าย settings + คืน payload = alert",
        "rules": [
            {
                "t": "set",
                "p": "settings",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "alert",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 80,
        "wires": [
            [
                "b341f478991fb3a4"
            ]
        ]
    },
    {
        "id": "77597513641dbe6d",
        "type": "e-mail",
        "z": "c1a8b9f7.1d2e3f",
        "d": true,
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "",
        "dname": "Send Email via Gmail",
        "x": 1240,
        "y": 40,
        "wires": []
    },
    {
        "id": "13d6c2b7c8c202f1",
        "type": "change",
        "z": "c1a8b9f7.1d2e3f",
        "name": "สำรอง alert → msg.alert",
        "rules": [
            {
                "t": "set",
                "p": "alert",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 80,
        "wires": [
            [
                "c1465768540b83e1"
            ]
        ]
    },
    {
        "id": "b341f478991fb3a4",
        "type": "function",
        "z": "c1a8b9f7.1d2e3f",
        "name": "Prepare Email (robust)",
        "func": "// Prepare Email v6.4 (keep settings/alert for Telegram use)\nconst settings = msg.settings || {};\nconst alert = msg.alert || msg.payload || {};\n\n// --- 1. Recipient List ---\nconst rcp = settings.recipients || {};\nconst raw = Array.isArray(rcp.email) ? rcp.email : (typeof rcp.email === 'string' ? rcp.email.split(',') : []);\nconst toList = raw.map(s => String(s).trim()).filter(Boolean);\nif (toList.length === 0) {\n    node.status({ fill: 'yellow', shape: 'ring', text: 'No email recipients' });\n    return null;\n}\n\n// --- 2. Helper Functions ---\nconst thaiTime = ts => (ts ? new Date(ts) : new Date()).toLocaleString('th-TH', {\n    day: '2-digit', month: '2-digit', year: 'numeric',\n    hour: '2-digit', minute: '2-digit', second: '2-digit',\n    hour12: false, timeZone: 'Asia/Bangkok'\n});\nconst pick = (o, ...k) => { for (const x of k) if (o && o[x] !== undefined && o[x] !== null && o[x] !== '') return o[x]; return null; };\nconst toNum = v => { if (v === null || v === undefined) return null; const m = String(v).match(/-?\\d+(\\.\\d+)?/); return m ? Number(m[0]) : null; };\n\nfunction metricInfo(metric) {\n    const k = String(metric || '').toLowerCase();\n    if (k.startsWith('temp')) return { th: 'อุณหภูมิ', unit: '°C', digits: 1, icon: '🌡️' };\n    if (k.startsWith('hum')) return { th: 'ความชื้น', unit: '%', digits: 1, icon: '💧' };\n    if (k.startsWith('connect')) return { th: 'สถานะระบบ', unit: '', digits: 0, icon: '📡' };\n    if (k.startsWith('sensor_connect')) return { th: 'สถานะเซ็นเซอร์', unit: '', digits: 0, icon: '🔌' };\n    return { th: 'ค่ามอนิเตอร์', unit: '', digits: 2, icon: '📊' };\n}\n\n// --- 3. Data Extraction & Processing ---\nconst room = pick(alert, 'room_name', 'room') || 'N/A';\nconst pos = pick(alert, 'sensor_name', 'sensor') || 'N/A';\nconst tsTH = thaiTime(pick(alert, 'ts', 'timestamp', 'opened_at'));\nconst mac = String(pick(alert, 'mac', 'device_mac') || '').toUpperCase();\nconst metricKey = String(pick(alert, 'metric', 'type') || '').toLowerCase();\nconst mi = metricInfo(metricKey);\nconst typeOrState = String(pick(alert, 'event', 'type', 'state') || '').toLowerCase();\nconst isRecovery = ['recovery', 'normal', 'resolve', 'resolved', 'close', 'closed'].includes(typeOrState);\n\nlet valNum = isRecovery\n    ? toNum(pick(alert, 'value', 'recovery_value', 'close_value', 'value_at_close', 'current_value', 'last_value'))\n    : toNum(pick(alert, 'value', 'trigger_value', 'current_value', 'last_value'));\n\nlet warnMin = toNum(pick(alert, 'warn_min'));\nlet warnMax = toNum(pick(alert, 'warn_max'));\nlet critMin = toNum(pick(alert, 'crit_min'));\nlet critMax = toNum(pick(alert, 'crit_max'));\n\n// Fetch rules from global context if needed\nif ([warnMin, warnMax, critMin, critMax].some(v => v === null) && metricKey) {\n    const rules = global.get('effectiveRuleMap') || {};\n    const rule = rules[`${mac}|${pos}|${metricKey}`] || rules[`${mac}|overall|${metricKey}`] || rules[`system_${metricKey}`];\n    if (rule) {\n        if (warnMin === null) warnMin = toNum(rule.warn_min);\n        if (warnMax === null) warnMax = toNum(rule.warn_max);\n        if (critMin === null) critMin = toNum(rule.crit_min);\n        if (critMax === null) critMax = toNum(rule.crit_max);\n    }\n}\n\nlet level = String(pick(alert, 'level', 'severity') || 'info').toLowerCase();\nlet sevLabel;\nif (isRecovery) { sevLabel = 'แจ้งเตือนสถานะปกติ'; level = 'recovery'; }\nelse if (level === 'critical') sevLabel = 'แจ้งเตือนสถานะวิกฤต';\nelse if (level === 'warning') sevLabel = 'แจ้งเตือนสถานะเฝ้าระวัง';\nelse sevLabel = 'แจ้งให้ทราบ';\n\nlet statusWord = 'ผิดปกติ';\nif (metricKey.includes('connect')) {\n    statusWord = (valNum === 0 || valNum === null) ? 'ออฟไลน์' : 'กลับมาออนไลน์'; // Handle null as offline\n} else if (valNum !== null) {\n    if (critMax !== null && valNum > critMax) statusWord = 'สูงถึงระดับวิกฤต';\n    else if (critMin !== null && valNum < critMin) statusWord = 'ต่ำถึงระดับวิกฤต';\n    else if (warnMax !== null && valNum > warnMax) statusWord = 'สูงกว่าเกณฑ์เฝ้าระวัง';\n    else if (warnMin !== null && valNum < warnMin) statusWord = 'ต่ำกว่าเกณฑ์เฝ้าระวัง';\n    else statusWord = 'กลับสู่เกณฑ์ปกติ';\n}\n\n// --- 4. Subject & Plain Text Body (Fallback) ---\nlet subject;\nconst alertDeviceName = metricKey === 'connectivity' ? room : `${room} (${pos})`;\nconst alertMetricName = metricKey.includes('connect') ? '' : ` ${mi.th}`;\nsubject = `[${isRecovery ? '✅' : '🚨'}] ${alertDeviceName}${alertMetricName} ${statusWord}`;\n\nconst valTxt = (valNum === null) ? '-' : `${valNum.toFixed(mi.digits)}${mi.unit}`;\nlet plainTextBody = `\n** ${sevLabel.toUpperCase()} **\n----------------------------------\nเวลา: ${tsTH}\nสถานที่: ${room}\n`;\nif (metricKey !== 'connectivity') plainTextBody += `เซ็นเซอร์: ${pos}\\n`;\nif (!metricKey.includes('connect')) plainTextBody += `ค่าปัจจุบัน: ${valTxt}\\n`;\nplainTextBody += `สถานะ: ${statusWord}\\n`;\n\n// --- 5. HTML Body Generation ---\nconst colors = {\n    critical: { bg: '#ffebee', border: '#d32f2f', text: '#c62828', icon: '🚨' },\n    warning: { bg: '#fff8e1', border: '#f57c00', text: '#e65100', icon: '⚠️' },\n    recovery: { bg: '#e8f5e9', border: '#388e3c', text: '#1b5e20', icon: '✅' },\n    info: { bg: '#e3f2fd', border: '#1976d2', text: '#0d47a1', icon: 'ℹ️' }\n};\nconst c = colors[level] || colors.info;\n\n// helper: fixed-width label/value TD\nconst TD_LABEL = 'style=\"width:140px; color:#555; white-space:nowrap; vertical-align:top; padding:12px 0; border-bottom:1px solid #eef2f5;\"';\nconst TD_VALUE = 'style=\"color:#111; font-weight:600; text-align:left; vertical-align:top; padding:12px 0; border-bottom:1px solid #eef2f5;\"';\nconst mkRow = (icon, label, value) => `<tr><td ${TD_LABEL}>${icon} ${label}</td><td ${TD_VALUE}>${value}</td></tr>`;\n\nconst styles = `\n<style>\n    body { margin:0; padding:0; font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; background-color:#f4f7f9; }\n    .container { max-width:600px; margin:20px auto; background-color:#ffffff; border-radius:12px; overflow:hidden; box-shadow:0 4px 20px rgba(0,0,0,0.08); }\n    .header { background-color:${c.bg}; border-top:8px solid ${c.border}; padding:30px 25px; text-align:center; }\n    .header h1 { font-size:28px; font-weight:700; color:${c.text}; margin:0; }\n    .content { padding:30px 25px; }\n    .content h2 { font-size:20px; font-weight:600; color:#333; margin:0 0 20px 0; border-bottom:2px solid #eef2f5; padding-bottom:10px; }\n    .details-table { width:100%; border-collapse:collapse; margin-bottom:25px; }\n    .value-box { background-color:${c.bg}; border-left:5px solid ${c.border}; padding:20px; text-align:center; border-radius:8px; }\n    .value-box .label { font-size:14px; color:${c.text}; margin:0 0 5px 0; }\n    .value-box .value { font-size:32px; font-weight:700; color:${c.text}; margin:0; }\n    .footer { background-color:#f4f7f9; padding:20px; text-align:center; font-size:12px; color:#888; }\n</style>\n`;\n\nlet htmlBody = `<!DOCTYPE html><html lang=\"th\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>${subject}</title>${styles}</head><body><div class=\"container\">`;\nhtmlBody += `<div class=\"header\"><h1>${c.icon} ${sevLabel}</h1></div>`;\nhtmlBody += `<div class=\"content\">`;\n\n// details table\nhtmlBody += `<h2>รายละเอียดการแจ้งเตือน</h2>`;\nhtmlBody += `<table class=\"details-table\">`;\nhtmlBody += mkRow('📅', 'เวลา:', tsTH);\nhtmlBody += mkRow('📍', 'สถานที่:', room);\nif (metricKey !== 'connectivity') {\n    const label = metricKey.includes('sensor') ? 'เซ็นเซอร์:' : 'ตำแหน่ง:';\n    htmlBody += mkRow('🎯', label, pos);\n}\nhtmlBody += `</table>`;\n\n// value box\nif (metricKey.includes('connect')) {\n    htmlBody += `<div class=\"value-box\"><p class=\"label\">สถานะปัจจุบัน</p><p class=\"value\">${statusWord}</p></div>`;\n} else {\n    htmlBody += `<div class=\"value-box\"><p class=\"label\">${mi.th}ปัจจุบัน</p><p class=\"value\">${valTxt}</p></div>`;\n}\n\n// reference section\nlet rangeTxt = '';\nif (metricKey.includes('connect')) {\n    rangeTxt = '-';\n} else {\n    if (level === 'critical' && (critMin !== null || critMax !== null)) {\n        rangeTxt = `${critMin !== null ? critMin.toFixed(mi.digits) : '-'} - ${critMax !== null ? critMax.toFixed(mi.digits) : '-'}${mi.unit}`;\n    } else if (warnMin !== null || warnMax !== null) {\n        rangeTxt = `${warnMin !== null ? warnMin.toFixed(mi.digits) : '-'} - ${warnMax !== null ? warnMax.toFixed(mi.digits) : '-'}${mi.unit}`;\n    }\n}\n\nif (rangeTxt) {\n    htmlBody += `<h2 style=\"margin-top:30px;\">ข้อมูลอ้างอิง</h2>`;\n    htmlBody += `<table class=\"details-table\">`;\n    htmlBody += mkRow('✅', 'ช่วงที่เหมาะสม:', rangeTxt);\n    htmlBody += `</table>`;\n}\n\nhtmlBody += `</div>`;\nhtmlBody += `<div class=\"footer\"><p>นี่คืออีเมลแจ้งเตือนอัตโนมัติ | ไม่ต้องตอบกลับ</p></div>`;\nhtmlBody += `</div></body></html>`;\n\n// --- 6. Final Message Preparation ---\nmsg.to = toList.join(',');\nmsg.topic = subject;\nmsg.payload = htmlBody;\nmsg.nodemailer = { text: plainTextBody, html: htmlBody };\n\n// *** อย่าลบ msg.settings/msg.alert อีก ***\nnode.status({ fill: 'blue', shape: 'dot', text: `HTML Email to:${toList.length}` });\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 80,
        "wires": [
            [
                "77597513641dbe6d",
                "69a46c8b6e4a826c"
            ]
        ]
    },
    {
        "id": "ae08361dd8b635c3",
        "type": "telegram sender",
        "z": "c1a8b9f7.1d2e3f",
        "name": "",
        "bot": "75e336bd6ef62c4f",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1470,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "69a46c8b6e4a826c",
        "type": "function",
        "z": "c1a8b9f7.1d2e3f",
        "name": "Prepare Telegram Markdown",
        "func": "// === Prepare Telegram Markdown v3.0 (ALL content inside one <blockquote>) ===\n\nconst settings = msg.settings || {};\nconst alert = msg.alert || msg.payload || {};\n\n// 1) Recipients\nconst telegramRecipients = settings.recipients?.telegram;\nif (!telegramRecipients || telegramRecipients.length === 0) {\n    node.status({ fill: \"yellow\", shape: \"ring\", text: \"No Telegram recipients\" });\n    return null;\n}\nconst chatIds = Array.isArray(telegramRecipients) ? telegramRecipients : [telegramRecipients];\n\n// 2) Helpers\nconst pick = (o, ...k) => { for (const x of k) if (o && o[x] !== undefined && o[x] !== null && o[x] !== '') return o[x]; return null; };\nconst toNum = v => { if (v === null || v === undefined) return null; const m = String(v).match(/-?\\d+(\\.\\d+)?/); return m ? Number(m[0]) : null; };\nfunction metricInfo(metric) {\n    const k = String(metric || '').toLowerCase();\n    if (k.startsWith('temp')) return { th: 'อุณหภูมิ', unit: '°C', digits: 1 };\n    if (k.startsWith('hum')) return { th: 'ความชื้น', unit: '%', digits: 1 };\n    return { th: 'ค่า', unit: '', digits: 2 };\n}\nfunction esc(s) {\n    return String(s ?? '')\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n\n// 3) Extract fields\nconst room = pick(alert, 'room_name', 'room') || 'N/A';\nconst pos = pick(alert, 'sensor_name', 'sensor') || 'N/A';\nconst mac = String(pick(alert, 'mac', 'device_mac') || '').toUpperCase();\nconst metricKey = String(pick(alert, 'metric', 'type') || '').toLowerCase();\nconst mi = metricInfo(metricKey);\n\nconst typeOrState = String(pick(alert, 'event', 'type', 'state') || '').toLowerCase();\nconst isRecovery = ['recovery', 'normal', 'resolve', 'resolved', 'close', 'closed'].includes(typeOrState);\n\nlet valNum = isRecovery\n    ? toNum(pick(alert, 'value', 'recovery_value', 'current_value'))\n    : toNum(pick(alert, 'value', 'trigger_value', 'current_value'));\n\nlet warnMin = toNum(pick(alert, 'warn_min'));\nlet warnMax = toNum(pick(alert, 'warn_max'));\nlet critMin = toNum(pick(alert, 'crit_min'));\nlet critMax = toNum(pick(alert, 'crit_max'));\n\n// fallback rule map\nif ([warnMin, warnMax].some(v => v === null) && !metricKey.includes('connect')) {\n    const rules = global.get('effectiveRuleMap') || {};\n    const rule = rules[`${mac}|${pos}|${metricKey}`] || rules[`${mac}|overall|${metricKey}`];\n    if (rule) {\n        if (warnMin === null) warnMin = toNum(rule.warn_min);\n        if (warnMax === null) warnMax = toNum(rule.warn_max);\n        if (critMin === null) critMin = toNum(rule.crit_min);\n        if (critMax === null) critMax = toNum(rule.crit_max);\n    }\n}\n\nlet level = String(pick(alert, 'level', 'severity') || 'info').toLowerCase();\nif (isRecovery) level = 'recovery';\n\n// 4) Compose (everything wrapped)\nconst icons = { critical: '🔴', warning: '🟡', recovery: '🟢' };\nconst titles = {\n    critical: 'แจ้งเตือนสถานะวิกฤต',\n    warning: 'แจ้งเตือนสถานะเฝ้าระวัง',\n    recovery: 'แจ้งเตือนสถานะกลับมาเป็นปกติ'\n};\n\nconst body = [];\nbody.push(`<b>${icons[level] || '⚪️'} ${titles[level] || 'แจ้งเพื่อทราบ'}</b>`);\n\nconst locationIdentifier = `${esc(room)} - ${esc(pos)}`;\n\nif (metricKey.includes('connect')) {\n    const statusPhrase = (valNum === 0 || valNum === null) ? 'ออฟไลน์' : 'กลับมาออนไลน์';\n    body.push(`📍 สถานที่: ${locationIdentifier} ${esc(statusPhrase)}`);\n} else {\n    let statusWord = '';\n    if (isRecovery) {\n        statusWord = 'กลับมาเป็นปกติ';\n    } else {\n        if (critMax !== null && valNum > critMax) statusWord = 'สูงมาก';\n        else if (critMin !== null && valNum < critMin) statusWord = 'ต่ำมาก';\n        else if (warnMax !== null && valNum > warnMax) statusWord = 'สูงผิดปกติ';\n        else if (warnMin !== null && valNum < warnMin) statusWord = 'ต่ำผิดปกติ';\n    }\n    const valTxt = valNum !== null ? `(${valNum.toFixed(mi.digits)}${mi.unit})` : '';\n    body.push(`📍 สถานที่: ${locationIdentifier} ${esc(mi.th + statusWord + valTxt)}`);\n\n    if (warnMin !== null && warnMax !== null) {\n        const rangeTxt = `${warnMin.toFixed(mi.digits)}${mi.unit} - ${warnMax.toFixed(mi.digits)}${mi.unit}`;\n        body.push(`📊 ช่วงที่เหมาะสม : ${esc(rangeTxt)}`);\n    }\n}\n\n// wrap ALL lines in one blockquote\nconst content = `<blockquote>\\n${body.join('\\n')}\\n</blockquote>`;\n\n// 5) Output\nconst messages = chatIds.map(chId => ({\n    payload: {\n        chatId: chId,\n        type: 'message',\n        content,\n        options: { parse_mode: 'HTML', disable_web_page_preview: true }\n    }\n}));\n\nnode.status({ fill: \"blue\", shape: \"dot\", text: `HTML <blockquote> (ALL) to ${chatIds.length} users` });\nreturn [messages];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 120,
        "wires": [
            [
                "ae08361dd8b635c3"
            ]
        ]
    },
    {
        "id": "75e336bd6ef62c4f",
        "type": "telegram bot",
        "z": "c1a8b9f7.1d2e3f",
        "botname": "PCSGH_Server_Monitoring",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "pollinterval": 300,
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": 6667,
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbothost": "0.0.0.0",
        "localbotport": 8443,
        "publicbotport": 8443,
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "640c6734fdac3595",
        "type": "tab",
        "label": "Server Monitoring",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b43a3178c92d9fc0",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "fill": "#ffbfbf",
            "label": true,
            "color": "#ffffff",
            "stroke": "#ff0000"
        },
        "nodes": [
            "e06d098d363668d7",
            "bd8648c95c201831",
            "8ff2cf1555f60ca7",
            "d24eecc773475a0d",
            "818d1ba0600fd4e4",
            "3f977e562c7cfa30"
        ],
        "x": 1914,
        "y": 239,
        "w": 792,
        "h": 122
    },
    {
        "id": "ba826875d50440fd",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#000000",
            "fill": "#7fb7df",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "35aacf4f49fc2fe5",
            "a2f165344059f626",
            "9cd0de312f0aaebf",
            "d266684b84baf6ee",
            "128af736ebd4f5cb",
            "8a4df22f9b7c306e",
            "149454b95ccb8189",
            "099150f81e18ae84",
            "54ea2bf1620764ea",
            "7d3c211e7f5ac418",
            "b715c447fd1d3326",
            "c8535339264f094e",
            "9dd3a95f243b48ea",
            "b6e1d5d135cbbd65"
        ],
        "x": 94,
        "y": 39,
        "w": 812,
        "h": 262
    },
    {
        "id": "bf24f1109e557024",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "8527f967384360ec",
            "59e009aee079776e",
            "62788c726b663f0d",
            "2d7312052d110181",
            "4de2c1d8785509fe",
            "2bd4a9b70bf84131",
            "9dbbf45c90e6073e",
            "b783d99212b2714a"
        ],
        "x": 924,
        "y": 39,
        "w": 462,
        "h": 262
    },
    {
        "id": "04363f3d44ea50b0",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "c46318095bd096a9",
            "874c0c450dd51575",
            "6636d93cad979dc5",
            "3ccca56ce30903d7",
            "a5c1e87646cfa1b3",
            "5848de06518173ba",
            "18b28f96f1b41483",
            "dfa92c6ca3e394f6"
        ],
        "x": 1454,
        "y": 39,
        "w": 412,
        "h": 182
    },
    {
        "id": "d314b1ded220aada",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "61401c21d911973d",
            "2467960b4d1de17c",
            "f0c3bb733466c3cc",
            "84de7bd1374c55ed",
            "ec4ba7c4df1cd904",
            "faef73a25c6f6561",
            "6e9fe1efdf55fb5c"
        ],
        "x": 1904,
        "y": 39,
        "w": 622,
        "h": 182
    },
    {
        "id": "05736f525f0739c2",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "59b511670d45ce09",
            "945c7a052f56ca79",
            "4efc7f7d6266942a",
            "a1a2222d90a0dc17",
            "d487db29e6d6f598",
            "7b38579d583a6efe",
            "1ddb9f9c6361ecbd",
            "d736f2dfb44cb98c"
        ],
        "x": 1914,
        "y": 379,
        "w": 742,
        "h": 162
    },
    {
        "id": "63f59a4d8f7d47e7",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "e7b602f8cdebf2d0",
            "9353c7268406244b",
            "6d0dbf7cb49c607c",
            "4a3a5a1e6c60f650",
            "18017e07326c690f",
            "2fd31bb845f90d86",
            "ed784a8e66a138cd",
            "f67d6f62f7b2e4e0"
        ],
        "x": 1914,
        "y": 559,
        "w": 612,
        "h": 202
    },
    {
        "id": "0e0a16b3eb3063ee",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "cef603b7eddadbd1",
            "f365bff0639c4d0f",
            "882559e213bde260",
            "04e1039fc59320a4",
            "200d49b6f215cbff"
        ],
        "x": 1914,
        "y": 1399,
        "w": 612,
        "h": 122
    },
    {
        "id": "b4a00978e789863d",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "0482f31f984f74b9",
            "58589672a110f473",
            "eccd6e3261b7615b",
            "6022786dd2200fa7",
            "b28ee7c1ebe01f7f",
            "91754b0ad2692269"
        ],
        "x": 2554,
        "y": 1399,
        "w": 952,
        "h": 122
    },
    {
        "id": "3405bc2648d0e0c4",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "Sync Alerts from Device to DB",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": false
        },
        "nodes": [
            "d83d445d62969ded",
            "4ecc2247b3a33d89",
            "53bee7f5fd9eed25",
            "9f003438c0f5cb62",
            "57b8ad027dff3e5a",
            "8175b4f18a6f99c6",
            "898e844961b8cd39",
            "815b587ab45df4c7",
            "cfbe7be2bb75dc23",
            "c864607514d350c4",
            "bdb285d12433aad8",
            "d54032355d69570c",
            "472eab2a072d1c93",
            "c96aa8cdedc6c4b8",
            "7c18457b582e4c85",
            "a7e285e70ff817c1",
            "271033183b121bd0",
            "ae3aa6d1a10c043e",
            "636d2940b0ca4e78",
            "cacb1e585749c38b",
            "6c05f5d1fd3fc7c0"
        ],
        "x": 1914,
        "y": 999,
        "w": 872,
        "h": 382
    },
    {
        "id": "c7e3510948f6624e",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "8ad81ad080bd81df",
            "bab874a3ec5e3d7f",
            "40dc39f6a661c710",
            "f8fa173138913533",
            "5d76859d4b52e850",
            "edb9aefa4d5efde1",
            "6889d15e433846c7",
            "e83de35d3a2f5a12",
            "4557dd1bb41b4158",
            "2a78b5cd6ba1b8d3",
            "62335ac41ba6e50a",
            "64cd48591caf09c0",
            "c829bb366e68e647",
            "e634590e551137c4"
        ],
        "x": 94,
        "y": 579,
        "w": 912,
        "h": 262
    },
    {
        "id": "be536ff9b21472e1",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "785762e88fcf5492",
            "c4ec9302faebc92a",
            "72c7559d7d6aba22",
            "289352e7c0c2f154",
            "b47e7018602a98b6",
            "2c5e9398eb0b6e17",
            "5ca3f959e50a896b",
            "0de9e2b71b06a40a",
            "a3fd0dbfc2793eb9",
            "95fa60aa68b20120"
        ],
        "x": 94,
        "y": 1059,
        "w": 792,
        "h": 242
    },
    {
        "id": "bc3f5b7e2b5083ca",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": false
        },
        "nodes": [
            "002f7097bc63220c",
            "229b4521996cbe60",
            "526a0f4d7c13dbfa",
            "c9fa0b4b9bb161cd",
            "882fad44105f6afc",
            "0ca34c7a39856c53"
        ],
        "x": 94,
        "y": 859,
        "w": 892,
        "h": 122
    },
    {
        "id": "c7e46bccde3fcec3",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "b699f43fb31872ac",
            "d70cf71d9d4a7b90",
            "536682416efd33c1",
            "d160a84f3489e2ec"
        ],
        "x": 94,
        "y": 1319,
        "w": 632,
        "h": 122
    },
    {
        "id": "902e9a6537069b8d",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "02d0431db93e1519",
            "ec7212763482d9e7",
            "d0bf4edd88a42aed",
            "154ee51f956aec0e",
            "6f0a780603bc593e",
            "0bdff17fceb940bf"
        ],
        "x": 94,
        "y": 1459,
        "w": 912,
        "h": 122
    },
    {
        "id": "37e675817144b486",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "Export Report API (/api/export) v13 - Final Fix",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": false,
            "border": true
        },
        "nodes": [
            "de5e6ed809646311",
            "82779c738ad44c4b",
            "258f6bf27fc6e1cf",
            "417fa61902dccc67",
            "dc55c89f0ab0fef9",
            "f3110649b75fa1f6",
            "3e79a8b6fddc2caf",
            "a7081151ab3a2ad4",
            "7f021b2b6bf737d9",
            "6e94b291e5b12d2d",
            "57fe4cea096dc9a9"
        ],
        "x": 2874,
        "y": 1539,
        "w": 1192,
        "h": 182
    },
    {
        "id": "48904a14f4cbefb3",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": false
        },
        "nodes": [
            "31093562cb7659a0",
            "f253a7b1c4d4eb47",
            "297a1b865a994b0b",
            "3981f0f3d29a470c",
            "ee048f67cf4fa1d6",
            "b8274aa11208401e",
            "5d0f5e25fa5197c3",
            "6373aa23303841cf",
            "15d9dbfd0c8ce0cb",
            "2a5b63a94c933684",
            "734ded21c1daba8b",
            "33ca16f0ac839ca5",
            "2d29e4bdbb212815"
        ],
        "x": 1914,
        "y": 779,
        "w": 872,
        "h": 202
    },
    {
        "id": "98e9e0e68d946c03",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "สำหรับ Daily Report",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": false
        },
        "nodes": [
            "5a161bab6ea417fe",
            "cd2adcf7949bf9e1",
            "7486317ab6c9b407",
            "0d6a099dec5a745d",
            "835b9d24889b4401",
            "037b2b044352cb94",
            "70048c0d3169c8aa",
            "7b56862680ba6de6",
            "55426d0f63020db5",
            "6506649cc536d2f8",
            "b06ddb5d8bc71c19",
            "6b0b0398d197ace6"
        ],
        "x": 1914,
        "y": 1539,
        "w": 942,
        "h": 222
    },
    {
        "id": "group-auto-ping",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "Auto Ping from MQTT",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "mqtt-in-status",
            "fn-prepare-ping",
            "node-ping-dyn",
            "fn-check-status",
            "switch-status",
            "fn-insert-db",
            "mysql-log",
            "2c342f3ce76b6402",
            "e341b45e963b3ef5",
            "ac695710a3a0f1e3",
            "inject-ping-scheduler",
            "fn-ping-scheduler",
            "b248acd368a047f0",
            "af8f7ad43f68ed23",
            "2305c4099135cc94"
        ],
        "x": 94,
        "y": 319,
        "w": 1132,
        "h": 242
    },
    {
        "id": "3dd353a896e35cd3",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "e5287d092bd432ea",
            "d21531b83e0203e0",
            "66a23818b29b5dbc",
            "d2db7bec5131a6cf",
            "15d1d79aeec5b369",
            "41ae12f967d3101e"
        ],
        "x": 2554,
        "y": 559,
        "w": 492,
        "h": 182
    },
    {
        "id": "e06d098d363668d7",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "b43a3178c92d9fc0",
        "name": "GET /api/time",
        "url": "/api/time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2010,
        "y": 320,
        "wires": [
            [
                "bd8648c95c201831"
            ]
        ]
    },
    {
        "id": "bd8648c95c201831",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "b43a3178c92d9fc0",
        "name": "Sync Time",
        "func": "msg.payload = { iso: new Date().toISOString() };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 320,
        "wires": [
            [
                "8ff2cf1555f60ca7",
                "818d1ba0600fd4e4"
            ]
        ]
    },
    {
        "id": "8ff2cf1555f60ca7",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "b43a3178c92d9fc0",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 2360,
        "y": 320,
        "wires": []
    },
    {
        "id": "35aacf4f49fc2fe5",
        "type": "mqtt in",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "DHT22",
        "topic": "esp32/+/dht",
        "qos": "2",
        "datatype": "json",
        "broker": "8301192ec347dbc9",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 170,
        "y": 140,
        "wires": [
            [
                "a2f165344059f626",
                "128af736ebd4f5cb"
            ]
        ]
    },
    {
        "id": "a2f165344059f626",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "Parse DHT22",
        "func": "if (!msg || typeof msg !== 'object') {\n    return null;\n}\nconst p = msg.payload || {};\nfunction toNum(v) {\n    if (v === null || v === undefined) return null;\n    const n = Number(v);\n    return Number.isFinite(n) ? n : null;\n}\nfunction pick(obj, keys) {\n    for (const k of keys) {\n        if (obj?.[k] !== undefined && obj[k] !== null) {\n            return obj[k];\n        }\n    }\n    return undefined;\n}\nfunction normMAC(s) {\n    const hex = String(s || '').toUpperCase().replace(/[^0-9A-F]/g, '');\n    return hex.length === 12 ? hex.match(/.{2}/g).join(':') : undefined;\n}\nfunction toISO(ts) {\n    if (!ts) return new Date().toISOString();\n    if (typeof ts === 'number') {\n        const ms = ts < 1e11 ? ts * 1000 : ts;\n        return new Date(ms).toISOString();\n    }\n    const d = new Date(ts);\n    return isNaN(d) ? new Date().toISOString() : d.toISOString();\n}\nconst avgTemp = toNum(pick(p, ['avg_temp', 'temp', 'temperature', 't']));\nconst avgHum = toNum(pick(p, ['avg_hum', 'humidity', 'hum', 'rh']));\nconst minTemp = toNum(pick(p, ['min_temp', 'min_temperature']));\nconst maxTemp = toNum(pick(p, ['max_temp', 'max_temperature']));\nconst minHum = toNum(pick(p, ['min_hum', 'min_humidity']));\nconst maxHum = toNum(pick(p, ['max_hum', 'max_humidity']));\nconst tempStatus = pick(p, ['temp_status']);\nconst humStatus = pick(p, ['hum_status']);\n\nlet uptime = toNum(pick(p, ['uptime_pct', 'uptime_percent', 'uptime', 'up']));\nif (uptime != null && uptime > 0 && uptime <= 1) {\n    uptime = uptime * 100;\n}\nconst ts = pick(p, ['timestamp', 'time', 'ts', 'iso']);\n\nconst pin = pick(p, ['pin']);\nconst out = {};\nif (avgTemp !== null) out.avg_temp = avgTemp;\nif (avgHum !== null) out.avg_hum = avgHum;\nif (minTemp !== null) out.min_temp = minTemp;\nif (maxTemp !== null) out.max_temp = maxTemp;\nif (minHum !== null) out.min_hum = minHum;\nif (maxHum !== null) out.max_hum = maxHum;\nif (tempStatus !== undefined) out.temp_status = tempStatus;\nif (humStatus !== undefined) out.hum_status = humStatus;\nif (uptime !== null) out.uptime_pct = Math.max(0, Math.min(100, uptime));\nout.timestamp = toISO(ts);\nif (pin !== undefined) out.pin = pin;\nconst mac = normMAC(pick(p, ['mac', 'device_mac', 'eth_mac', 'wifi_mac']));\nif (mac) out.mac = mac;\nif (typeof p.room_id === 'string') out.room_id = p.room_id.toLowerCase();\nmsg.payload = out;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            [
                "b715c447fd1d3326",
                "8a4df22f9b7c306e",
                "c8535339264f094e"
            ]
        ]
    },
    {
        "id": "9cd0de312f0aaebf",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "Update MAC Map",
        "func": "let p = msg.payload || {};\nlet room = String(p.room_id || '').toLowerCase();\nfunction normMAC(s) {\n    if (!s) return null;\n    s = String(s).toUpperCase().replace(/[^0-9A-F]/g, '');\n    if (s.length !== 12) return null;\n    return s.match(/.{2}/g).join(':');\n}\nlet mac = normMAC(p.mac);\nif (!room || !mac) return null;\nlet room2mac = flow.get('room2mac') || {};\nlet mac2room = flow.get('mac2room') || {};\nlet room_seen = flow.get('room_seen') || {};\nconst prevRoom = mac2room[mac];\nif (prevRoom && prevRoom !== room) {\n    delete room2mac[prevRoom];\n}\nconst prevMac = room2mac[room];\nif (prevMac && prevMac !== mac) {\n    delete mac2room[prevMac];\n}\nroom2mac[room] = mac;\nmac2room[mac] = room;\nroom_seen[room] = Date.now();\nflow.set('room2mac', room2mac);\nflow.set('mac2room', mac2room);\nflow.set('room_seen', room_seen);\nnode.status({ fill: 'green', shape: 'dot', text: `${room} ↔ ${mac}` });\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d266684b84baf6ee",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "mydb": "5e560f07cfec117a",
        "name": "dht_22",
        "x": 530,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "128af736ebd4f5cb",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "SQL Insert dht_22",
        "func": "let d = msg.payload;\nif (!d.mac || !d.timestamp) {\n    node.error(\"❌ Missing mac or timestamp\", d);\n    return null;\n}\nmsg.topic = \"INSERT INTO `dht_22` (mac, pin, timestamp, min_temp, max_temp, avg_temp, min_hum, max_hum, avg_hum) VALUES (?,?,?,?,?,?,?,?,?);\";\nmsg.payload = [\n    d.mac,\n    d.pin,\n    d.timestamp,\n    d.min_temp,\n    d.max_temp,\n    d.avg_temp,\n    d.min_hum,\n    d.max_hum,\n    d.avg_hum\n];\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "d266684b84baf6ee"
            ]
        ]
    },
    {
        "id": "5848de06518173ba",
        "type": "mqtt in",
        "z": "640c6734fdac3595",
        "g": "04363f3d44ea50b0",
        "name": "GET Config",
        "topic": "esp32/response/+/config",
        "qos": "1",
        "datatype": "json",
        "broker": "8301192ec347dbc9",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1550,
        "y": 180,
        "wires": [
            [
                "874c0c450dd51575"
            ]
        ]
    },
    {
        "id": "8a4df22f9b7c306e",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "Check sensor status",
        "func": "// ✨ FIX: รับค่า MAC จาก DB และส่งต่อไปใน payload\nlet seen = Array.isArray(msg.payload) ? msg.payload : [];\nlet now = new Date();\n\n// จัดกลุ่มข้อมูลตาม MAC Address\nconst seenByMac = seen.reduce((acc, curr) => {\n    const mac = curr.mac;\n    if (!acc[mac]) {\n        acc[mac] = [];\n    }\n    acc[mac].push(curr);\n    return acc;\n}, {});\n\n\nlet allResults = [];\n\n// วนลูปตามแต่ละ MAC ที่เจอ\nfor (const mac in seenByMac) {\n    const pinsForMac = seenByMac[mac];\n    let expected = [\"25\", \"26\", \"32\", \"33\"];\n\n    let result = expected.map(pin => {\n        let found = pinsForMac.find(r => r.pin == pin);\n\n        if (!found || !found.last_seen) {\n            return { mac: mac, pin: pin, status: \"OFFLINE\", last_seen: null };\n        }\n\n        let last = new Date(found.last_seen);\n        if (isNaN(last)) {\n            return { mac: mac, pin: pin, status: \"OFFLINE\", last_seen: found.last_seen };\n        }\n\n        // เช็คว่าข้อมูลล่าสุดขาดหายไปเกิน 20 วินาทีหรือไม่\n        let diffSeconds = (now.getTime() - last.getTime()) / 1000;\n        return {\n            mac: mac,\n            pin: pin,\n            last_seen: found.last_seen,\n            status: diffSeconds > 120 ? \"OFFLINE\" : \"ONLINE\"\n        };\n    });\n    allResults = allResults.concat(result);\n}\n\n\nmsg.payload = allResults;\nmsg.topic = 'pin_status_update';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 240,
        "wires": [
            [
                "9dd3a95f243b48ea",
                "b6e1d5d135cbbd65"
            ]
        ]
    },
    {
        "id": "149454b95ccb8189",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "mydb": "5e560f07cfec117a",
        "name": "dht_22",
        "x": 510,
        "y": 240,
        "wires": [
            [
                "8a4df22f9b7c306e"
            ]
        ]
    },
    {
        "id": "099150f81e18ae84",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "Sensor Last Seen",
        "func": "msg.topic = `\nSELECT mac, pin, MAX(timestamp) AS last_seen\nFROM dht_22\nWHERE pin != 'OVERALL'\nGROUP BY mac, pin;\n`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 240,
        "wires": [
            [
                "149454b95ccb8189"
            ]
        ]
    },
    {
        "id": "54ea2bf1620764ea",
        "type": "inject",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "1s",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 190,
        "y": 240,
        "wires": [
            [
                "099150f81e18ae84"
            ]
        ]
    },
    {
        "id": "8527f967384360ec",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "bf24f1109e557024",
        "name": "Command reboot",
        "func": "// Check reboot (single + all) — robust pending (by actionId & by mac)\nconst p = msg.payload || {};\nconst cmd = String(p.cmd || p.command || '').toLowerCase();\nconst actionId = String(p.actionId || '').trim();\nconst room = String(p.room_id || '').toLowerCase();\n\nif (!actionId) {\n  return [null, { payload: { actionId: null, status: 'error', message: 'missing actionId' } }];\n}\n\n// helpers\nfunction normMAC(s){\n  if(!s) return null;\n  s = String(s).toUpperCase().replace(/[^0-9A-F]/g,'');\n  if (s.length !== 12) return null;\n  return s.match(/.{2}/g).join(':');\n}\n\nconst now = Date.now();\nconst TTL_MS = 120000;      // mapping room↔mac สดภายใน 2 นาที\nconst ACK_TIMEOUT_MS = 60000;\n\n// contexts\nconst pendingByAction = flow.get('reboot_pending_by_action') || {}; // actionId -> { targets:Set, seen:Set }\nconst pendingByMac    = flow.get('reboot_pending_by_mac')    || {}; // mac -> actionId\nconst timers          = flow.get('reboot_timers')             || {}; // actionId -> timer\n\n// ========= Reboot All =========\nif (cmd === 'reboot_all' || room === 'all' || Array.isArray(p.mac_list)) {\n  let macs = Array.isArray(p.mac_list) ? p.mac_list.map(normMAC).filter(Boolean) : null;\n  if (!macs || macs.length === 0) {\n    const room2mac = flow.get('room2mac') || {};\n    macs = Object.values(room2mac).map(normMAC).filter(Boolean);\n  }\n  if (!macs.length) {\n    return [null, { payload: { actionId, status: 'error', message: 'no target MACs' } }];\n  }\n\n  // register pending (by actionId + by mac)\n  pendingByAction[actionId] = { targets: new Set(macs), seen: new Set() };\n  macs.forEach(m => { pendingByMac[m] = actionId; });\n\n  // timeout per actionId\n  if (timers[actionId]) clearTimeout(timers[actionId]);\n  timers[actionId] = setTimeout(() => {\n    const _pAct = flow.get('reboot_pending_by_action') || {};\n    const _tim  = flow.get('reboot_timers') || {};\n    const st = _pAct[actionId];\n    if (st) {\n      // cleanup mac->action\n      st.targets.forEach(m => { \n        let map = flow.get('reboot_pending_by_mac') || {};\n        if (map[m] === actionId) { delete map[m]; flow.set('reboot_pending_by_mac', map); }\n      });\n      delete _pAct[actionId];\n      delete _tim[actionId];\n      flow.set('reboot_pending_by_action', _pAct);\n      flow.set('reboot_timers', _tim);\n      node.send([null, { topic:'actions/ack', payload: { actionId, status:'timeout', message:'reboot_all partial/timeout' } }]);\n    }\n  }, ACK_TIMEOUT_MS);\n\n  flow.set('reboot_pending_by_action', pendingByAction);\n  flow.set('reboot_pending_by_mac', pendingByMac);\n  flow.set('reboot_timers', timers);\n\n  const outMsgs = macs.map(m => ({\n    topic: `esp32/control/${m}/reboot`,\n    payload: { cmd:'Reboot', room_id:null, mac:m, actionId, ts:now }\n  }));\n  const ack = { payload:{ actionId, status:'accepted', message:`broadcast to ${macs.length} devices`} };\n  return [outMsgs, ack];\n}\n\n// ========= Reboot Single =========\nlet mac = normMAC(p.mac);\nif (!mac && room) {\n  const room2mac = flow.get('room2mac') || {};\n  const room_seen = flow.get('room_seen') || {};\n  const m = normMAC(room2mac[room]);\n  const ts = room_seen[room] || 0;\n  if (m && (Date.now()-ts) <= TTL_MS) mac = m;\n}\nif (!mac) {\n  return [null, { payload: { actionId, status:'error', message:`no fresh mapping for ${room}` } }];\n}\n\npendingByAction[actionId] = { targets: new Set([mac]), seen: new Set() };\npendingByMac[mac] = actionId;\n\n// timeout per actionId\nif (timers[actionId]) clearTimeout(timers[actionId]);\ntimers[actionId] = setTimeout(() => {\n  const _pAct = flow.get('reboot_pending_by_action') || {};\n  const _pMac = flow.get('reboot_pending_by_mac') || {};\n  const _tim  = flow.get('reboot_timers') || {};\n  const st = _pAct[actionId];\n  if (st) {\n    st.targets.forEach(m => { if (_pMac[m] === actionId) delete _pMac[m]; });\n    delete _pAct[actionId];\n    delete _tim[actionId];\n    flow.set('reboot_pending_by_mac', _pMac);\n    flow.set('reboot_pending_by_action', _pAct);\n    flow.set('reboot_timers', _tim);\n    node.send([null, { topic:'actions/ack', payload:{ actionId, status:'timeout', message:`no response from ${mac}` } }]);\n  }\n}, ACK_TIMEOUT_MS);\n\nflow.set('reboot_pending_by_action', pendingByAction);\nflow.set('reboot_pending_by_mac', pendingByMac);\nflow.set('reboot_timers', timers);\n\nconst mqttMsg = {\n  topic: `esp32/control/${mac}/reboot`,\n  payload: { cmd:'Reboot', room_id:room||null, mac, actionId, ts:now }\n};\nconst ack = { payload:{ actionId, status:'accepted', message:`reboot sent to ${mac}` } };\nreturn [[mqttMsg], ack];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 160,
        "wires": [
            [
                "59e009aee079776e"
            ],
            [
                "9dbbf45c90e6073e"
            ]
        ]
    },
    {
        "id": "59e009aee079776e",
        "type": "mqtt out",
        "z": "640c6734fdac3595",
        "g": "bf24f1109e557024",
        "name": "Send Reboot",
        "topic": "",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8301192ec347dbc9",
        "x": 1290,
        "y": 140,
        "wires": []
    },
    {
        "id": "62788c726b663f0d",
        "type": "mqtt in",
        "z": "640c6734fdac3595",
        "g": "bf24f1109e557024",
        "name": "Reply reboot",
        "topic": "esp32/ack/+/reboot",
        "qos": "0",
        "datatype": "json",
        "broker": "8301192ec347dbc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 1030,
        "y": 260,
        "wires": [
            [
                "2d7312052d110181"
            ]
        ]
    },
    {
        "id": "2d7312052d110181",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "bf24f1109e557024",
        "name": "Reply action",
        "func": "function normMAC(s) {\n  if (!s) return null;\n  s = String(s).toUpperCase().replace(/[^0-9A-F]/g, '');\n  if (s.length !== 12) return null;\n  return s.match(/.{2}/g).join(':');\n}\n\nconst topic = String(msg.topic || '');\n\n// ---------- parse payload ----------\nlet data = msg.payload;\nif (typeof data === 'string') { try { data = JSON.parse(data); } catch { return null; } }\nif (!data || typeof data !== 'object') return null;\n\nconst actionId = String(data.actionId || '').trim();\nconst status = String(data.status || (data.ok === true ? 'ok' : '')).toLowerCase() || 'ok';\nconst macPL = normMAC(data.mac);\n\nlet macTP = null, roomTP = null;\nlet m = topic.match(/^esp32\\/ack\\/([0-9A-F:]{17})\\/[^/]+$/i);\nif (m) macTP = normMAC(m[1]);\nm = topic.match(/^esp32\\/ack\\/(room-[abcd])\\/[^/]+$/i);\nif (m) roomTP = m[1].toLowerCase();\n\nlet mac = macPL || macTP || null;\nif (!mac && roomTP) {\n  const room2mac = flow.get('room2mac') || {};\n  mac = normMAC(room2mac[roomTP]);\n}\n\n// ---------- contexts ----------\nlet pByAct = flow.get('reboot_pending_by_action') || {}; // actionId -> {targets:Set, seen:Set}\nlet pByMac = flow.get('reboot_pending_by_mac') || {}; // mac -> actionId\nlet timers = flow.get('reboot_timers') || {};\n\nconst RECENT_TTL_MS = 30000; // กันซ้ำภายใน 30s หลังปิดงาน\nlet recent = flow.get('ack_recent') || {};        // actionId -> { ts:number, seen:Set }\n\n// ---------- DE-DUP GUARD ----------\n// ถ้า actionId นี้ถูกปิดไปแล้วเมื่อไม่นานนี้ ให้ drop เงียบๆ (ห้ามขึ้น unmatched)\nif (actionId && !pByAct[actionId]) {\n  const r = recent[actionId];\n  if (r && (Date.now() - r.ts) <= RECENT_TTL_MS) {\n    // ถ้าอยาก log เงียบๆ ให้ใช้ node.status สีเทา\n    node.status({ fill: 'grey', shape: 'ring', text: `late/dup ACK: ${actionId}` });\n    // บันทึก mac ที่เห็นไว้ (กันลูป)\n    if (mac) { r.seen = r.seen || new Set(); r.seen.add(mac); recent[actionId] = r; flow.set('ack_recent', recent); }\n    return null;\n  }\n}\n\n// ---------- PRIORITY 1: match by actionId ----------\nif (actionId && pByAct[actionId]) {\n  const st = pByAct[actionId]; // {targets:Set, seen:Set}\n  if (!st.seen) st.seen = new Set();\n  if (mac) st.seen.add(mac);\n\n  if (mac && pByMac[mac] === actionId) delete pByMac[mac];\n\n  const done = st.seen.size;\n  const total = st.targets.size;\n\n  // ครบ → cleanup + บันทึก recent เพื่อกันซ้ำ\n  if (done >= total) {\n    if (timers[actionId]) { clearTimeout(timers[actionId]); delete timers[actionId]; }\n    delete pByAct[actionId];\n    recent[actionId] = { ts: Date.now(), seen: st.seen };\n  }\n\n  flow.set('reboot_pending_by_action', pByAct);\n  flow.set('reboot_pending_by_mac', pByMac);\n  flow.set('reboot_timers', timers);\n  flow.set('ack_recent', recent);\n\n  node.status({ fill: 'green', shape: 'dot', text: `ACK ${done}/${total}${mac ? ` from ${mac}` : ''}` });\n  return {\n    topic: 'actions/ack',\n    payload: {\n      actionId, status,\n      message: data.message || (done >= total ? 'ok' : `ACK ${done}/${total}`),\n      mac, done, total\n    }\n  };\n}\n\n// ---------- PRIORITY 2: match by mac ----------\nif (mac && pByMac[mac]) {\n  const aid = pByMac[mac];\n\n  if (pByAct[aid]) {\n    const st = pByAct[aid];\n    if (!st.seen) st.seen = new Set();\n    st.seen.add(mac);\n    if (st.seen.size >= st.targets.size) {\n      if (timers[aid]) { clearTimeout(timers[aid]); delete timers[aid]; }\n      delete pByAct[aid];\n      recent[aid] = { ts: Date.now(), seen: st.seen };\n    } else {\n      pByAct[aid] = st;\n    }\n  }\n  delete pByMac[mac];\n\n  flow.set('reboot_pending_by_action', pByAct);\n  flow.set('reboot_pending_by_mac', pByMac);\n  flow.set('reboot_timers', timers);\n  flow.set('ack_recent', recent);\n\n  node.status({ fill: 'green', shape: 'dot', text: `ACK by mac ${mac}` });\n  return {\n    topic: 'actions/ack',\n    payload: { actionId: aid, status, message: data.message || 'rebooting', mac }\n  };\n}\n\n// ---------- unmatched (เช็คอีกชั้น: late/dup หลังไม่มี pending) ----------\nif (actionId) {\n  // บันทึกไว้เป็น late เพื่อกันขึ้น unmatched รอบต่อไป\n  recent[actionId] = { ts: Date.now(), seen: mac ? new Set([mac]) : new Set() };\n  flow.set('ack_recent', recent);\n  node.status({ fill: 'grey', shape: 'ring', text: `late ACK: ${actionId}` });\n  return null; // ✨ ไม่ปล่อย unmatched ออกไปอีก\n}\n\n// ถ้าไม่มี actionId จริง ๆ ค่อยถือว่า unmatched เบา ๆ\nnode.status({ fill: 'yellow', shape: 'ring', text: `ACK unmatched: ${mac || 'n/a'}` });\nreturn { topic: 'actions/ack', payload: { actionId: null, status, message: data.message || 'ACK unmatched', mac } };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 260,
        "wires": [
            [
                "2bd4a9b70bf84131"
            ]
        ]
    },
    {
        "id": "61401c21d911973d",
        "type": "switch",
        "z": "640c6734fdac3595",
        "g": "d314b1ded220aada",
        "name": "Check Command",
        "property": "payload.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get_config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set_config",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2070,
        "y": 160,
        "wires": [
            [
                "84de7bd1374c55ed"
            ],
            [
                "2467960b4d1de17c"
            ]
        ]
    },
    {
        "id": "2467960b4d1de17c",
        "type": "mqtt out",
        "z": "640c6734fdac3595",
        "g": "d314b1ded220aada",
        "name": "SET Config",
        "topic": "esp32/set_config",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8301192ec347dbc9",
        "x": 2250,
        "y": 180,
        "wires": []
    },
    {
        "id": "f0c3bb733466c3cc",
        "type": "mqtt out",
        "z": "640c6734fdac3595",
        "g": "d314b1ded220aada",
        "name": "Config Request",
        "topic": "esp32/commands",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8301192ec347dbc9",
        "x": 2420,
        "y": 160,
        "wires": []
    },
    {
        "id": "cef603b7eddadbd1",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "0e0a16b3eb3063ee",
        "name": "GET /api/data",
        "url": "/api/data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2010,
        "y": 1480,
        "wires": [
            [
                "f365bff0639c4d0f"
            ]
        ]
    },
    {
        "id": "f365bff0639c4d0f",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "0e0a16b3eb3063ee",
        "name": "Query for chart",
        "func": "// อ่าน query params\nconst q = msg.req && msg.req.query ? msg.req.query : {};\nlet { start, end, mac, room, pins } = q;\n\n// helper: แปลงเวลา ISO → MySQL DATETIME (local)\nfunction toSqlLocal(iso) {\n    if (!iso) return null;\n    const d = new Date(iso);\n    if (isNaN(d)) return null;\n    const tzFix = new Date(d.getTime() - d.getTimezoneOffset()*60000);\n    return tzFix.toISOString().slice(0,19).replace('T',' ');\n}\n\n// default ช่วงเวลา: 24 ชั่วโมงล่าสุด\nconst now = new Date();\nconst defEnd = now.toISOString();\nconst defStart = new Date(now.getTime() - 24*60*60*1000).toISOString();\n\n// ถ้าไม่กรอก ให้ใช้ดีฟอลต์ 24 ชม.\nstart = toSqlLocal(start || defStart);\nend   = toSqlLocal(end   || defEnd);\n\n// รองรับกรณีส่ง room มา → map เป็น mac จาก context เดิม (ถ้ามี)\nif (!mac && room) {\n    try {\n        const r2m = flow.get('room2mac') || {};\n        const key = String(room).toLowerCase();\n        mac = r2m[key];\n    } catch(e) {}\n}\n\n// ตรวจความถูกต้องขั้นต่ำ\nif (!mac || !start || !end) {\n    // ส่ง error กลับทันที (จะให้ MySQL ข้ามไป)\n    msg.statusCode = 400;\n    msg.payload = { error: \"missing mac/start/end\", hint: \"GET /api/data?mac=AA:BB:CC:DD:EE:FF&start=ISO&end=ISO\" };\n    // ติดธงให้ http response โหนดปลายทางรู้ว่าไม่ต้องคิวรี\n    msg._skipQuery = true;\n    return msg;\n}\n\n// เตรียม pins ถ้าส่งมา เช่น pins=OVERALL,25,26\nlet pinsArr = [];\nif (typeof pins === 'string' && pins.trim() !== '') {\n    pinsArr = pins.split(',').map(s => s.trim())\n        .filter(s => s.length)\n        .map(s => (/^\\d+$/.test(s) ? s : s.toUpperCase()));\n}\n\n// สร้าง SQL (คิวรีคอลัมน์ avg/min/max + dewpoint คำนวณใน SQL)\n// Magnus formula: dp = (b*gamma)/(a-gamma)\n// gamma = ln(RH/100) + (a*T)/(b+T), a=17.62, b=243.12\nlet sql = `\nSELECT \n  mac,\n  pin,\n  timestamp,\n  min_temp,\n  max_temp,\n  avg_temp,\n  min_hum,\n  max_hum,\n  avg_hum,\n  (243.12 * (\n      LN(GREATEST(1e-6, avg_hum/100)) + (17.62*avg_temp)/(243.12+avg_temp)\n   ) ) / (\n      17.62 - (\n        LN(GREATEST(1e-6, avg_hum/100)) + (17.62*avg_temp)/(243.12+avg_temp)\n      )\n   ) AS dewpoint\nFROM dht_22\nWHERE mac = ?\n  AND timestamp BETWEEN ? AND ?\n`;\n\nconst params = [mac, start, end];\n\nif (pinsArr.length > 0) {\n    const qs = pinsArr.map(_ => '?').join(',');\n    sql += ` AND pin IN (${qs})`;\n    params.push(...pinsArr);\n}\n\nsql += ` ORDER BY timestamp ASC, pin ASC`;\n\nmsg.topic = sql;\nmsg.payload = params; // parameterized\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 1480,
        "wires": [
            [
                "882559e213bde260"
            ]
        ]
    },
    {
        "id": "882559e213bde260",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "0e0a16b3eb3063ee",
        "mydb": "5e560f07cfec117a",
        "name": "dht22",
        "x": 2330,
        "y": 1480,
        "wires": [
            [
                "04e1039fc59320a4"
            ]
        ]
    },
    {
        "id": "04e1039fc59320a4",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "0e0a16b3eb3063ee",
        "name": "JSON",
        "statusCode": "",
        "headers": {
            "content-type": "application/json; charset=utf-8"
        },
        "x": 2450,
        "y": 1480,
        "wires": []
    },
    {
        "id": "c46318095bd096a9",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "04363f3d44ea50b0",
        "name": "GET requestId",
        "func": "// remember_cfg_request (ใช้แทนของเดิม)\nconst p = msg.payload || {};\nconst now = Date.now();\nconst TTL_MS = 120000; // 120s\n\nfunction normMAC(s){\n  if(!s) return null;\n  s = String(s).toUpperCase().replace(/[^0-9A-F]/g,'');\n  if(s.length !== 12) return null;\n  return s.match(/.{2}/g).join(':').toLowerCase();\n}\n\nconst keyMac = normMAC(p.mac);\nconst keyRoom = p.room ? String(p.room).toLowerCase() : (p.room_id ? String(p.room_id).toLowerCase() : null);\nconst key = keyMac || keyRoom;\n\nif (p.command === 'get_config' && p.requestId && key) {\n  const pending = flow.get('cfg_pending') || {};\n\n  // normalize existing value -> ensure it's an array\n  let list = pending[key];\n  if (list && !Array.isArray(list)) {\n    // legacy single object -> convert to array\n    if (typeof list === 'object' && list.requestId) {\n      list = [{ requestId: list.requestId, ts: list.ts || now }];\n    } else {\n      list = [];\n    }\n  }\n  if (!Array.isArray(list)) list = [];\n\n  // push new request (FIFO)\n  list.push({ requestId: p.requestId, ts: now });\n\n  // cleanup expired entries\n  pending[key] = list.filter(it => (now - (it.ts || 0)) <= TTL_MS);\n\n  flow.set('cfg_pending', pending);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 120,
        "wires": [
            [
                "18b28f96f1b41483",
                "dfa92c6ca3e394f6"
            ]
        ]
    },
    {
        "id": "874c0c450dd51575",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "04363f3d44ea50b0",
        "name": "PUT requestId",
        "func": "// attach_cfg_requestId (รับทั้งแบบ ESP32 ส่ง requestId มาด้วย และแบบต้องหาเอง)\nconst now = Date.now();\nconst TTL_MS = 120000; // 2 นาที\n\n// --- helpers ---\nfunction normMAC(s) {\n  if (!s) return null;\n  s = String(s).toUpperCase().replace(/[^0-9A-F]/g, '');\n  if (s.length !== 12) return null;\n  return s.match(/.{2}/g).join(':').toLowerCase();\n}\nfunction findMac(obj) {\n  if (!obj) return null;\n  if (typeof obj === 'string') {\n    const raw = obj.trim();\n    if (/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/.test(raw)) return normMAC(raw);\n    const noSym = raw.replace(/[^0-9A-Fa-f]/g, '');\n    if (/^[0-9A-Fa-f]{12}$/.test(noSym)) return normMAC(noSym);\n  }\n  if (typeof obj === 'object') {\n    for (const k of ['mac_address', 'mac', 'device_mac']) {\n      const found = findMac(obj[k]);\n      if (found) return found;\n    }\n  }\n  return null;\n}\n\n// --- contexts ---\nconst pending = flow.get('cfg_pending') || {};\nconst mac2room = flow.get('mac2room') || {}; // MAC(uppercase) -> room_id(lowercase)\n\n// --- extract ---\nconst topic = String(msg.topic || '');\nconst p = msg.payload || {};\n\n// ดึง MAC/room แบบปกติ\nlet keyFromTopic = null;\nconst mt = topic.match(/^esp32\\/response\\/([^/]+)\\/config$/i);\nif (mt && mt[1]) {\n  const maybe = mt[1];\n  keyFromTopic = normMAC(maybe) || maybe.toLowerCase();\n}\nconst macFromPayload = findMac(p);\nconst roomFromPayload = (p.room_id || p.room) ? String(p.room_id || p.room).toLowerCase() : null;\n\n// 1) ถ้า ESP32 ใส่ requestId มาแล้ว → เชื่อก่อน เคลียร์ pending ให้ตรง แล้วผ่านต่อ\nif (p.requestId) {\n  const rid = String(p.requestId).trim();\n  // เตรียม key ที่เป็นไปได้สำหรับลบออกจาก pending\n  const keys = new Set();\n\n  if (macFromPayload) {\n    keys.add(macFromPayload); // mac: aa:bb:...\n    const r = mac2room[macFromPayload.toUpperCase()];\n    if (r) keys.add(String(r).toLowerCase());\n  }\n  if (keyFromTopic) {\n    keys.add(keyFromTopic);\n    const r = mac2room[keyFromTopic.toUpperCase()];\n    if (r) keys.add(String(r).toLowerCase());\n  }\n  if (roomFromPayload) keys.add(roomFromPayload);\n\n  // พยายามลบ rid ออกจากคิวของแต่ละ key ที่เกี่ยวข้อง\n  let cleaned = 0;\n  for (const k of keys) {\n    const list = pending[k];\n    if (Array.isArray(list) && list.length) {\n      const fresh = list.filter(it => (now - (it.ts || 0)) <= TTL_MS);\n      const remain = fresh.filter(it => it.requestId !== rid);\n      if (remain.length !== fresh.length) cleaned++;\n      if (remain.length) pending[k] = remain;\n      else delete pending[k];\n    }\n  }\n  if (cleaned > 0) flow.set('cfg_pending', pending);\n\n  node.status({ fill: 'green', shape: 'dot', text: `Rx with requestId ${rid} (${cleaned ? 'cleaned' : 'no-pending'})` });\n  // ส่งต่อแบบที่พก requestId ของจริงจากอุปกรณ์มาได้เลย\n  return msg;\n}\n\n// 2) ถ้า ESP32 ไม่ได้ใส่ requestId มา → ใช้วิธีเดิม: หาให้จากคิว pending\nlet candidates = new Set();\nif (macFromPayload) {\n  candidates.add(macFromPayload);\n  const r = mac2room[macFromPayload.toUpperCase()];\n  if (r) candidates.add(String(r).toLowerCase());\n}\nif (keyFromTopic) {\n  candidates.add(keyFromTopic);\n  const r = mac2room[keyFromTopic.toUpperCase()];\n  if (r) candidates.add(String(r).toLowerCase());\n}\nif (roomFromPayload) {\n  candidates.add(roomFromPayload);\n}\n\nnode.status({ text: `Candidates: ${Array.from(candidates).join(', ')}` });\n\nlet attached = false;\nfor (const key of candidates) {\n  if (!key || attached) continue;\n\n  const reqList = pending[key];\n  if (Array.isArray(reqList) && reqList.length > 0) {\n    const fresh = reqList.filter(it => (now - (it.ts || 0)) <= TTL_MS);\n    if (fresh.length > 0) {\n      const it = fresh.shift(); // FIFO\n      p.requestId = it.requestId;\n      msg.payload = p;\n\n      // อัปเดต list\n      if (fresh.length > 0) pending[key] = fresh;\n      else delete pending[key];\n\n      flow.set('cfg_pending', pending);\n      attached = true;\n      node.status({ fill: 'green', shape: 'dot', text: `Attached ${it.requestId} via ${key}` });\n    } else {\n      delete pending[key];\n      flow.set('cfg_pending', pending);\n    }\n  }\n}\n\nif (!attached) {\n  node.warn({\n    note: 'no pending match for config response',\n    topic: msg.topic,\n    candidates: Array.from(candidates),\n    pendingKeys: Object.keys(pending)\n  });\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 180,
        "wires": [
            [
                "3ccca56ce30903d7"
            ]
        ]
    },
    {
        "id": "59b511670d45ce09",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "GET /api/device-map",
        "url": "/api/device-map",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2040,
        "y": 460,
        "wires": [
            [
                "945c7a052f56ca79"
            ]
        ]
    },
    {
        "id": "945c7a052f56ca79",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "Load Device Map",
        "func": "const deviceMap = flow.get('device_map', 'file') || {};\nmsg.payload = deviceMap;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 460,
        "wires": [
            [
                "4efc7f7d6266942a"
            ]
        ]
    },
    {
        "id": "4efc7f7d6266942a",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "OK",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2420,
        "y": 460,
        "wires": []
    },
    {
        "id": "a1a2222d90a0dc17",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "POST /api/device-map",
        "url": "/api/device-map",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2040,
        "y": 500,
        "wires": [
            [
                "d487db29e6d6f598"
            ]
        ]
    },
    {
        "id": "d487db29e6d6f598",
        "type": "json",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2220,
        "y": 500,
        "wires": [
            [
                "7b38579d583a6efe"
            ]
        ]
    },
    {
        "id": "7b38579d583a6efe",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "Save Device Map",
        "func": "let data = msg.payload;\n\n// แปลง string → JSON ถ้ามาเป็น string\nif (typeof data === 'string') {\n  try { data = JSON.parse(data); }\n  catch(e){\n    msg.statusCode = 400;\n    msg.payload = { ok:false, error:\"Cannot parse JSON\" };\n    return msg;\n  }\n}\n\n// ต้องเป็น object\nif (!data || typeof data !== 'object') {\n  msg.statusCode = 400;\n  msg.payload = { ok:false, error:\"Expected JSON object\" };\n  return msg;\n}\n\n// กรอง key: อนุญาตเฉพาะที่ขึ้นต้นด้วย room*/name*\nconst out = {};\nfor (const [k,v] of Object.entries(data)) {\n  if (/^(room|name)[0-9a-z]+$/i.test(k)) out[k] = v;\n}\n\n// เก็บลง file context\nflow.set('device_map', out, 'file');\n\n// ตอบกลับ\nmsg.statusCode = 200;\nmsg.payload = { ok:true, saved_keys:Object.keys(out) };\nreturn msg;\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2380,
        "y": 500,
        "wires": [
            [
                "1ddb9f9c6361ecbd"
            ],
            []
        ]
    },
    {
        "id": "1ddb9f9c6361ecbd",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "OK or NOT",
        "statusCode": "",
        "headers": {},
        "x": 2560,
        "y": 500,
        "wires": []
    },
    {
        "id": "e7b602f8cdebf2d0",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "63f59a4d8f7d47e7",
        "name": "GET /api/pin-map",
        "url": "/api/pin-map",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2020,
        "y": 640,
        "wires": [
            [
                "9353c7268406244b"
            ]
        ]
    },
    {
        "id": "9353c7268406244b",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "63f59a4d8f7d47e7",
        "name": "Load Pin Map",
        "func": "let pinMap = global.get('pin_map');\nif (!pinMap) {\n    const src = global.get('mac_pin_names') || {};\n    const out = {};\n    for (const mac of Object.keys(src)) {\n        const obj = src[mac] || {};\n        const dst = {};\n        for (const k of Object.keys(obj)) {\n            const m = /^name_pin_(\\d+)$/.exec(k);\n            if (m && obj[k]) dst[m[1]] = String(obj[k]);\n        }\n        const MAC = String(mac).trim().toUpperCase();   // <<< normalize\n        out[MAC] = dst;\n    }\n    pinMap = out;\n    global.set('pin_map', pinMap);\n    flow.set('pin_map', pinMap);\n}\nmsg.payload = pinMap;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 640,
        "wires": [
            [
                "6d0dbf7cb49c607c"
            ]
        ]
    },
    {
        "id": "6d0dbf7cb49c607c",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "63f59a4d8f7d47e7",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2390,
        "y": 640,
        "wires": []
    },
    {
        "id": "4a3a5a1e6c60f650",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "63f59a4d8f7d47e7",
        "name": "POST /api/pin-map",
        "url": "/api/pin-map",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2030,
        "y": 700,
        "wires": [
            [
                "18017e07326c690f"
            ]
        ]
    },
    {
        "id": "18017e07326c690f",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "63f59a4d8f7d47e7",
        "name": "Save Pin Map",
        "func": "const b = msg.payload || {};\nconst macRaw = String(b.mac || '').trim();\nif (!macRaw) { msg.statusCode = 400; msg.payload = { ok:false, error:'MAC required' }; return msg; }\nconst MAC = macRaw.toUpperCase();  // <<< normalize\n\nconst pinMap = global.get('pin_map') || {};\nconst legacy = global.get('mac_pin_names') || {};\n\nconst normalized = {};\nif (b.map && typeof b.map === 'object') {\n  for (const k of Object.keys(b.map)) {\n    if (/^\\d+$/.test(k) && b.map[k]) normalized[k] = String(b.map[k]).trim();\n  }\n} else {\n  if (b.name_pin_25) normalized['25'] = String(b.name_pin_25).trim();\n  if (b.name_pin_26) normalized['26'] = String(b.name_pin_26).trim();\n  if (b.name_pin_32) normalized['32'] = String(b.name_pin_32).trim();\n  if (b.name_pin_33) normalized['33'] = String(b.name_pin_33).trim();\n}\n\n// merge แทน overwrite\nconst prev = pinMap[MAC] || {};\npinMap[MAC] = { ...prev, ...normalized };\n\nlegacy[MAC] = {\n  name_pin_25: pinMap[MAC]['25'] || '',\n  name_pin_26: pinMap[MAC]['26'] || '',\n  name_pin_32: pinMap[MAC]['32'] || '',\n  name_pin_33: pinMap[MAC]['33'] || ''\n};\n\nglobal.set('pin_map', pinMap);\nflow.set('pin_map', pinMap);\nglobal.set('mac_pin_names', legacy);\n\nmsg.statusCode = 200;\nmsg.payload = { ok:true, pin_map: pinMap[MAC] };\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 700,
        "wires": [
            [
                "2fd31bb845f90d86",
                "f67d6f62f7b2e4e0"
            ]
        ]
    },
    {
        "id": "2fd31bb845f90d86",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "63f59a4d8f7d47e7",
        "name": "200/400 Response",
        "statusCode": "",
        "headers": {},
        "x": 2410,
        "y": 680,
        "wires": []
    },
    {
        "id": "84de7bd1374c55ed",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "d314b1ded220aada",
        "name": "Send topic",
        "func": "// REPLACE ENTIRE FUNCTION: Build topic (get_config)\nfunction normMAC(s) {\n  if (!s) return null;\n  s = String(s).toUpperCase().replace(/[^0-9A-F]/g, '');\n  if (s.length !== 12) return null;\n  return s.match(/.{2}/g).join(':').toLowerCase();\n}\nconst p = msg.payload || {};\nlet mac = normMAC(p.mac);\n\n// fallback: map จาก room_id ถ้าไม่ได้ส่ง mac มา\nif (!mac && p.room_id) {\n  const r2m = flow.get('room2mac') || {};\n  mac = normMAC(r2m[String(p.room_id).toLowerCase()]);\n}\nif (!mac) { node.warn('No MAC for get_config'); return null; }\n\nmsg.topic = `esp32/control/${mac}/request_config`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 140,
        "wires": [
            [
                "f0c3bb733466c3cc"
            ]
        ]
    },
    {
        "id": "0482f31f984f74b9",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "b4a00978e789863d",
        "name": "GET /api/uptime-history",
        "url": "/api/uptime-history",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2680,
        "y": 1480,
        "wires": [
            [
                "58589672a110f473"
            ]
        ]
    },
    {
        "id": "58589672a110f473",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "b4a00978e789863d",
        "name": "Query for uptime",
        "func": "// REPLACE ALL: Build SQL (Uptime History) — stable ordering + strict validation\n\nfunction normMAC(s) {\n    if (!s) return null;\n    const hex = String(s).toUpperCase().replace(/[^0-9A-F]/g, '');\n    if (hex.length !== 12) return null;\n    return hex.match(/.{2}/g).join(':');\n}\n\n// รับ ISO (UTC) หรือ 'YYYY-MM-DD HH:MM:SS' (local) คืนเป็น DATETIME local (ให้ตรงกับ DB)\nfunction toSqlAuto(s) {\n    if (!s) return null;\n    const v = String(s).trim();\n    if (v.includes('T')) {\n        const d = new Date(v);\n        if (isNaN(d)) return null;\n        const local = new Date(d.getTime() - d.getTimezoneOffset() * 60000);\n        return local.toISOString().slice(0, 19).replace('T', ' ');\n    }\n    if (/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/.test(v)) return v;\n    return null;\n}\n\n// 1) params\nconst q = msg.req?.query || {};\nlet { start, end, mac } = q;\nif (end === 'now') end = new Date().toISOString();\n\nconst macNorm = normMAC(mac);\nif (!macNorm || !start || !end) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Missing or invalid query parameters: mac, start, end\" };\n    return msg;\n}\n\nconst startSql = toSqlAuto(start);\nconst endSql = toSqlAuto(end);\nif (!startSql || !endSql) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid datetime format. Use ISO-8601 or 'YYYY-MM-DD HH:MM:SS' (local).\" };\n    return msg;\n}\n\nconst startMs = Date.parse(start);\nconst endMs = Date.parse(end);\nif (!(Number.isFinite(startMs) && Number.isFinite(endMs)) || endMs <= startMs) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid time range. Ensure start < end.\" };\n    return msg;\n}\n\n// 2) SQL: รวมข้อมูลในช่วง + แถวล่าสุดก่อน start (stable order)\nconst sql = `\n(\n  SELECT id, status, time\n  FROM esp_status_log\n  WHERE mac = ? AND time >= ? AND time <= ?\n)\nUNION ALL\n(\n  SELECT id, status, time FROM (\n    SELECT id, status, time\n    FROM esp_status_log\n    WHERE mac = ? AND time < ?\n    ORDER BY time DESC, id DESC\n    LIMIT 1\n  ) AS prev_status\n)\nORDER BY time ASC, id ASC;\n`;\n\nmsg.topic = sql;\nmsg.payload = [macNorm, startSql, endSql, macNorm, startSql];\nmsg.timeRange = { start: startSql, end: endSql };\nmsg.mac = macNorm;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2890,
        "y": 1480,
        "wires": [
            [
                "eccd6e3261b7615b"
            ]
        ]
    },
    {
        "id": "eccd6e3261b7615b",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "b4a00978e789863d",
        "mydb": "5e560f07cfec117a",
        "name": "Query Status Log",
        "x": 3090,
        "y": 1480,
        "wires": [
            [
                "6022786dd2200fa7"
            ]
        ]
    },
    {
        "id": "6022786dd2200fa7",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "b4a00978e789863d",
        "name": "Send data",
        "func": "// ====== Inputs ======\nconst rows = Array.isArray(msg.payload) ? msg.payload : [];\nconst { start, end } = msg.timeRange || {};\nconst mac = msg.mac;\n\n// ====== Guard: Validate Time Range ======\nconst startMs = new Date(start).getTime();\nconst endMs = new Date(end).getTime();\nif (!Number.isFinite(startMs) || !Number.isFinite(endMs) || endMs <= startMs) {\n    msg.payload = { uptime_pct: 0, segments: [], note: \"invalid time range\" };\n    return msg;\n}\n\n// ====== Get Live Status (for UI display only) ======\nconst states = flow.get('deviceStates') || {};\nconst live = states?.[mac] || null;\nconst liveState = live?.lastCombinedState || null;\nconst livePingMs = Number.isFinite(live?.ping_ms) ? live.ping_ms : null;\n\n// ✨ FIX: Sort by timestamp first, then by database ID to handle \"flapping\" status correctly ✨\nconst list = rows\n    .map(r => ({ id: r.id, status: String(r.status || '').toLowerCase(), ts: new Date(r.time).getTime() }))\n    .filter(r => Number.isFinite(r.ts) && r.id)\n    .sort((a, b) => {\n        if (a.ts !== b.ts) {\n            return a.ts - b.ts;\n        }\n        return a.id - b.id; // Secondary sort by ID ensures correct order for same-timestamp events\n    });\n\n// ====== Handle Case: No Historical Data ======\nif (list.length === 0) {\n    const seg = {\n        status: liveState || 'offline',\n        startTime: new Date(startMs).toISOString(),\n        endTime: new Date(endMs).toISOString()\n    };\n    const onlineSec = (seg.status === 'online') ? (endMs - startMs) / 1000 : 0;\n    const totalSec = (endMs - startMs) / 1000;\n    msg.payload = {\n        uptime_pct: totalSec > 0 ? +(onlineSec / totalSec * 100).toFixed(2) : 0,\n        segments: [seg],\n        authority: 'no_data',\n        live: { state: liveState, ping_ms: livePingMs }\n    };\n    return msg;\n}\n\n// ====== New Uptime Calculation Logic ======\nconst segments = [];\nlet onlineMs = 0;\n\nlet cursor_ts = startMs;\nlet last_status = 'offline'; \n\nconst pointsBefore = list.filter(p => p.ts < startMs);\nif (pointsBefore.length > 0) {\n    last_status = pointsBefore[pointsBefore.length - 1].status;\n}\n\nfor (const point of list) {\n    // This condition is important for correctly establishing the state at the beginning of the window,\n    // especially when multiple events happen before the window starts.\n    if (point.ts < cursor_ts) {\n        last_status = point.status; // Update status for points before the window starts\n        continue;\n    }\n\n    const seg_end = Math.min(point.ts, endMs);\n\n    if (seg_end > cursor_ts) {\n         segments.push({\n            status: last_status,\n            startTime: new Date(cursor_ts).toISOString(),\n            endTime: new Date(seg_end).toISOString()\n        });\n        if (last_status === 'online') {\n            onlineMs += (seg_end - cursor_ts);\n        }\n    }\n\n    cursor_ts = point.ts;\n    last_status = point.status;\n\n    if (cursor_ts >= endMs) {\n        break;\n    }\n}\n\nif (cursor_ts < endMs) {\n    segments.push({\n        status: last_status,\n        startTime: new Date(cursor_ts).toISOString(),\n        endTime: new Date(endMs).toISOString()\n    });\n    if (last_status === 'online') {\n        onlineMs += (endMs - cursor_ts);\n    }\n}\n\n// ====== Final Calculation & Output ======\nconst totalMs = endMs - startMs;\nconst uptimePct = totalMs > 0 ? +(onlineMs / totalMs * 100).toFixed(2) : 0;\n\nmsg.payload = {\n    uptime_pct: uptimePct,\n    segments: segments,\n    authority: 'db_only', \n    live: { state: liveState, ping_ms: livePingMs }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3270,
        "y": 1480,
        "wires": [
            [
                "b28ee7c1ebe01f7f"
            ]
        ]
    },
    {
        "id": "b28ee7c1ebe01f7f",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "b4a00978e789863d",
        "name": "OK",
        "statusCode": "200",
        "headers": {
            "0": "{",
            "1": "\"",
            "2": "C",
            "3": "o",
            "4": "n",
            "5": "t",
            "6": "e",
            "7": "n",
            "8": "t",
            "9": "-",
            "10": "T",
            "11": "y",
            "12": "p",
            "13": "e",
            "14": "\"",
            "15": ":",
            "16": "\"",
            "17": "a",
            "18": "p",
            "19": "p",
            "20": "l",
            "21": "i",
            "22": "c",
            "23": "a",
            "24": "t",
            "25": "i",
            "26": "o",
            "27": "n",
            "28": "/",
            "29": "j",
            "30": "s",
            "31": "o",
            "32": "n",
            "33": "\"",
            "34": "}"
        },
        "x": 3430,
        "y": 1480,
        "wires": []
    },
    {
        "id": "8ad81ad080bd81df",
        "type": "mqtt in",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "ESP32 Sensor Data",
        "topic": "esp32/+/dht",
        "qos": "2",
        "datatype": "json",
        "broker": "8301192ec347dbc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 780,
        "wires": [
            [
                "f8fa173138913533",
                "e83de35d3a2f5a12"
            ]
        ]
    },
    {
        "id": "bab874a3ec5e3d7f",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "Check condition",
        "func": "// Function: Check condition (v7) - open / upgrade / recovery / close\n// ใช้ rules/states เดิม แต่เลิกพึ่ง state.ack_* เวลาบันทึก log\n// และเวลาจะ recovery/close ให้ SELECT ack_by/ack_note จาก DB\n\n// --- CONTEXTS ---\nvar states = flow.get('alert_states') || {};\nvar rules = global.get('effectiveRuleMap') || {};\nvar deviceMap = flow.get('device_map', 'file') || {};\nvar now = new Date();\nvar now_iso = now.toISOString();\n\nfunction getLocalSqlTimestamp() {\n  const d = new Date();\n  const tzOffset = d.getTimezoneOffset() * 60000;\n  const localTime = new Date(d.getTime() - tzOffset);\n  return localTime.toISOString().slice(0, 19).replace('T', ' ');\n}\nvar now_sql = getLocalSqlTimestamp();\n\n// --- INPUT PAYLOAD ---\nvar p = msg.payload;\nif (!p || !p.mac || !p.sensor_name || !p.metric || p.value === undefined) {\n  node.error(\"Invalid payload\", msg);\n  return null;\n}\n\nvar mac = p.mac;\nvar sensor = p.sensor_name;\nvar metric = p.metric;\nvar value = Number(p.value);\nvar dedup_key = `${mac}|${sensor}|${metric}`;\n\n// --- HELPERS ---\nfunction getEffectiveRule(mac, sensor, metric) {\n  var sensorKey = `${mac}|${sensor}|${metric}`;\n  if (rules[sensorKey]) return rules[sensorKey];\n  var overallKey = `${mac}|overall|${metric}`;\n  if (rules[overallKey]) return rules[overallKey];\n  return rules[`system_${metric}`] || {};\n}\nfunction numOrNull(x) { return (x === undefined || x === null || x === '') ? null : Number(x); }\nfunction determineRawLevel(value, rule) {\n  var crit_max = numOrNull(rule.crit_max), crit_min = numOrNull(rule.crit_min);\n  var warn_max = numOrNull(rule.warn_max), warn_min = numOrNull(rule.warn_min);\n  if (crit_max !== null && value > crit_max) return 'critical';\n  if (crit_min !== null && value < crit_min) return 'critical';\n  if (warn_max !== null && value > warn_max) return 'warning';\n  if (warn_min !== null && value < warn_min) return 'warning';\n  return 'normal';\n}\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8); return v.toString(16);\n  });\n}\nfunction getRoomName(mac) {\n  for (const key in deviceMap) {\n    if (key.startsWith('room') && deviceMap[key] === mac) {\n      const roomLetter = key.slice(-1).toUpperCase();\n      return deviceMap[`name${roomLetter}`] || mac;\n    }\n  }\n  return mac;\n}\n\nvar rule = getEffectiveRule(mac, sensor, metric);\nif (!rule.id) { return null; }\n\nrule.warn_open_consec = rule.warn_open_consec ?? 2;\nrule.crit_open_consec = rule.crit_open_consec ?? 1;\nrule.clear_consec = rule.clear_consec ?? 2;\n\nvar state = states[dedup_key] || {\n  status: 'closed',\n  level: 'normal',\n  warn_count: 0,\n  crit_count: 0,\n  clear_count: 0,\n  event_id: null\n};\n\nvar rawLevel = determineRawLevel(value, rule);\n\n// update counters\nif (rawLevel === 'normal') {\n  state.clear_count++; state.warn_count = 0; state.crit_count = 0;\n} else if (rawLevel === 'warning') {\n  state.warn_count++; state.crit_count = 0; state.clear_count = 0;\n} else { // critical\n  state.crit_count++; state.warn_count = 0; state.clear_count = 0;\n}\n\nvar outputs = [null, null, null];\nvar room = getRoomName(mac);\n\n// ===== A) RECOVERY =====\nif ((state.status === 'open' || state.status === 'ack') && rawLevel === 'normal' && state.clear_count >= rule.clear_consec) {\n  const eventId = state.event_id;\n  const finalLevel = state.level;\n\n  const k = `recovery_sent:${eventId}`;\n  const last = context.get(k);\n  const nowMs = Date.now();\n  if (!last || (nowMs - last) >= 60000) {\n    state.status = 'recovery';\n    state.level = 'normal';\n\n    // 1) set status=recovery + ใส่ closed_at ทันที (ครั้งแรกเท่านั้น)\n    const updateSql = `\nUPDATE \\`alert_events\\`\nSET \\`status\\`='recovery',\n    \\`closed_at\\`   = IFNULL(\\`closed_at\\`, ?),\n    \\`last_updated\\`= ?\nWHERE \\`event_id\\`=? AND \\`status\\` IN ('open','ack');\n`;\n\n    // ===== START: โค้ดส่วนที่แก้ไข =====\n    // 2) log 'recovery' เครดิตตาม ack_by/ack_note\n    const logSql = `\nINSERT INTO \\`alert_event_log\\`\n  (\\`event_id\\`, \\`action\\`, \\`level\\`, \\`value\\`, \\`actor\\`, \\`ts\\`, \\`note\\`, \\`mac\\`, \\`sensor_name\\`, \\`metric\\`)\nSELECT e.event_id, 'recovery', ?, ?,\n       COALESCE(NULLIF(e.ack_by,''), 'System'),\n       ?, COALESCE(NULLIF(e.ack_note,''), 'System Recovery'),\n       ?, ?, ?\nFROM alert_events e\nWHERE e.event_id = ?;\n`;\n    // ===== END: โค้ดส่วนที่แก้ไข =====\n\n    outputs[0] = {\n      topic: updateSql + logSql,\n      //    [closed_at,  last_updated, eventId,   level, value, ts, mac, sensor, metric, eventId]\n      payload: [now_sql, now_sql, eventId, finalLevel, value, now_sql, mac, sensor, metric, eventId]\n    };\n\n    outputs[2] = {\n      payload: {\n        type: 'recovery',\n        event_id: eventId,\n        dedup_key,\n        mac, sensor_name: sensor, metric,\n        value, ts: now_iso, status: 'recovery',\n        room_name: room\n      }\n    };\n\n    context.set(k, nowMs);\n  }\n}\n\n\n// ===== B) OPEN =====\nelse if (state.status === 'closed' && rawLevel !== 'normal') {\n  let newLevel = null;\n  if (rawLevel === 'critical' && state.crit_count >= rule.crit_open_consec) newLevel = 'critical';\n  else if (rawLevel === 'warning' && state.warn_count >= rule.warn_open_consec) newLevel = 'warning';\n\n  if (newLevel) {\n    state.status = 'open';\n    state.level = newLevel;\n    state.event_id = uuidv4();\n\n    outputs[0] = {\n      topic: `\nINSERT INTO \\`alert_events\\`\n  (\\`event_id\\`, \\`dedup_key\\`, \\`mac\\`, \\`room_name\\`, \\`sensor_name\\`, \\`metric\\`, \\`level\\`, \\`trigger_value\\`, \\`status\\`, \\`rule_id\\`, \\`opened_at\\`)\nVALUES (?, ?, ?, ?, ?, ?, ?, ?, 'open', ?, ?);\n\nINSERT INTO \\`alert_event_log\\`\n  (\\`event_id\\`, \\`action\\`, \\`level\\`, \\`value\\`, \\`actor\\`, \\`ts\\`, \\`mac\\`, \\`sensor_name\\`, \\`metric\\`)\nVALUES (?, 'open', ?, ?, 'System', ?, ?, ?, ?);\n`,\n      payload: [\n        state.event_id, dedup_key, mac, room, sensor, metric, newLevel, value, rule.id, now_sql,\n        state.event_id, newLevel, value, now_sql, mac, sensor, metric\n      ]\n    };\n\n    outputs[1] = {\n      payload: {\n        type: 'open', level: newLevel, event_id: state.event_id, dedup_key,\n        mac, sensor_name: sensor, metric, value, ts: now_iso, room_name: room,\n        warn_min: rule.warn_min, warn_max: rule.warn_max\n      }\n    };\n  }\n}\n\n// ===== C) UPGRADE =====\nelse if (state.status === 'open' && rawLevel !== 'normal') {\n  const eventId = state.event_id;\n  if (state.level === 'warning' && rawLevel === 'critical' && state.crit_count >= rule.crit_open_consec) {\n    state.level = 'critical';\n    outputs[0] = {\n      topic: `\nUPDATE \\`alert_events\\`\nSET \\`level\\`='critical', \\`trigger_value\\`=?, \\`room_name\\`=?, \\`last_updated\\`=?\nWHERE \\`event_id\\`=?;\n\nINSERT INTO \\`alert_event_log\\`\n  (\\`event_id\\`, \\`action\\`, \\`level\\`, \\`value\\`, \\`actor\\`, \\`ts\\`, \\`mac\\`, \\`sensor_name\\`, \\`metric\\`)\nVALUES (?, 'upgrade', 'critical', ?, 'System', ?, ?, ?, ?);\n`,\n      payload: [value, room, now_sql, eventId,\n        eventId, value, now_sql, mac, sensor, metric]\n    };\n\n    outputs[1] = {\n      payload: {\n        type: 'upgrade', level: 'critical', event_id: eventId, dedup_key,\n        mac, sensor_name: sensor, metric, value, ts: now_iso, room_name: room,\n        warn_min: rule.warn_min, warn_max: rule.warn_max\n      }\n    };\n  } else {\n    outputs[0] = {\n      topic: `UPDATE \\`alert_events\\` SET \\`last_updated\\`=? WHERE \\`event_id\\`=?;`,\n      payload: [now_sql, eventId]\n    };\n  }\n}\n\n// ===== D) CLOSE (auto-after-recovery รอบถัดไป) =====\nelse if (state.status === 'recovery') {\n  const eventId = state.event_id;\n\n  const updateSql = `\nUPDATE \\`alert_events\\`\nSET \\`status\\`='closed',\n    \\`last_updated\\` = ?,\n    \\`closed_at\\`    = IFNULL(\\`closed_at\\`, ?)\nWHERE \\`event_id\\`=? AND \\`status\\`='recovery';\n`;\n\n  const logSql = `\nINSERT INTO \\`alert_event_log\\`\n  (\\`event_id\\`, \\`action\\`, \\`level\\`, \\`value\\`, \\`actor\\`, \\`ts\\`, \\`note\\`, \\`mac\\`, \\`sensor_name\\`, \\`metric\\`)\nSELECT e.event_id, 'close', NULL, NULL,\n       COALESCE(NULLIF(e.ack_by,''), 'System') AS actor,\n       ?,\n       CASE\n         WHEN (e.ack_note IS NOT NULL AND e.ack_note <> '') THEN e.ack_note\n         WHEN (e.ack_by IS NULL OR e.ack_by = '') THEN 'System Recovery'\n         ELSE ''\n       END AS note,\n       ?, ?, ?\nFROM alert_events e\nWHERE e.event_id = ?;\n`;\n\n  outputs[0] = {\n    topic: updateSql + logSql,\n    //    [last_updated, closed_at, eventId,   ts_for_log,  mac, sensor, metric, eventId]\n    payload: [now_sql, now_sql, eventId, now_sql, mac, sensor, metric, eventId]\n  };\n\n  state.status = 'closed';\n}\n\n\n// persist state\nstates[dedup_key] = state;\nflow.set('alert_states', states);\n\nif (outputs.some(Boolean)) { return outputs; }\nreturn null;",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 720,
        "wires": [
            [
                "40dc39f6a661c710"
            ],
            [
                "edb9aefa4d5efde1",
                "2a78b5cd6ba1b8d3"
            ],
            [
                "edb9aefa4d5efde1",
                "2a78b5cd6ba1b8d3"
            ]
        ]
    },
    {
        "id": "40dc39f6a661c710",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 870,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "785762e88fcf5492",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "GET /api/alerts",
        "url": "/api/alerts",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 1140,
        "wires": [
            [
                "c4ec9302faebc92a"
            ]
        ]
    },
    {
        "id": "c4ec9302faebc92a",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "Query alert evet lists",
        "func": "// Function: Query alert event lists (V10 - Corrected History Query)\n\nconst q = (msg.req && msg.req.query) ? msg.req.query : {};\nconst statusFilter = (q.status || 'open,ack').toLowerCase();\nconst startDate = q.start;\nconst endDate = q.end;\n\nfunction toSqlDatetime(isoString) {\n    if (!isoString) return null;\n    try {\n        const d = new Date(isoString);\n        // This logic correctly converts the local time from the browser to UTC for the database\n        const tzOffset = d.getTimezoneOffset() * 60000;\n        const localTime = new Date(d.getTime() - tzOffset);\n        return localTime.toISOString().slice(0, 19).replace('T', ' ');\n    } catch (e) {\n        return null;\n    }\n}\n\nlet sql;\nconst params = [];\n\n// --- START: EDITED BLOCK ---\n// This block contains the corrected SQL query for historical alerts.\nif (statusFilter.includes('closed') || statusFilter.includes('recovery')) {\n\n    sql = `\n    SELECT\n        e.event_id, e.mac, e.room_name, e.sensor_name, e.metric, e.level, e.trigger_value,\n        l.action AS status,\n        \n        -- ✅ [FIX] Use a subquery to get the correct opening timestamp.\n        (SELECT sub.ts FROM alert_event_log sub WHERE sub.event_id = l.event_id AND sub.action = 'open' ORDER BY sub.ts ASC LIMIT 1) as opened_at,\n        \n        l.ts AS display_time, -- This is correct for history, as it shows the time of closing/recovery.\n        l.actor AS ack_by,\n        l.note AS ack_note,\n        \n        (SELECT sub.ts FROM alert_event_log sub WHERE sub.event_id = l.event_id AND sub.action = 'ack' ORDER BY sub.ts DESC LIMIT 1) as ack_at,\n        \n        -- ✅ [IMPROVEMENT] Use l.ts directly for better performance.\n        l.ts as closed_at\n\n    FROM\n        alert_event_log l\n    LEFT JOIN\n        alert_events e ON l.event_id = e.event_id\n    `;\n\n    const conditions = [];\n\n    const statuses = statusFilter.split(',')\n        .map(s => s.trim())\n        .map(s => {\n            if (s === 'closed') return 'close'; // Map UI term 'closed' to DB term 'close'\n            return s;\n        })\n        .filter(s => s === 'close' || s === 'recovery');\n\n    if (statuses.length > 0) {\n        const placeholders = statuses.map(() => '?').join(',');\n        conditions.push(`l.action IN (${placeholders})`);\n        params.push(...statuses);\n    }\n\n    const startSql = toSqlDatetime(startDate);\n    const endSql = toSqlDatetime(endDate);\n\n    if (startSql && endSql) {\n        conditions.push('l.ts BETWEEN ? AND ?');\n        params.push(startSql, endSql);\n    }\n\n    if (q.mac) {\n        conditions.push('e.mac = ?');\n        params.push(q.mac);\n    }\n\n    if (conditions.length > 0) {\n        sql += ' WHERE ' + conditions.join(' AND ');\n    }\n\n    sql += ' ORDER BY l.ts DESC';\n\n// --- END: EDITED BLOCK ---\n\n} else {\n    // This is the original, correct code for fetching 'open' and 'ack' statuses.\n    sql = `\n    SELECT\n        event_id, mac, room_name, sensor_name, metric, level, status,\n        opened_at, ack_at, closed_at, ack_by, ack_note, trigger_value,\n        CASE\n            WHEN status = 'ack' THEN ack_at\n            ELSE opened_at\n        END AS display_time\n    FROM alert_events\n    `;\n\n    const conditions = [];\n    const statuses = statusFilter.split(',').map(s => s.trim()).filter(Boolean);\n\n    if (statuses.length > 0) {\n        conditions.push(`status IN (${statuses.map(() => '?').join(',')})`);\n        params.push(...statuses);\n    }\n    if (q.mac) {\n        conditions.push('mac = ?');\n        params.push(q.mac);\n    }\n    if (conditions.length > 0) {\n        sql += ' WHERE ' + conditions.join(' AND ');\n    }\n    sql += ' ORDER BY display_time DESC';\n}\n\nmsg.topic = sql;\nmsg.payload = params;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1140,
        "wires": [
            [
                "72c7559d7d6aba22"
            ]
        ]
    },
    {
        "id": "72c7559d7d6aba22",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 190,
        "y": 1200,
        "wires": [
            [
                "b47e7018602a98b6"
            ]
        ]
    },
    {
        "id": "289352e7c0c2f154",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "200 OK (JSON)",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json; charset=utf-8"
        },
        "x": 660,
        "y": 1200,
        "wires": []
    },
    {
        "id": "d70cf71d9d4a7b90",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "c7e46bccde3fcec3",
        "name": "GET /api/alert-rules/effective",
        "url": "/api/alert-rules/effective",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 1400,
        "wires": [
            [
                "536682416efd33c1"
            ]
        ]
    },
    {
        "id": "536682416efd33c1",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "c7e46bccde3fcec3",
        "name": "Per sensor rules",
        "func": "// รับ query params จากหน้าเว็บ\nconst q = msg.req.query;\nconst rules = global.get('effectiveRuleMap') || {};\n\n// ตรวจสอบว่ามีพารามิเตอร์ที่จำเป็นครบหรือไม่\nif (!q.mac || !q.sensor_name || !q.metric) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"mac, sensor_name, and metric are required query parameters\" };\n    return msg;\n}\n\n// สร้าง Key สำหรับแต่ละระดับ (Sensor, Room, System) ให้ถูกต้องตาม metric ที่ร้องขอมา\nconst sensorKey = `${q.mac}|${q.sensor_name}|${q.metric}`;\nconst roomKey = `${q.mac}|overall|${q.metric}`; // ✨ FIX: ทำให้เป็น Dynamic ตาม q.metric\nconst systemKey = `system_${q.metric}`;           // ✨ FIX: ทำให้เป็น Dynamic ตาม q.metric\n\n// ค้นหา Rule ตามลำดับความสำคัญที่ถูกต้อง: Sensor -> Room -> System\nlet effectiveRule = rules[sensorKey] || rules[roomKey] || rules[systemKey] || {};\n\nmsg.payload = effectiveRule;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1400,
        "wires": [
            [
                "d160a84f3489e2ec"
            ]
        ]
    },
    {
        "id": "815b587ab45df4c7",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "PUT/api/alert-rules",
        "url": "/api/alert-rules",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 2030,
        "y": 1200,
        "wires": [
            [
                "cfbe7be2bb75dc23"
            ]
        ]
    },
    {
        "id": "cfbe7be2bb75dc23",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Update rules",
        "func": "// Expects msg.payload to be an array of rule objects\nconst rulesToUpdate = Array.isArray(msg.payload) ? msg.payload : [msg.payload];\n\nif (rulesToUpdate.length === 0) {\n    msg.statusCode = 400;\n    msg.payload = { ok: false, error: \"Payload must be a non-empty array of rule objects.\" };\n    return msg;\n}\n\n// NOTE: This requires a UNIQUE key on (scope, mac, sensor_name, metric) in the DB table.\n// ✨ จุดที่แก้ไข 1: เพิ่ม 'active' เข้าไปในรายการคอลัมน์\nconst sql = `INSERT INTO alert_rules (\n    scope, mac, sensor_name, metric, active, \n    warn_min, warn_max, crit_min, crit_max, \n    warn_open_consec, crit_open_consec, clear_consec, \n    min_gap_seconds_warning, min_gap_seconds_critical, \n    repeat_minutes_warning, repeat_minutes_critical, \n    group_window_seconds, heartbeat_timeout_minutes\n) VALUES ? \nON DUPLICATE KEY UPDATE \n    active=VALUES(active), warn_min=VALUES(warn_min), warn_max=VALUES(warn_max), \n    crit_min=VALUES(crit_min), crit_max=VALUES(crit_max), \n    warn_open_consec=VALUES(warn_open_consec), crit_open_consec=VALUES(crit_open_consec), \n    clear_consec=VALUES(clear_consec), min_gap_seconds_warning=VALUES(min_gap_seconds_warning), \n    min_gap_seconds_critical=VALUES(min_gap_seconds_critical), repeat_minutes_warning=VALUES(repeat_minutes_warning), \n    repeat_minutes_critical=VALUES(repeat_minutes_critical), group_window_seconds=VALUES(group_window_seconds), \n    heartbeat_timeout_minutes=VALUES(heartbeat_timeout_minutes);`;\n\nconst values = rulesToUpdate.map(r => [\n    r.scope, r.mac || null, r.sensor_name || null, r.metric || null,\n    // ✨ จุดที่แก้ไข 2: จัดการค่า 'active'\n    // ถ้าส่ง active: 0 มา ก็ใช้ 0, ถ้าไม่ได้ส่งมา ให้ default เป็น 1 (ใช้งาน)\n    r.active !== undefined ? r.active : 1,\n    r.warn_min, r.warn_max, r.crit_min, r.crit_max,\n    r.warn_open_consec, r.crit_open_consec, r.clear_consec,\n    r.min_gap_seconds_warning, r.min_gap_seconds_critical,\n    r.repeat_minutes_warning, r.repeat_minutes_critical,\n    r.group_window_seconds, r.heartbeat_timeout_minutes\n]);\n\nmsg.topic = sql;\nmsg.payload = [values];\n\n// We need to trigger a rule reload after this is done.\nmsg.reload_rules = true;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1200,
        "wires": [
            [
                "c864607514d350c4"
            ]
        ]
    },
    {
        "id": "c864607514d350c4",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "mydb": "5e560f07cfec117a",
        "name": "alert_rules",
        "x": 2370,
        "y": 1200,
        "wires": [
            [
                "bdb285d12433aad8"
            ]
        ]
    },
    {
        "id": "bdb285d12433aad8",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Prepare Response",
        "func": "msg.payload = { ok: true, message: `Updated ${msg.payload.affectedRows || 0} rules.` };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2550,
        "y": 1200,
        "wires": [
            [
                "d54032355d69570c"
            ]
        ]
    },
    {
        "id": "f8fa173138913533",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "Adapt Payload",
        "func": "const pin_map = flow.get('pin_map') || global.get('pin_map') || {};\n\nfunction normMac(s) { return s ? String(s).trim().toUpperCase() : ''; }\n\nfunction resolveSensorName(macAddr, pinStr, fallbackName) {\n  const mac = normMac(macAddr);\n  const pin = (pinStr === 0 || pinStr) ? String(pinStr).trim() : '';\n  if (!mac) return String(fallbackName ?? pin ?? 'unknown');\n  if (!pin) return String(fallbackName ?? 'unknown');\n  const m = pin_map[mac] || {};\n  const direct = m?.[pin];\n  const alt = m?.['name_pin_' + pin];\n  const alias = m?.alias?.[pin];\n  return String(direct ?? alt ?? alias ?? fallbackName ?? pin ?? 'unknown');\n}\n\nfunction numOrNull(v) {\n  if (v === undefined || v === null || v === '') return null;\n  const n = Number(v);\n  return Number.isFinite(n) ? n : null;\n}\n\nconst p = msg.payload || {};\n\nlet mac = p.mac || p.MAC || (p.device && p.device.mac) || (p.header && p.header.mac);\nmac = normMac(mac);\n\nlet pin = p.pin;\nif (pin === undefined || pin === null) pin = p.sensor_pin;\nif (pin === undefined || pin === null) pin = p.pin_no;\n\nlet sensorNameIn = p.sensor_name ? String(p.sensor_name).trim() : null;\n\nconst temp = numOrNull(p.avg_temp) ?? numOrNull(p.temperature) ?? numOrNull(p.temp);\nconst hum = numOrNull(p.avg_hum) ?? numOrNull(p.humidity) ?? numOrNull(p.hum);\n\nif (!mac) {\n  node.warn({ where: 'adapt', drop: 'no-mac', raw: p });\n  return null;\n}\n\nconst sensor_name = resolveSensorName(mac, pin, sensorNameIn);\n\nlet sent = 0;\nif (temp !== null) {\n  node.send({ payload: { mac, sensor_name, metric: 'temp', value: temp, pin: (pin === 0 || pin) ? String(pin) : undefined } });\n  sent++;\n}\nif (hum !== null) {\n  node.send({ payload: { mac, sensor_name, metric: 'hum', value: hum, pin: (pin === 0 || pin) ? String(pin) : undefined } });\n  sent++;\n}\n\nif (!sent) {\n  node.warn({ where: 'adapt', drop: 'no-metrics', mac, pin: (pin === 0 || pin) ? String(pin) : undefined, sensor_name, raw: p });\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 740,
        "wires": [
            [
                "bab874a3ec5e3d7f"
            ]
        ]
    },
    {
        "id": "c96aa8cdedc6c4b8",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "GET /api/alert-rules",
        "url": "/api/alert-rules",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2030,
        "y": 1260,
        "wires": [
            [
                "7c18457b582e4c85"
            ]
        ]
    },
    {
        "id": "7c18457b582e4c85",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Query get rules",
        "func": "// Function Node: Build SQL for GET /api/alert-rules\n\n// 1. อ่าน query parameters จาก URL ที่หน้าเว็บส่งมา\nconst q = msg.req.query || {};\n\n// 2. สร้าง SQL SELECT พื้นฐาน\nlet sql = 'SELECT * FROM alert_rules';\nconst conditions = [];\nconst params = [];\n\n// 3. ต่อเงื่อนไข WHERE ตามพารามิเตอร์ที่ส่งมา\nif (q.scope) {\n    conditions.push('scope = ?');\n    params.push(q.scope);\n}\nif (q.mac) {\n    conditions.push('mac = ?');\n    params.push(q.mac);\n}\nif (q.sensor_name) {\n    // จัดการกับ sensor_name ที่อาจมีช่องว่าง (เช่น \"Rack 1\")\n    conditions.push('sensor_name = ?');\n    params.push(decodeURIComponent(q.sensor_name));\n}\n\n// 4. ถ้ารมีเงื่อนไขอย่างน้อย 1 ข้อ ให้เอามาต่อท้าย SQL\nif (conditions.length > 0) {\n    sql += ' WHERE ' + conditions.join(' AND ');\n}\n\n// 5. เตรียม msg object เพื่อส่งให้โหนด mysql\n// ใช้ Parameterized Query (?) เพื่อความปลอดภัย ป้องกัน SQL Injection\nmsg.topic = sql;\nmsg.payload = params;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 1260,
        "wires": [
            [
                "a7e285e70ff817c1"
            ]
        ]
    },
    {
        "id": "a7e285e70ff817c1",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "mydb": "5e560f07cfec117a",
        "name": "alert_rules",
        "x": 2390,
        "y": 1260,
        "wires": [
            [
                "472eab2a072d1c93"
            ]
        ]
    },
    {
        "id": "472eab2a072d1c93",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "200 OK (JSON)",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json; charset=utf-8"
        },
        "x": 2560,
        "y": 1260,
        "wires": []
    },
    {
        "id": "b47e7018602a98b6",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "wrap_alerts",
        "func": "const rows = Array.isArray(msg.payload) ? msg.payload : [];\nmsg.payload = { alerts: rows };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1200,
        "wires": [
            [
                "289352e7c0c2f154"
            ]
        ]
    },
    {
        "id": "271033183b121bd0",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "POST /api/alert-rules",
        "url": "/api/alert-rules",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2050,
        "y": 1320,
        "wires": [
            [
                "636d2940b0ca4e78"
            ]
        ]
    },
    {
        "id": "636d2940b0ca4e78",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Validate rules",
        "func": "// Function: normalize_and_validate_rules\n// ตรวจสอบข้อมูล, แปลงเป็นชนิดที่ถูกต้อง, และแยกสาย error\n\nfunction normMac(s) {\n  if (!s) return null;\n  const hex = String(s).toUpperCase().replace(/[^0-9A-F]/g, '');\n  if (hex.length !== 12) return null;\n  return hex.match(/.{2}/g).join(':');\n}\n\nconst p = msg.payload || {};\nconst mac = normMac(p.mac);\n\n// 1. ตรวจสอบข้อมูลพื้นฐาน\nif (!mac || !p.rules || !p.rules.temp || !p.rules.hum) {\n  msg.statusCode = 400;\n  msg.payload = { error: \"Invalid payload structure. Required: mac, rules.temp, rules.hum\" };\n  return [ null, msg ]; // ส่งออกไปทาง output 2 (Error)\n}\n\nconst r = p.rules;\n\n// 2. แปลงทุกอย่างเป็นตัวเลข ป้องกันข้อมูลขยะ\nconst out = {\n  mac: mac,\n  temp: {\n    lo_crit: parseFloat(r.temp.lo_crit),\n    lo_warn: parseFloat(r.temp.lo_warn),\n    hi_warn: parseFloat(r.temp.hi_warn),\n    hi_crit: parseFloat(r.temp.hi_crit),\n  },\n  hum: {\n    lo_crit: parseFloat(r.hum.lo_crit),\n    lo_warn: parseFloat(r.hum.lo_warn),\n    hi_warn: parseFloat(r.hum.hi_warn),\n    hi_crit: parseFloat(r.hum.hi_crit),\n  }\n};\n\n// 3. ตรวจสอบ Logic ของ Threshold (เช่น warning ต้องไม่สูงกว่า critical)\nconst t = out.temp;\nif (!(t.lo_crit <= t.lo_warn && t.lo_warn < t.hi_warn && t.hi_warn <= t.hi_crit)) {\n  msg.statusCode = 400;\n  msg.payload = { error: \"Invalid temperature threshold logic. Must be lo_crit <= lo_warn < hi_warn <= hi_crit.\" };\n  return [ null, msg ];\n}\n\nconst h = out.hum;\nif (!(h.lo_crit <= h.lo_warn && h.lo_warn < h.hi_warn && h.hi_warn <= h.hi_crit)) {\n  msg.statusCode = 400;\n  msg.payload = { error: \"Invalid humidity threshold logic.\" };\n  return [ null, msg ];\n}\n\n// ถ้าทุกอย่างถูกต้อง ให้ส่งข้อมูลที่แปลงแล้วออกไปทาง output 1\nmsg.rules_normalized = out;\nreturn [ msg, null ];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 1320,
        "wires": [
            [
                "ae3aa6d1a10c043e"
            ],
            [
                "cacb1e585749c38b"
            ]
        ]
    },
    {
        "id": "ae3aa6d1a10c043e",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "cache_rules",
        "func": "// Function: cache_rules_to_flow\n// เอากฎที่ผ่านการตรวจสอบแล้ว เก็บไว้ใน Flow Context เพื่อให้ Evaluator ดึงไปใช้ได้เร็วๆ\n\nconst rules = msg.rules_normalized;\n\n// ดึงแคชเก่าขึ้นมา (ถ้าไม่มีก็สร้าง object ว่างๆ)\nconst cache = flow.get('alert_rules_by_mac') || {};\n\n// อัปเดตข้อมูลของ MAC Address นี้\ncache[rules.mac] = rules;\n\n// บันทึกแคชกลับลงไป\nflow.set('alert_rules_by_mac', cache);\n\nnode.status({ fill: \"blue\", shape: \"dot\", text: `Rules for ${rules.mac} updated` });\n\nmsg.payload = { success: true, message: `Rules for ${rules.mac} have been saved.` };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1300,
        "wires": [
            [
                "6c05f5d1fd3fc7c0"
            ]
        ]
    },
    {
        "id": "cacb1e585749c38b",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "400 Bad Request",
        "statusCode": "400",
        "headers": {},
        "x": 2470,
        "y": 1340,
        "wires": []
    },
    {
        "id": "6c05f5d1fd3fc7c0",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 2600,
        "y": 1300,
        "wires": []
    },
    {
        "id": "d24eecc773475a0d",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "b43a3178c92d9fc0",
        "name": "สำหรับ Sync เวลา ESP32",
        "info": "",
        "x": 2050,
        "y": 280,
        "wires": []
    },
    {
        "id": "7d3c211e7f5ac418",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "Temp/Hum + Sensor Status",
        "info": "",
        "x": 240,
        "y": 80,
        "wires": []
    },
    {
        "id": "4de2c1d8785509fe",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "bf24f1109e557024",
        "name": "Reboot Device",
        "info": "",
        "x": 1040,
        "y": 80,
        "wires": []
    },
    {
        "id": "6636d93cad979dc5",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "04363f3d44ea50b0",
        "name": "แปะหมายเลขคำขอ",
        "info": "",
        "x": 1700,
        "y": 80,
        "wires": []
    },
    {
        "id": "ec4ba7c4df1cd904",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "d314b1ded220aada",
        "name": "Load or Save Config",
        "info": "",
        "x": 2030,
        "y": 80,
        "wires": []
    },
    {
        "id": "d736f2dfb44cb98c",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "สำหรับเก็บ Map mac to room",
        "info": "",
        "x": 2060,
        "y": 420,
        "wires": []
    },
    {
        "id": "ed784a8e66a138cd",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "63f59a4d8f7d47e7",
        "name": "สำหรับเก็บ Map pin to room",
        "info": "",
        "x": 2050,
        "y": 600,
        "wires": []
    },
    {
        "id": "200d49b6f215cbff",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "0e0a16b3eb3063ee",
        "name": "สำหรับ Query data ไปสร้างกราฟ Temp&Hum",
        "info": "",
        "x": 2100,
        "y": 1440,
        "wires": []
    },
    {
        "id": "91754b0ad2692269",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "b4a00978e789863d",
        "name": "สำหรับ Query data แสดง Uptime",
        "info": "",
        "x": 2710,
        "y": 1440,
        "wires": []
    },
    {
        "id": "d83d445d62969ded",
        "type": "inject",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Every 5 minutes",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 2050,
        "y": 1080,
        "wires": [
            [
                "4ecc2247b3a33d89"
            ]
        ]
    },
    {
        "id": "4ecc2247b3a33d89",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Request Config from Devices",
        "func": "// ส่งคำขอ config ไปยังทุกอุปกรณ์ที่ Node-RED รู้จัก\nconst roomToMac = flow.get('room2mac') || {};\nconst macs = Object.values(roomToMac);\n\nif (macs.length === 0) {\n    node.warn('No devices found in room2mac context. Cannot request config.');\n    return null;\n}\n\nconst messages = macs.map(mac => ({\n    topic: `esp32/control/${mac}/request_config`,\n    payload: {\n        command: \"get_config\",\n        mac: mac,\n        requestId: new Date().getTime()\n    }\n}));\n\nreturn [messages];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2360,
        "y": 1080,
        "wires": [
            [
                "53bee7f5fd9eed25"
            ]
        ]
    },
    {
        "id": "53bee7f5fd9eed25",
        "type": "mqtt out",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Request Config",
        "topic": "esp32/commands",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8301192ec347dbc9",
        "x": 2580,
        "y": 1080,
        "wires": []
    },
    {
        "id": "9f003438c0f5cb62",
        "type": "mqtt in",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Receive Config",
        "topic": "esp32/response/+/config",
        "qos": "1",
        "datatype": "json",
        "broker": "8301192ec347dbc9",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 2020,
        "y": 1140,
        "wires": [
            [
                "57b8ad027dff3e5a"
            ]
        ]
    },
    {
        "id": "57b8ad027dff3e5a",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Process Config to DB",
        "func": "// Function to process config from device and prepare it for the database API\n\nconst config = msg.payload || {};\nconst mac = config.mac_address || null;\n\n// Ensure the payload has the required structure\nif (!mac || !config.alerts) {\n    node.warn('Invalid config payload received. Missing mac_address or alerts object. Skipping DB update.');\n    return null;\n}\n\n// --- ✨ 1. กำหนดค่า Default ทั้งหมดไว้ที่นี่ ---\nconst defaultRules = {\n    // ค่า Default ที่ดึงมาจากโค้ด eval_alert_v6.1\n    warn_open_consec: 1,\n    crit_open_consec: 1,\n    clear_consec: 1,\n\n    // ค่า Default ที่แนะนำสำหรับคอลัมน์อื่นๆ ที่มีในตาราง\n    min_gap_seconds_warning: 60,\n    min_gap_seconds_critical: 60,\n    repeat_minutes_warning: 60,\n    repeat_minutes_critical: 15,\n    group_window_seconds: 0,\n    heartbeat_timeout_minutes: 15\n};\n\n// --- ✨ 2. สร้าง Object ที่รวมค่าจากอุปกรณ์กับค่า Default ---\n// ถ้าอุปกรณ์ไม่ได้ส่งค่าไหนมา จะใช้ค่า Default แทนโดยอัตโนมัติ\nconst sharedRules = {\n    warn_open_consec: config.alerts.warn_open_consec ?? defaultRules.warn_open_consec,\n    crit_open_consec: config.alerts.crit_open_consec ?? defaultRules.crit_open_consec,\n    clear_consec: config.alerts.clear_consec ?? defaultRules.clear_consec,\n    min_gap_seconds_warning: config.alerts.min_gap_seconds_warning ?? defaultRules.min_gap_seconds_warning,\n    min_gap_seconds_critical: config.alerts.min_gap_seconds_critical ?? defaultRules.min_gap_seconds_critical,\n    repeat_minutes_warning: config.alerts.repeat_minutes_warning ?? defaultRules.repeat_minutes_warning,\n    repeat_minutes_critical: config.alerts.repeat_minutes_critical ?? defaultRules.repeat_minutes_critical,\n    group_window_seconds: config.alerts.group_window_seconds ?? defaultRules.group_window_seconds,\n    heartbeat_timeout_minutes: config.alerts.heartbeat_timeout_minutes ?? defaultRules.heartbeat_timeout_minutes\n};\n\n\n// Prepare the payload in the format expected by our /api/alert-rules endpoint\nconst rulePayload = [\n    {\n        scope: \"room\",\n        mac: mac,\n        sensor_name: \"overall\",\n        metric: \"temp\",\n        active: 1,\n        crit_min: config.alerts.temp_crit_low,\n        warn_min: config.alerts.temp_warn_low,\n        warn_max: config.alerts.temp_warn_high,\n        crit_max: config.alerts.temp_crit_high,\n        ...sharedRules\n    },\n    {\n        scope: \"room\",\n        mac: mac,\n        sensor_name: \"overall\",\n        metric: \"hum\",\n        active: 1,\n        crit_min: config.alerts.hum_crit_low,\n        warn_min: config.alerts.hum_warn_low,\n        warn_max: config.alerts.hum_warn_high,\n        crit_max: config.alerts.hum_crit_high,\n        ...sharedRules\n    }\n];\n\n// Pass the prepared payload to the next node (HTTP Request)\nmsg.payload = rulePayload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 1140,
        "wires": [
            [
                "8175b4f18a6f99c6"
            ]
        ]
    },
    {
        "id": "8175b4f18a6f99c6",
        "type": "http request",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "PUT /api/alert-rules",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/api/alert-rules",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 2430,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "898e844961b8cd39",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Sync Alerts from Device to DB",
        "info": "",
        "x": 2060,
        "y": 1040,
        "wires": []
    },
    {
        "id": "b715c447fd1d3326",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "Add Room ID",
        "func": "const payload = msg.payload;\nconst deviceMap = flow.get('device_map', 'file') || {};\nconst mac = payload.mac;\nif (mac) {\n    for (const key in deviceMap) {\n        if (key.startsWith('room') && deviceMap[key] === mac) {\n            const room_id = `room-${key.slice(-1).toLowerCase()}`;\n            payload.room_id = room_id;\n            msg.payload = payload;\n            node.status({ fill: 'blue', shape: 'dot', text: `Enriched with room: ${room_id}` });\n            return msg;\n        }\n    }\n}\nnode.warn(\"Cannot find a matching room_id for MAC: \" + mac);\nnode.status({ fill: 'yellow', shape: 'dot', text: 'No room match' });\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 180,
        "wires": [
            [
                "9cd0de312f0aaebf"
            ]
        ]
    },
    {
        "id": "d160a84f3489e2ec",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "c7e46bccde3fcec3",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 640,
        "y": 1400,
        "wires": []
    },
    {
        "id": "d54032355d69570c",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "OK",
        "statusCode": "200",
        "headers": {},
        "x": 2710,
        "y": 1200,
        "wires": []
    },
    {
        "id": "5d76859d4b52e850",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "รับข้อมูล Sensor มาประเมินเงื่อนไข",
        "info": "",
        "x": 250,
        "y": 620,
        "wires": []
    },
    {
        "id": "2c5e9398eb0b6e17",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "โหลด Alert ไปแสดงหน้าเว็บ",
        "info": "",
        "x": 230,
        "y": 1100,
        "wires": []
    },
    {
        "id": "818d1ba0600fd4e4",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "b43a3178c92d9fc0",
        "name": "Update Room Name in DB",
        "func": "const newMap = msg.payload; // ข้อมูล Map ใหม่ที่เพิ่งบันทึก\nconst oldMap = flow.get('device_map', 'file') || {}; // ข้อมูล Map เก่าก่อนบันทึก\n\nconst updates = [];\n\n// หา MAC ที่มีการเปลี่ยนชื่อห้อง\nfor (const key of ['roomA', 'roomB', 'roomC', 'roomD']) {\n    const nameKey = `name${key.slice(-1).toUpperCase()}`;\n    const oldName = oldMap[nameKey];\n    const newName = newMap[nameKey];\n    const mac = newMap[key];\n\n    if (mac && newName && oldName !== newName) {\n        updates.push({ mac: mac, newName: newName });\n    }\n}\n\nif (updates.length > 0) {\n    // สร้าง msg object ใหม่สำหรับส่งไปอัปเดตฐานข้อมูล\n    const sqlMsg = {\n        topic: updates.map(u => `UPDATE alert_events SET room_name = '${u.newName.replace(/'/g, \"''\")}' WHERE mac = '${u.mac}';`).join(' '),\n        payload: null // ไม่ต้องใช้ payload เพราะเราสร้าง SQL แบบสมบูรณ์แล้ว\n    };\n    return sqlMsg;\n}\n\nreturn null; // ถ้าไม่มีอะไรเปลี่ยนแปลง ก็ไม่ต้องทำอะไร",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 280,
        "wires": [
            [
                "3f977e562c7cfa30"
            ]
        ]
    },
    {
        "id": "3f977e562c7cfa30",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "b43a3178c92d9fc0",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 2610,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "002f7097bc63220c",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "bc3f5b7e2b5083ca",
        "name": "POST /api/alerts/:id/ack",
        "url": "/api/alerts/:id/ack",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 940,
        "wires": [
            [
                "229b4521996cbe60"
            ]
        ]
    },
    {
        "id": "229b4521996cbe60",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "bc3f5b7e2b5083ca",
        "name": "Insert ack",
        "func": "// FUNCTION: Insert ACK (safe, single-output, multi-stmt)\n// - เซ็ต status='ack' เฉพาะที่ยัง open\n// - อัปเดต ack_by/ack_note/ack_at/last_updated\n// - log 'ack' พร้อม level/value จาก event\n// - select dedup_key กลับไปอัปเดต context\nfunction pickEventId(msg) {\n  const id = msg.req?.params?.id || msg.params?.id || msg.payload?.id || msg.payload?.event_id || msg.eventId;\n  return String(id || '').trim();\n}\nfunction ts_sql() {\n  const d = new Date();\n  const tz = d.getTimezoneOffset() * 60000;\n  return new Date(d.getTime() - tz).toISOString().slice(0,19).replace('T',' ');\n}\n\nconst eventId = pickEventId(msg);\nif (!eventId) { node.error('missing event id'); return null; }\n\nconst p = msg.payload || {};\nconst ackBy   = (p.ack_by   ?? p.by   ?? p.actor ?? '').toString().trim();\nconst ackNote = (p.ack_note ?? p.note ?? '').toString().trim();\nconst now_sql = ts_sql();\n\nmsg.topic = `\nUPDATE \\`alert_events\\`\nSET \\`status\\`     = CASE WHEN \\`status\\`='open' THEN 'ack' ELSE \\`status\\` END,  -- เปลี่ยนเป็น ack ถ้ายัง open\n    ack_by        = COALESCE(NULLIF(?,''), ack_by),\n    ack_note      = COALESCE(NULLIF(?,''), ack_note),\n    ack_at        = IFNULL(ack_at, ?),           -- ตั้งเวลา ACK ครั้งแรก\n    last_updated  = ?\nWHERE event_id = ?;\n\nINSERT INTO \\`alert_event_log\\`\n  (\\`event_id\\`, \\`action\\`, \\`level\\`, \\`value\\`, \\`actor\\`, \\`ts\\`, \\`note\\`, \\`mac\\`, \\`sensor_name\\`, \\`metric\\`)\nSELECT e.event_id, 'ack',\n       e.level,                      -- เอา level ปัจจุบันของเหตุการณ์\n       e.trigger_value,              -- และค่า trigger เดิม\n       COALESCE(NULLIF(?,''), e.ack_by, 'unknown'),\n       ?, COALESCE(NULLIF(?,''), e.ack_note, ''),\n       e.mac, e.sensor_name, e.metric\nFROM alert_events e\nWHERE e.event_id = ?\n  AND NOT EXISTS (\n    SELECT 1 FROM alert_event_log l\n    WHERE l.event_id = e.event_id AND l.action = 'ack'\n  );\n\nSELECT dedup_key, \\`status\\` FROM \\`alert_events\\` WHERE event_id = ?;\n`;\n\nmsg.payload = [\n  // UPDATE\n  ackBy, ackNote, now_sql, now_sql, eventId,\n  // INSERT LOG (once)\n  ackBy, now_sql, ackNote, eventId,\n  // SELECT\n  eventId\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 940,
        "wires": [
            [
                "526a0f4d7c13dbfa"
            ]
        ]
    },
    {
        "id": "526a0f4d7c13dbfa",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "bc3f5b7e2b5083ca",
        "mydb": "5e560f07cfec117a",
        "name": "alert_acks",
        "x": 550,
        "y": 940,
        "wires": [
            [
                "0ca34c7a39856c53"
            ]
        ]
    },
    {
        "id": "c9fa0b4b9bb161cd",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "bc3f5b7e2b5083ca",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 900,
        "y": 940,
        "wires": []
    },
    {
        "id": "882fad44105f6afc",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "bc3f5b7e2b5083ca",
        "name": "รับ Action การรับทราบ Alert มาอัพเดท",
        "info": "",
        "x": 260,
        "y": 900,
        "wires": []
    },
    {
        "id": "0ca34c7a39856c53",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "bc3f5b7e2b5083ca",
        "name": "Set Final Response",
        "func": "// Function: Set Final Response (robust for multi-stmt)\n// msg.payload จาก MySQL (multi statements) เป็น Array ของ result sets\nconst rs = Array.isArray(msg.payload) ? msg.payload : [];\n\nlet dedup_key = null;\nif (rs.length > 0) {\n  const last = rs[rs.length - 1];\n  if (Array.isArray(last) && last[0] && last[0].dedup_key) {\n    dedup_key = last[0].dedup_key;\n  }\n}\n\nif (dedup_key) {\n  const states = flow.get('alert_states') || {};\n  if (states[dedup_key]) {\n    states[dedup_key].status = 'ack';\n    flow.set('alert_states', states);\n    node.status({ fill: \"green\", shape: \"dot\", text: `ACK: ${dedup_key}` });\n  } else {\n    node.status({ fill: \"yellow\", shape: \"ring\", text: `no ctx for ${dedup_key}` });\n  }\n}\n\nmsg.payload = { ok: true, event_id: (msg.req?.params?.id || null), dedup_key };\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 940,
        "wires": [
            [
                "c9fa0b4b9bb161cd"
            ]
        ]
    },
    {
        "id": "b699f43fb31872ac",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "c7e46bccde3fcec3",
        "name": "Load กฎของแต่ละ sensor มาใช้",
        "info": "",
        "x": 240,
        "y": 1360,
        "wires": []
    },
    {
        "id": "edb9aefa4d5efde1",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "Toast Alert",
        "func": "// Function: Toast Alert (v5 - Added user-friendly message)\n\nconst p = msg.payload;\nconst deviceMap = flow.get('device_map', 'file') || {};\n\nfunction getRoomName(mac) {\n    try {\n        const macStr = String(mac || '');\n        for (const key in deviceMap) {\n            if (key.startsWith('room') && deviceMap[key] === macStr) {\n                const roomLetter = key.slice(-1).toUpperCase();\n                const roomName = deviceMap[`name${roomLetter}`];\n                return roomName || macStr;\n            }\n        }\n        return macStr;\n    } catch (e) {\n        return String(mac || 'UNKNOWN_MAC');\n    }\n}\n\nif (!p) return null;\n\nlet inferredType = null;\nif (p.type === 'open' || p.type === 'upgrade') inferredType = 'triggered';\nelse if (p.type === 'recovery' || p.status === 'recovery') inferredType = 'recovered';\n\nif (!inferredType) return null;\n\nconst out = {\n    type: inferredType,\n    room_name: getRoomName(p.mac),\n    metric: p.metric,\n    level: p.level,\n    value: p.value,\n    event_id: p.event_id,\n    sensor_name: p.sensor_name || p.sensor,\n    ts: p.ts || p.opened_at || p.closed_at\n};\n\n// --- ✨ ส่วนที่เพิ่มและแก้ไข ✨ ---\n// สร้างข้อความที่เข้าใจง่ายสำหรับแสดงผลบน UI\nlet friendlyMessage = '';\nconst metric = String(p.metric).toLowerCase();\nconst value = p.value;\n\nif (metric === 'sensor_connectivity' || metric === 'connectivity') {\n    friendlyMessage = (value === 0) ? \"Offline\" : \"Online\";\n} else if (metric === 'temp') {\n    friendlyMessage = `${Number(value).toFixed(1)}°C`;\n} else if (metric === 'hum') {\n    friendlyMessage = `${Number(value).toFixed(1)}%`;\n} else {\n    friendlyMessage = String(value);\n}\nout.message = friendlyMessage; // เพิ่ม field ใหม่เข้าไปใน object\n// --- ✨ สิ้นสุดส่วนที่แก้ไข ✨ ---\n\n\nconst newTopic = inferredType === 'recovered' ? 'alert_recovered' : 'alert_event';\n\nreturn { topic: newTopic, payload: out };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 760,
        "wires": [
            [
                "64cd48591caf09c0"
            ]
        ]
    },
    {
        "id": "02d0431db93e1519",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "902e9a6537069b8d",
        "name": "GET /api/alerts/summary",
        "url": "/api/alerts/summary",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 1540,
        "wires": [
            [
                "6f0a780603bc593e"
            ]
        ]
    },
    {
        "id": "ec7212763482d9e7",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "902e9a6537069b8d",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 590,
        "y": 1540,
        "wires": [
            [
                "d0bf4edd88a42aed"
            ]
        ]
    },
    {
        "id": "d0bf4edd88a42aed",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "902e9a6537069b8d",
        "name": "format JSON",
        "func": "// rows[0] -> {critical_count, warning_count, open_count}\nconst rows = msg.payload || [];\nconst r = rows[0] || {};\nmsg.payload = {\n  critical_count: Number(r.critical_count || 0),\n  warning_count:  Number(r.warning_count  || 0),\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1540,
        "wires": [
            [
                "154ee51f956aec0e"
            ]
        ]
    },
    {
        "id": "154ee51f956aec0e",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "902e9a6537069b8d",
        "name": "200 JSON",
        "statusCode": "",
        "headers": {},
        "x": 910,
        "y": 1540,
        "wires": []
    },
    {
        "id": "6f0a780603bc593e",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "902e9a6537069b8d",
        "name": "Query alert",
        "func": "msg.topic = `SELECT\n  SUM(CASE WHEN level = 'critical' AND status IN ('open','ack') THEN 1 ELSE 0 END) AS critical_count,\n  SUM(CASE WHEN level = 'warning'  AND status IN ('open','ack') THEN 1 ELSE 0 END) AS warning_count\nFROM alert_events;`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1540,
        "wires": [
            [
                "ec7212763482d9e7"
            ]
        ]
    },
    {
        "id": "0bdff17fceb940bf",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "902e9a6537069b8d",
        "name": "แสดงจำนวน Alert",
        "info": "",
        "x": 200,
        "y": 1500,
        "wires": []
    },
    {
        "id": "6889d15e433846c7",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "Device Status for Alert",
        "func": "// Function Node: (NEW) Adapt Offline Status for Alert\n// ทำหน้าที่แปลง msg จากระบบ Ping/MQTT check ให้อยู่ในรูปแบบที่ระบบ Alert เข้าใจได้\n\nconst p = msg.payload;\n// เอา event_id และ level จาก Flow context มาใช้\nconst states = flow.get('alert_states') || {};\nconst state = states[p.mac + '|device_status|connectivity'] || {};\n\n// 1. ตรวจสอบว่ามีข้อมูล mac และ status มาหรือไม่\nif (!p || !p.mac || !p.status) {\n    return null; // ถ้าไม่มีข้อมูลที่จำเป็น ก็ไม่ต้องทำอะไรต่อ\n}\n\n// 2. เราสนใจแค่ตอนที่สถานะเป็น 'offline'\n// ถ้า 'online' เราจะส่งค่า value = 1 เพื่อให้ระบบใช้ในการ Recovery (ปิด Alert)\nconst isOffline = (p.status.toLowerCase() === 'offline');\nconst alertValue = isOffline ? 0 : 1;\n\n// 3. สร้าง payload ใหม่ในรูปแบบที่ Function 'Check condition and insert' (ID: 676bd48cd34d868a) ต้องการ\nconst newPayload = {\n    mac: p.mac,\n    sensor_name: 'Device', // ชื่อเซ็นเซอร์เสมือนสำหรับสถานะอุปกรณ์\n    metric: 'connectivity',     // Metric ใหม่สำหรับ Alert ประเภทนี้\n    value: alertValue,          // 0 = offline, 1 = online\n    ts: new Date().toISOString()\n};\n\n// 4. ถ้าสถานะเป็น 'online' และมี event_id ของ alert ที่เปิดอยู่ ให้แนบ event_id นั้นไปกับ payload ด้วย\n// เพื่อให้ Alert Engine รู้ว่าต้องปิด alert ตัวไหน\nif (!isOffline && state.event_id) {\n    newPayload.event_id = state.event_id;\n    newPayload.level = state.level;\n    newPayload.status = state.status;\n}\n\nmsg.payload = newPayload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 700,
        "wires": [
            [
                "bab874a3ec5e3d7f"
            ]
        ]
    },
    {
        "id": "5ca3f959e50a896b",
        "type": "inject",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "Inject every second",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 1260,
        "wires": [
            [
                "0de9e2b71b06a40a"
            ]
        ]
    },
    {
        "id": "0de9e2b71b06a40a",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "Query old alert",
        "func": "msg.topic = \"SELECT dedup_key, status, level, event_id FROM alert_events WHERE status = 'open' OR status = 'ack'\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1260,
        "wires": [
            [
                "95fa60aa68b20120"
            ]
        ]
    },
    {
        "id": "a3fd0dbfc2793eb9",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "Load old alert",
        "func": "const openAlerts = msg.payload || [];\nconst states = {};\n\nopenAlerts.forEach(alert => {\n    if (alert.dedup_key) {\n        states[alert.dedup_key] = {\n            status: alert.status,\n            level: alert.level,\n            event_id: alert.event_id,\n            // ใส่ค่า count เริ่มต้นเผื่อไว้\n            warn_count: 0,\n            crit_count: 0,\n            clear_count: 0\n        };\n    }\n});\n\nflow.set('alert_states', states);\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `Loaded ${openAlerts.length} active alerts from DB`\n});\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "95fa60aa68b20120",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 610,
        "y": 1260,
        "wires": [
            [
                "a3fd0dbfc2793eb9"
            ]
        ]
    },
    {
        "id": "e83de35d3a2f5a12",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "System summary",
        "func": "// ✅ Function Node: System Summary (V2 - Includes temp_rise_per_room)\n\n// --- Contexts ---\nlet liveData = flow.get('liveRoomData') || {};\nlet historyData = flow.get('historyRoomData') || {};\nconst deviceMap = flow.get('device_map', 'file') || {};\n\nconst BASELINE_SPAN_MS = 300000;   // 5 นาที\nconst BASELINE_STALE_MS = 3600000;  // 60 นาที\n\n// --- MAC → RoomName map ---\nconst macToRoomInfo = {};\nfor (const key in deviceMap) {\n  if (!Object.prototype.hasOwnProperty.call(deviceMap, key)) continue;\n  if (key.startsWith('room')) {\n    const mac = deviceMap[key];\n    const idx = key.slice(-1).toUpperCase();\n    const nameKey = `name${idx}`;\n    const roomName = deviceMap[nameKey] || key;\n    if (mac) macToRoomInfo[mac] = { name: roomName };\n  }\n}\nfunction getRoomName(mac) {\n  return macToRoomInfo[mac] ? macToRoomInfo[mac].name : mac;\n}\n\n// --- Helpers ---\nfunction dewPointC(temp, rh) {\n  if (typeof temp !== 'number' || typeof rh !== 'number' || !isFinite(temp) || !isFinite(rh) || rh <= 0) return null;\n  const RH = Math.min(100, Math.max(0, rh));\n  const a = 17.62, b = 243.12;\n  const gamma = (a * temp) / (b + temp) + Math.log(RH / 100.0);\n  return (b * gamma) / (a - gamma);\n}\n\n// --- Input & Update liveData ---\nconst now = Date.now();\nconst mac = msg.payload.mac || msg.payload.mac_address || null;\nconst pin = msg.payload.pin;\n\nif (mac && pin === 'OVERALL') {\n  const roomName = getRoomName(mac);\n  if (roomName) {\n    const t_avg = Number(msg.payload.avg_temp);\n    const h_avg = Number(msg.payload.avg_hum);\n    const t_max = Number(msg.payload.max_temp);\n    const h_max = Number(msg.payload.max_hum);\n\n    liveData[mac] = {\n      mac,\n      name: roomName,\n      temp: isFinite(t_avg) ? t_avg : null,\n      hum: isFinite(h_avg) ? h_avg : null,\n      temp_max_device: isFinite(t_max) ? t_max : null,\n      hum_max_device: isFinite(h_max) ? h_max : null,\n      timestamp: now\n    };\n    flow.set('liveRoomData', liveData);\n  }\n}\n\n// --- Compute summary ---\nlet summary = {\n  temp_max: null, temp_max_room: null,\n  hum_max: null, hum_max_room: null,\n  dew_max: null, dew_max_room: null,\n  temp_rise_max: null, temp_rise_max_room: null,\n  temp_rise_per_room: {} // ✨ เพิ่ม key นี้เข้ามาใหม่\n};\n\nconst rooms = Object.values(liveData);\nif (rooms.length > 0) {\n  for (const room of rooms) {\n    if (!room || !room.mac) continue;\n    const curMac = room.mac;\n\n    const tempForMax = room.temp_max_device ?? room.temp;\n    if (typeof tempForMax === 'number' && (summary.temp_max === null || tempForMax > summary.temp_max)) {\n      summary.temp_max = tempForMax;\n      summary.temp_max_room = room.name;\n    }\n\n    const humForMax = room.hum_max_device ?? room.hum;\n    if (typeof humForMax === 'number' && (summary.hum_max === null || humForMax > summary.hum_max)) {\n      summary.hum_max = humForMax;\n      summary.hum_max_room = room.name;\n    }\n\n    const dp = dewPointC(room.temp, room.hum);\n    if (dp !== null && (summary.dew_max === null || dp > summary.dew_max)) {\n      summary.dew_max = dp;\n      summary.dew_max_room = room.name;\n    }\n\n    const base = historyData[curMac];\n    if (base && typeof base.temp === 'number' && typeof room.temp === 'number') {\n      const rise = room.temp - base.temp;\n      // ✨ เก็บค่า rise ของห้องนี้ไว้\n      summary.temp_rise_per_room[curMac] = rise;\n\n      if (summary.temp_rise_max === null || rise > summary.temp_rise_max) {\n        summary.temp_rise_max = rise;\n        summary.temp_rise_max_room = room.name;\n      }\n    }\n  }\n\n  if (summary.temp_rise_max === null) {\n    summary.temp_rise_max = 0;\n    summary.temp_rise_max_room = summary.temp_max_room;\n  }\n}\n\n// --- Refresh baselines & Persist ---\nObject.keys(liveData).forEach(m => {\n  const live = liveData[m];\n  const base = historyData[m];\n  if (!base || (live.timestamp - base.timestamp) >= BASELINE_SPAN_MS) {\n    historyData[m] = { ...live };\n  }\n});\nObject.keys(historyData).forEach(m => {\n  if (now - historyData[m].timestamp > BASELINE_STALE_MS) {\n    delete historyData[m];\n  }\n});\nflow.set('historyRoomData', historyData);\n\nmsg.payload = summary;\nmsg.topic = \"system_summary_pro\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 800,
        "wires": [
            [
                "62335ac41ba6e50a"
            ]
        ]
    },
    {
        "id": "de5e6ed809646311",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "GET /api/export",
        "url": "/api/export",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2980,
        "y": 1620,
        "wires": [
            [
                "82779c738ad44c4b"
            ]
        ]
    },
    {
        "id": "82779c738ad44c4b",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "1. Prepare Info & Sensor Query",
        "func": "// Function: 1. Prepare Info & Sensor Query (v13.2 - Fixed Timestamp Format)\n\n// ✨ เพิ่มส่วนนี้เข้ามา: ฟังก์ชันสำหรับแปลงเวลา ISO เป็น SQL Format\nfunction toSqlLocal(isoString) {\n  if (!isoString) return null;\n  try {\n    const d = new Date(isoString);\n    const tzOffset = d.getTimezoneOffset() * 60000;\n    const localTime = new Date(d.getTime() - tzOffset);\n    return localTime.toISOString().slice(0, 19).replace('T', ' ');\n  } catch (e) {\n    return isoString;\n  }\n}\n\nconst q = msg.req.query || {};\nconst { room, type, from: fromDate, to: toDate, sensors, macs: macsQuery } = q;\n\nif (!type || !fromDate || !toDate) {\n  msg.statusCode = 400;\n  msg.payload = { error: 'Missing required parameters: type, from, to' };\n  return msg;\n}\n\nconst deviceMap = flow.get('device_map', 'file') || {};\nconst pinMap = global.get('mac_pin_names') || {};\nlet macs = [];\nlet roomNameMap = {};\nlet reportRoomName = 'Export';\n\nif (macsQuery) {\n  macs = macsQuery.split(',').map(m => m.trim().toUpperCase()).filter(Boolean);\n  macs.forEach(mac => {\n    let foundName = mac;\n    for (const key in deviceMap) {\n      if (deviceMap[key] === mac) {\n        const roomLetter = key.slice(-1).toUpperCase();\n        foundName = deviceMap[`name${roomLetter}`] || `Room ${roomLetter}`;\n        break;\n      }\n    }\n    roomNameMap[mac] = foundName;\n  });\n  reportRoomName = macs.length > 1 ? 'Multiple_Devices' : (roomNameMap[macs[0]] || macs[0]).replace(/\\s+/g, '_');\n} else if (room) {\n  if (room === 'all') {\n    reportRoomName = 'All_Rooms';\n    ['A', 'B', 'C', 'D', 'E', 'F', 'G'].forEach(char => {\n      const mac = deviceMap[`room${char}`];\n      if (mac && mac.includes(':')) {\n        macs.push(mac);\n        roomNameMap[mac] = deviceMap[`name${char}`] || `Room ${char}`;\n      }\n    });\n  } else {\n    const roomKey = `room${room.slice(-1).toUpperCase()}`;\n    const nameKey = `name${room.slice(-1).toUpperCase()}`;\n    const mac = deviceMap[roomKey];\n    if (mac) {\n      macs.push(mac);\n      const customName = deviceMap[nameKey] || room.replace('-', ' ');\n      roomNameMap[mac] = customName;\n      reportRoomName = customName.replace(/\\s+/g, '_');\n    }\n  }\n}\n\nif (macs.length === 0) {\n  msg.statusCode = 404;\n  msg.payload = { error: `No valid MAC addresses found for the given parameters.` };\n  return msg;\n}\n\nmsg.reportInfo = {\n  type: type,\n  filename: `Report_${reportRoomName}_${new Date().toISOString().slice(0, 10)}.${type}`,\n  maps: {\n    roomNames: roomNameMap,\n    pinNames: pinMap\n  },\n  params: { from: fromDate, to: toDate, macs, sensors, room }\n};\n\n// ✨ เพิ่มส่วนนี้เข้ามา: เรียกใช้ฟังก์ชันแปลงเวลา\nconst fromSql = toSqlLocal(fromDate);\nconst toSql = toSqlLocal(toDate);\n\nlet sensorSql = `\nSELECT\n    t.timestamp, t.mac, t.pin AS sensor_pin, t.avg_temp AS temperature, t.avg_hum AS humidity,\n    (243.12 * (LN(GREATEST(1e-6, t.avg_hum/100)) + (17.62*t.avg_temp)/(243.12+t.avg_temp)) ) / (17.62 - (LN(GREATEST(1e-6, t.avg_hum/100)) + (17.62*t.avg_temp)/(243.12+t.avg_temp))) AS dew_point\nFROM dht_22 t\nWHERE t.mac IN (${macs.map(() => '?').join(',')}) AND t.timestamp BETWEEN ? AND ?`;\n\n// ✨ แก้ไขตรงนี้: ใช้เวลาที่แปลงแล้ว (fromSql, toSql)\nconst sensorParams = [...macs, fromSql, toSql];\n\nif (sensors) {\n  const sensorList = sensors.split(',');\n  sensorSql += ` AND t.pin IN (${sensorList.map(() => '?').join(',')})`;\n  sensorParams.push(...sensorList);\n}\nsensorSql += ` ORDER BY t.timestamp ASC;`;\n\nmsg.topic = sensorSql;\nmsg.payload = sensorParams;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 1620,
        "wires": [
            [
                "258f6bf27fc6e1cf"
            ]
        ]
    },
    {
        "id": "258f6bf27fc6e1cf",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "mydb": "5e560f07cfec117a",
        "name": "Query Sensors",
        "x": 3440,
        "y": 1620,
        "wires": [
            [
                "57fe4cea096dc9a9"
            ]
        ]
    },
    {
        "id": "417fa61902dccc67",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "mydb": "5e560f07cfec117a",
        "name": "Query Alerts",
        "x": 2990,
        "y": 1680,
        "wires": [
            [
                "dc55c89f0ab0fef9"
            ]
        ]
    },
    {
        "id": "dc55c89f0ab0fef9",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "3. Prepare Data",
        "func": "const alerts = msg.payload;\nconst sensors = msg.results.sensors;\nconst reportInfo = msg.reportInfo;\n\nif (!reportInfo) {\n    node.error(\"Critical Error: reportInfo object is missing.\", msg);\n    msg.statusCode = 500;\n    msg.payload = \"Server error: Could not process report data.\";\n    return msg;\n}\n\nconst { roomNames, pinNames } = reportInfo.maps;\n\nconst formatDate = (isoString) => {\n    if (!isoString) return '';\n    try {\n        return new Date(isoString).toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' });\n    } catch (e) { return isoString; }\n};\n\n// ✨ FIX: แก้ไขการ map ชื่อ Metric ให้ถูกต้องทั้งหมด ✨\nconst metricMap = {\n    temp: 'Temperature',\n    hum: 'Humidity',\n    connectivity: 'Connectivity',\n    sensor_connectivity: 'Sensor Connectivity'\n};\n\nmsg.formattedData = {\n    sensors: sensors.map(s => {\n        const sensor_name = (pinNames[s.mac] && pinNames[s.mac][`name_pin_${s.sensor_pin}`]) || `Pin ${s.sensor_pin}`;\n        return {\n            'Timestamp': formatDate(s.timestamp),\n            'Room Name': roomNames[s.mac] || s.mac,\n            'MAC Address': s.mac,\n            'Sensor Pin': s.sensor_pin,\n            'Sensor Name': sensor_name,\n            'Temperature (°C)': (s.temperature === null || s.temperature === undefined) ? null : Number(Number(s.temperature).toFixed(2)),\n            'Humidity (%)': (s.humidity === null || s.humidity === undefined) ? null : Number(Number(s.humidity).toFixed(2)),\n            'Dew Point (°C)': (s.dew_point === null || s.dew_point === undefined) ? null : Number(Number(s.dew_point).toFixed(2)),\n        };\n    }),\n    alerts: alerts.map(a => ({\n        'Alert Time': formatDate(a.alert_time),\n        'Room Name': a.room_name,\n        'Sensor Name': a.sensor_name,\n        'Metric Raw': a.metric_raw,                  // << ใส่คอลัมน์ดิบ\n        'Metric': metricMap[a.metric] || a.metric,   // << ชื่ออ่านง่ายหลัง normalize\n        'Level': a.level,\n        'Value': a.trigger_value,\n        'Status': a.status,\n        'Ack By': a.acknowledged_by,\n        'Ack Time': formatDate(a.acknowledged_time),\n        'Closed Time': formatDate(a.closed_time)\n    }))\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3160,
        "y": 1680,
        "wires": [
            [
                "f3110649b75fa1f6"
            ]
        ]
    },
    {
        "id": "f3110649b75fa1f6",
        "type": "switch",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "Switch by Type",
        "property": "reportInfo.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "csv",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "xlsx",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 3340,
        "y": 1680,
        "wires": [
            [
                "3e79a8b6fddc2caf"
            ],
            []
        ]
    },
    {
        "id": "3e79a8b6fddc2caf",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "4a. Create CSV String",
        "func": "const { sensors, alerts } = msg.formattedData;\nconst { filename } = msg.reportInfo;\n\nconst csvSafe = (val) => {\n    if (val === null || val === undefined) return '';\n    let str = String(val);\n    if (str.includes(',') || str.includes('\"') || str.includes('\\n')) {\n        str = str.replace(/\"/g, '\"\"');\n        return `\"${str}\"`;\n    }\n    return str;\n};\n\nlet csvString = '';\n\nconst alertHeaders = ['Alert Time', 'Room Name', 'Sensor Name', 'Metric Raw', 'Metric', 'Level', 'Value', 'Status', 'Ack By', 'Ack Time', 'Closed Time'];\ncsvString += '\\n### ALERT HISTORY ###\\n';\ncsvString += alertHeaders.join(',') + '\\n';\nalerts.forEach(a => {\n    const row = alertHeaders.map(h => csvSafe(a[h]));\n    csvString += row.join(',') + '\\n';\n});\nconst sensorHeaders = ['Timestamp', 'Room Name', 'MAC Address', 'Sensor Pin', 'Sensor Name', 'Temperature (°C)', 'Humidity (%)', 'Dew Point (°C)'];\ncsvString += '### SENSOR DATA ###\\n';\ncsvString += sensorHeaders.join(',') + '\\n';\nsensors.forEach(s => {\n    const row = sensorHeaders.map(h => csvSafe(s[h]));\n    csvString += row.join(',') + '\\n';\n});\n\nmsg.headers = { 'Content-Disposition': `attachment; filename=\"${filename}\"`, 'Content-Type': 'text/csv; charset=utf-8' };\nmsg.payload = csvString;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3540,
        "y": 1680,
        "wires": [
            [
                "7f021b2b6bf737d9"
            ]
        ]
    },
    {
        "id": "a7081151ab3a2ad4",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "File Response",
        "statusCode": "",
        "headers": {},
        "x": 3960,
        "y": 1680,
        "wires": []
    },
    {
        "id": "7f021b2b6bf737d9",
        "type": "change",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "5. Set Final Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{     \"Content-Disposition\": \"attachment; filename=\\\"\" & ($exists(msg.finalFilename) ? msg.finalFilename : msg.reportInfo.filename) & \"\\\"\",     \"Content-Type\": msg.reportInfo.type = \"xlsx\" ? \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" : \"text/csv; charset=utf-8\"}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3760,
        "y": 1680,
        "wires": [
            [
                "a7081151ab3a2ad4"
            ]
        ]
    },
    {
        "id": "31093562cb7659a0",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "GET /unseen_recoveries",
        "url": "/unseen_recoveries",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2050,
        "y": 900,
        "wires": [
            [
                "f253a7b1c4d4eb47"
            ]
        ]
    },
    {
        "id": "f253a7b1c4d4eb47",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "Query recoverd",
        "func": "// 🎯 GOAL: Query DB for unseen recovery events within the last 7 days.\nmsg.topic = `\n    SELECT event_id \n    FROM alert_events \n    WHERE status = 'recovery' AND closed_at >= NOW() - INTERVAL 7 DAY;\n`;\nmsg.payload = []; // No params\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 900,
        "wires": [
            [
                "297a1b865a994b0b"
            ]
        ]
    },
    {
        "id": "297a1b865a994b0b",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 2430,
        "y": 900,
        "wires": [
            [
                "3981f0f3d29a470c"
            ]
        ]
    },
    {
        "id": "3981f0f3d29a470c",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "format",
        "func": "// 🎯 GOAL: Format the result into a simple array of event_ids.\nmsg.payload = msg.payload.map(item => item.event_id);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2570,
        "y": 900,
        "wires": [
            [
                "ee048f67cf4fa1d6"
            ]
        ]
    },
    {
        "id": "ee048f67cf4fa1d6",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "Response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2700,
        "y": 900,
        "wires": []
    },
    {
        "id": "b8274aa11208401e",
        "type": "switch",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "mark_as_seen",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2030,
        "y": 860,
        "wires": [
            [
                "5d0f5e25fa5197c3"
            ]
        ]
    },
    {
        "id": "5d0f5e25fa5197c3",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "Update recoverd(seen)",
        "func": "// Function: Update recovered(seen) -> close + write log\n// ปิดเหตุการณ์ที่อยู่ในสถานะ 'recovery' และบันทึกลง alert_event_log ว่า 'close'\n\nfunction ts_sql() {\n    const d = new Date();\n    const tz = d.getTimezoneOffset() * 60000;\n    return new Date(d.getTime() - tz).toISOString().slice(0, 19).replace('T', ' ');\n}\n\nconst eventId = (typeof msg.payload === 'string')\n    ? msg.payload\n    : (msg.payload && (msg.payload.event_id || msg.payload.id));\n\nif (!eventId || typeof eventId !== 'string') {\n    node.warn(\"Invalid event_id for mark_as_seen/close\");\n    return null;\n}\n\nconst now_sql = ts_sql();\n\n/*\n  ทำสองอย่างในช็อตเดียว (ต้องเปิด Allow multiple statements ใน MySQL node):\n  1) UPDATE alert_events -> status='closed', เซ็ต closed_at ถ้ายังว่าง และอัปเดต last_updated\n     จำกัดปิดเฉพาะที่ยังอยู่ 'recovery' เพื่อกันปิดมั่ว\n  2) INSERT alert_event_log -> action='close'\n     ใส่ actor และ note โดยคัดลอกมาจาก Log ล่าสุดของ event นั้นๆ\n     กันซ้ำด้วย NOT EXISTS ถ้าเคยมี log close แล้วจะไม่ใส่ซ้ำ\n*/\n\n// ===== START: โค้ดส่วนที่แก้ไข =====\nmsg.topic = `\nUPDATE \\`alert_events\\`\nSET \\`status\\`='closed',\n    \\`last_updated\\` = ?,\n    \\`closed_at\\`    = IFNULL(\\`closed_at\\`, ?)\nWHERE \\`event_id\\` = ?\n  AND \\`status\\` = 'recovery';\n\nINSERT INTO \\`alert_event_log\\`\n  (\\`event_id\\`, \\`action\\`, \\`level\\`, \\`value\\`, \\`actor\\`, \\`ts\\`, \\`note\\`, \\`mac\\`, \\`sensor_name\\`, \\`metric\\`)\nSELECT\n    e.event_id,\n    'close',\n    e.level,\n    e.trigger_value,\n    (SELECT l.actor FROM alert_event_log l WHERE l.event_id = e.event_id ORDER BY l.ts DESC, l.id DESC LIMIT 1),\n    ?,\n    (SELECT l.note FROM alert_event_log l WHERE l.event_id = e.event_id ORDER BY l.ts DESC, l.id DESC LIMIT 1),\n    e.mac,\n    e.sensor_name,\n    e.metric\nFROM \\`alert_events\\` e\nWHERE e.event_id = ?\n  AND NOT EXISTS (\n    SELECT 1 FROM \\`alert_event_log\\` l\n    WHERE l.event_id = e.event_id AND l.action = 'close'\n  );\n`;\n\nmsg.payload = [\n    // UPDATE\n    now_sql, now_sql, eventId,\n    // INSERT (ts, eventId)\n    now_sql, eventId\n];\n// ===== END: โค้ดส่วนที่แก้ไข =====\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2200,
        "y": 860,
        "wires": [
            [
                "6373aa23303841cf"
            ]
        ]
    },
    {
        "id": "6373aa23303841cf",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 2390,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "15d9dbfd0c8ce0cb",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "Alert recovery จากระบบที่ผู้ใช้ไม่เห็น",
        "info": "",
        "x": 2080,
        "y": 820,
        "wires": []
    },
    {
        "id": "2a5b63a94c933684",
        "type": "inject",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "Auto-Clear",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2030,
        "y": 940,
        "wires": [
            [
                "734ded21c1daba8b"
            ]
        ]
    },
    {
        "id": "734ded21c1daba8b",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "Auto clear alert 7 days",
        "func": "// 🎯 GOAL: Close all 'recovery' events older than 7 days.\nmsg.topic = `\n    UPDATE alert_events\n    SET status = 'closed'\n    WHERE status = 'recovery' AND closed_at < NOW() - INTERVAL 7 DAY;\n`;\nmsg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 940,
        "wires": [
            [
                "33ca16f0ac839ca5"
            ]
        ]
    },
    {
        "id": "6e94b291e5b12d2d",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "สำหรับสร้าง Report CSV",
        "info": "",
        "x": 3000,
        "y": 1580,
        "wires": []
    },
    {
        "id": "33ca16f0ac839ca5",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 2430,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "2a78b5cd6ba1b8d3",
        "type": "subflow:c1a8b9f7.1d2e3f",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "",
        "x": 890,
        "y": 720,
        "wires": []
    },
    {
        "id": "4557dd1bb41b4158",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "Sensor Status for Alert",
        "func": "// Function Node: Adapt Sensor Status for Alert\n// รับข้อมูลสถานะของทุก Sensor แล้วส่งต่อไปให้ Alert Engine ทีละตัว\n\nconst sensorStatuses = msg.payload; // msg.payload เป็น Array [{mac, pin, status}, ...]\nif (!Array.isArray(sensorStatuses)) {\n    return null;\n}\n\nconst pinMap = global.get('mac_pin_names') || {};\n\n// วนลูปเพื่อสร้าง message สำหรับ Sensor แต่ละตัว\nsensorStatuses.forEach(sensor => {\n    const isOffline = (sensor.status.toUpperCase() === 'OFFLINE');\n    const alertValue = isOffline ? 0 : 1;\n\n    // ดึงชื่อที่ตั้งเองของ Sensor (ถ้ามี)\n    const devicePinMap = pinMap[sensor.mac] || {};\n    const sensorName = devicePinMap[`name_pin_${sensor.pin}`] || `Pin ${sensor.pin}`;\n\n    const newPayload = {\n        mac: sensor.mac,\n        sensor_name: sensorName, // ใช้ชื่อที่ตั้งเอง\n        metric: 'sensor_connectivity', // Metric ใหม่สำหรับ Alert ประเภทนี้\n        value: alertValue, // 0 = offline, 1 = online\n        ts: new Date().toISOString()\n    };\n\n    // ส่ง message ออกไปสำหรับ Sensor ตัวนี้\n    node.send({ payload: newPayload });\n});\n\n\n// ไม่ต้อง return อะไร เพราะเราใช้ node.send() ส่งออกไปหมดแล้ว\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 660,
        "wires": [
            [
                "bab874a3ec5e3d7f"
            ]
        ]
    },
    {
        "id": "57fe4cea096dc9a9",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "2. Prepare Alert Query",
        "func": "msg.results = {\n    sensors: msg.payload\n};\n\nconst { from, to, macs } = msg.reportInfo.params;\n\n// ✨ FIX: เพิ่มฟังก์ชันแปลงเวลา Local สำหรับ Database ✨\nfunction toSqlLocal(isoString) {\n    if (!isoString) return null;\n    try {\n        const d = new Date(isoString);\n        // คำนวณ Offset ของ Timezone เพื่อให้ได้เวลา Local ที่ถูกต้อง\n        const tzOffset = d.getTimezoneOffset() * 60000;\n        const localTime = new Date(d.getTime() - tzOffset);\n        // แปลงเป็นฟอร์แมต 'YYYY-MM-DD HH:MM:SS' ที่ Database เข้าใจ\n        return localTime.toISOString().slice(0, 19).replace('T', ' ');\n    } catch (e) {\n        return isoString; // ถ้าแปลงไม่ได้ ให้ใช้ค่าเดิม\n    }\n}\n\n// แปลงเวลาที่รับมาจาก UI ให้เป็น Local Time ของ Database\nconst fromSql = toSqlLocal(from);\nconst toSql = toSqlLocal(to);\n\n\n// ✨ SQL Query ที่รวม Logic การแปลง Metric และเงื่อนไขเวลาที่ถูกต้อง ✨\nconst alertSql = `\nSELECT\n    opened_at AS alert_time,\n    mac,\n    room_name,\n    sensor_name,\n    metric AS metric_raw,\n    -- 'metric' ของ sensor offline จะถูกเก็บเป็น 'sensor_connectivity' อยู่แล้ว\n    -- ดังนั้นเราไม่จำเป็นต้องใช้ CASE statement ในส่วนนี้\n    metric,\n    level,\n    trigger_value,\n    status,\n    ack_by AS acknowledged_by,\n    ack_at AS acknowledged_time,\n    closed_at AS closed_time\nFROM alert_events\nWHERE\n    mac IN (${macs.map(() => '?').join(',')})\n    AND opened_at <= ?\n    AND (closed_at IS NULL OR closed_at >= ?)\nORDER BY opened_at ASC;`;\n\n// ใช้เวลาที่แปลงแล้ว (toSql, fromSql) ในการส่ง Query\nconst alertParams = [...macs, toSql, fromSql];\n\nmsg.topic = alertSql;\nmsg.payload = alertParams;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3640,
        "y": 1620,
        "wires": [
            [
                "417fa61902dccc67"
            ]
        ]
    },
    {
        "id": "5a161bab6ea417fe",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "98e9e0e68d946c03",
        "name": "GET /api/notification-settings",
        "url": "/api/notification-settings",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2060,
        "y": 1620,
        "wires": [
            [
                "cd2adcf7949bf9e1"
            ]
        ]
    },
    {
        "id": "cd2adcf7949bf9e1",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "98e9e0e68d946c03",
        "name": "Load Notification Settings",
        "func": "// ดึงข้อมูลที่บันทึกไว้ ถ้าไม่มี ให้สร้างข้อมูลเริ่มต้นใน \"โครงสร้างใหม่\" ที่ถูกต้อง\nconst settings = flow.get('notificationSettings') || {\n    recipients: {\n        email: [],\n        telegram: []\n    },\n    schedule: {\n        weekdays: [true, true, true, true, true, true, true],\n        configs: [{ sendAt: \"08:00\", rangeStart: \"17:00\", rangeEnd: \"08:00\" }]\n    }\n};\n\nmsg.payload = settings;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 1620,
        "wires": [
            [
                "7486317ab6c9b407"
            ]
        ]
    },
    {
        "id": "7486317ab6c9b407",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "98e9e0e68d946c03",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2500,
        "y": 1620,
        "wires": []
    },
    {
        "id": "0d6a099dec5a745d",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "98e9e0e68d946c03",
        "name": "POST /api/notification-settings",
        "url": "/api/notification-settings",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2060,
        "y": 1660,
        "wires": [
            [
                "835b9d24889b4401"
            ]
        ]
    },
    {
        "id": "835b9d24889b4401",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "98e9e0e68d946c03",
        "name": "Validate & Set Defaults",
        "func": "// msg.payload คือ JSON ที่ UI ส่งมา\nlet payload = msg.payload;\n\n// --- 1. ตรวจสอบ Recipients ---\nif (!payload.recipients) {\n    payload.recipients = { email: [], telegram: [] };\n}\nif (!Array.isArray(payload.recipients.email)) {\n    payload.recipients.email = [];\n}\nif (!Array.isArray(payload.recipients.telegram)) {\n    payload.recipients.telegram = [];\n}\n\n// --- 2. ตรวจสอบ Schedule (โครงสร้างใหม่) ---\nconst defaults = {\n    weekdays: [true, true, true, true, true, true, true],\n    configs: [{ sendAt: \"08:00\", rangeStart: \"17:00\", rangeEnd: \"08:00\" }]\n};\n\nlet schedule = payload.schedule;\nlet isScheduleInvalid = true;\n\n// ตรวจสอบว่า schedule.configs เป็น Array ที่ถูกต้องหรือไม่\nif (schedule && Array.isArray(schedule.weekdays) && schedule.weekdays.length === 7 && Array.isArray(schedule.configs)) {\n    // ถ้าข้อมูลถูกต้อง (อาจจะเป็น Array ว่างก็ได้ ถ้าผู้ใช้ลบหมด)\n    isScheduleInvalid = false;\n}\n\n// ถ้าข้อมูลไม่ถูกต้อง ให้ใช้ค่า Default\nif (isScheduleInvalid) {\n    node.warn(\"Received empty or invalid schedule. Applying default settings.\");\n    payload.schedule = defaults;\n}\n\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 1660,
        "wires": [
            [
                "037b2b044352cb94"
            ]
        ]
    },
    {
        "id": "037b2b044352cb94",
        "type": "change",
        "z": "640c6734fdac3595",
        "g": "98e9e0e68d946c03",
        "name": "Save to Flow Context",
        "rules": [
            {
                "t": "set",
                "p": "notificationSettings",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2570,
        "y": 1660,
        "wires": [
            [
                "70048c0d3169c8aa",
                "55426d0f63020db5"
            ]
        ]
    },
    {
        "id": "70048c0d3169c8aa",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "98e9e0e68d946c03",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 2770,
        "y": 1660,
        "wires": []
    },
    {
        "id": "7b56862680ba6de6",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "98e9e0e68d946c03",
        "name": "สำหรับ Daily Report",
        "info": "",
        "x": 2030,
        "y": 1580,
        "wires": []
    },
    {
        "id": "55426d0f63020db5",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "98e9e0e68d946c03",
        "name": "Update Cron Schedule",
        "func": "// Update Cron Schedule (patched)\n// สร้าง/ลบ schedule ใน cronplus ให้ยิงตาม UI settings\nconst DEFAULT_SETTINGS = {\n  recipients: { email: [], telegram: [] },\n  schedule: {\n    weekdays: [true,true,true,true,true,true,true],\n    configs: [{ sendAt: \"08:00\", rangeStart: \"17:00\", rangeEnd: \"08:00\" }]\n  }\n};\n\n// โหลดค่า config\nlet settings = flow.get(\"notificationSettings\");\nif (!settings || !settings.schedule || !Array.isArray(settings.schedule.configs)) {\n  node.warn(\"Notification settings missing or invalid. Seeding defaults.\");\n  settings = DEFAULT_SETTINGS;\n  flow.set(\"notificationSettings\", settings);\n}\n\n// วันในสัปดาห์ (0=Sun..6=Sat)\nconst weekdays = Array.isArray(settings.schedule.weekdays) ? settings.schedule.weekdays : [];\nconst selectedDOW = weekdays\n  .map((isOn, idx) => isOn ? idx : -1)\n  .filter(v => v !== -1);\n\n// เคลียร์งานเก่าก่อน\nconst removeAllMsg = { payload: { command: \"remove-all\" } };\n\n// ไม่มีวันหรือไม่มีตารางเวลา → ลบแล้วจบ\nif (selectedDOW.length === 0 || !Array.isArray(settings.schedule.configs) || settings.schedule.configs.length === 0) {\n  node.warn(\"No days or schedules selected. Removing all cron jobs.\");\n  return [[removeAllMsg], null];\n}\n\n// ทำ string DOW\nconst daysOfWeekStr = selectedDOW.join(',');\n\n// timeZone ที่จะใช้ทั้งใน node และในคำสั่ง\nconst TZ = \"Asia/Bangkok\";\n\n// สร้าง job ใหม่ตามแต่ละ config\nconst crypto = (s)=> {\n  // แฮชจิ๋วกันชื่อชน (ไม่ต้องเอาจริงจัง)\n  let h = 0; for (let i=0;i<s.length;i++) h = ((h<<5)-h) + s.charCodeAt(i) | 0;\n  return Math.abs(h).toString(36).slice(0,5);\n};\n\nconst addMsgs = settings.schedule.configs\n  .filter(cfg => cfg && typeof cfg.sendAt === \"string\" && cfg.sendAt.includes(\":\"))\n  .map((cfg) => {\n    const [hourStr, minuteStr] = cfg.sendAt.split(\":\").map(s => String(s).trim());\n    const hour = String(parseInt(hourStr, 10));\n    const minute = String(parseInt(minuteStr, 10));\n\n    // cron 6 ฟิลด์: sec min hour dom month dow\n    const expression = `0 ${minute} ${hour} * * ${daysOfWeekStr}`;\n\n    // ทำชื่อ job ให้คงที่แต่ไม่ชนกันง่าย\n    const sig = `${hour}:${minute}|${daysOfWeekStr}|${cfg.rangeStart||''}-${cfg.rangeEnd||''}`;\n    const name = `digest-${crypto(sig)}`;\n\n    return {\n      payload: {\n        command: \"add\",\n        name,\n        expressionType: \"cron\",\n        expression,\n        timeZone: TZ,\n        // payload ที่ปล่อยตอนถึงเวลา ให้พก cfg ออกไปด้วย\n        payload: {\n          kind: \"daily-digest-trigger\",\n          schedule: { ...cfg, daysOfWeekStr, timeZone: TZ }\n        },\n        payloadType: \"json\"\n      }\n    };\n  });\n\n// ส่งออก: output1 = remove-all, output2 = add ทั้งหมด\nreturn [[removeAllMsg], addMsgs];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 1720,
        "wires": [
            [
                "b06ddb5d8bc71c19"
            ],
            [
                "b06ddb5d8bc71c19"
            ]
        ]
    },
    {
        "id": "6506649cc536d2f8",
        "type": "inject",
        "z": "640c6734fdac3595",
        "g": "98e9e0e68d946c03",
        "name": "On Deploy",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str",
                "v": "load_schedule"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2030,
        "y": 1720,
        "wires": [
            [
                "55426d0f63020db5"
            ]
        ]
    },
    {
        "id": "b06ddb5d8bc71c19",
        "type": "cronplus",
        "z": "640c6734fdac3595",
        "g": "98e9e0e68d946c03",
        "name": "Daily Digest Scheduler",
        "outputField": "payload",
        "timeZone": "Asia/Bangkok",
        "storeName": "",
        "commandResponseMsgOutput": "output2",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 2,
        "options": [],
        "x": 2480,
        "y": 1720,
        "wires": [
            [
                "6b0b0398d197ace6"
            ],
            [
                "6b0b0398d197ace6"
            ]
        ]
    },
    {
        "id": "6b0b0398d197ace6",
        "type": "subflow:6d5ddc6b8286095b",
        "z": "640c6734fdac3595",
        "g": "98e9e0e68d946c03",
        "name": "",
        "x": 2690,
        "y": 1720,
        "wires": []
    },
    {
        "id": "mqtt-in-status",
        "type": "mqtt in",
        "z": "640c6734fdac3595",
        "g": "group-auto-ping",
        "name": "MQTT Status",
        "topic": "esp32/status",
        "qos": "2",
        "datatype": "json",
        "broker": "8301192ec347dbc9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 460,
        "wires": [
            [
                "fn-prepare-ping",
                "fn-check-status"
            ]
        ]
    },
    {
        "id": "fn-prepare-ping",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "group-auto-ping",
        "name": "Prepare Ping",
        "func": "// Prepare Ping (v4): บังคับให้มี payload=IP สำหรับ trigger-ping\n// และ \"จดจำ\" mapping IP→MAC + meta ไว้ใน flow context\n\nlet p = {};\ntry {\n  if (typeof msg.payload === 'string' && msg.payload.trim().startsWith('{')) p = JSON.parse(msg.payload);\n  else if (typeof msg.payload === 'object' && msg.payload !== null) p = msg.payload;\n} catch (e) { p = {}; }\n\nconst ip = p.ip || msg.ip;\nconst mac = (p.mac || msg.mac || '').toUpperCase();\nconst room = p.room || msg.room || 'Unknown Room';\nconst status = p.status || msg.status || null;\n\nif (!ip || !mac) {\n  node.status({ fill:\"red\", shape:\"dot\", text: !ip ? \"no ip\" : \"no mac\" });\n  return null;\n}\n\n// +++ เพิ่มบรรทัดนี้ +++\nmsg.originalPayload = p; // เก็บข้อมูล MQTT เดิมไว้\n\n// 1) ใส่เป้าพิงบน msg.payload (requirement ของ ping[trigger])\nmsg.payload = ip;\n\n// 2) เผื่อใช้ในภายหลัง\nmsg.host = ip;\nmsg.mac = mac;\nmsg.room = room;\nmsg.status = status;\n\n// 3) เก็บ mapping ลง flow context เผื่อ ping ทำของเราหล่น\nlet ip2mac = flow.get('ip2mac') || {};\nip2mac[ip] = mac;\nflow.set('ip2mac', ip2mac);\n\nlet macMeta = flow.get('macMeta') || {};\nmacMeta[mac] = { room, ip };\nflow.set('macMeta', macMeta);\n\nnode.status({ fill:\"green\", shape:\"dot\", text:`target ${ip}` });\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 400,
        "wires": [
            [
                "node-ping-dyn"
            ]
        ]
    },
    {
        "id": "node-ping-dyn",
        "type": "ping",
        "z": "640c6734fdac3595",
        "g": "group-auto-ping",
        "protocol": "Automatic",
        "mode": "triggered",
        "name": "Ping dynamic IP",
        "host": "",
        "timer": "10",
        "inputs": 1,
        "x": 580,
        "y": 360,
        "wires": [
            [
                "fn-check-status"
            ]
        ]
    },
    {
        "id": "fn-check-status",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "group-auto-ping",
        "name": "Check Status",
        "func": "const OFFLINE_GRACE_PERIOD_MS = 70000;\nconst MQTT_TIMEOUT_MS = 70000;\n\nlet states = flow.get('deviceStates') || {};\nlet ip2mac = flow.get('ip2mac') || {};\nlet macMeta = flow.get('macMeta') || {};\nconst mac2room = flow.get('mac2room') || {};\n\nfunction now() { return Date.now(); }\nfunction normalizeMac(s) {\n  if (!s) return null;\n  s = String(s).toUpperCase().replace(/[^0-9A-F]/g, '');\n  if (s.length !== 12) return null;\n  return s.match(/.{2}/g).join(':');\n}\n\nlet mac = null;\nlet sourceType = null;\n\n// --- MQTT case ---\nif (msg.topic && msg.topic.startsWith('esp32/')) {\n  sourceType = 'MQTT';\n  mac = normalizeMac(msg.payload?.mac) || normalizeMac(msg.topic.split('/')[1]);\n  const ip = msg.payload?.ip || null;\n  const room = msg.payload?.room || macMeta[mac]?.room || mac2room[mac] || 'Unknown Room';\n\n  if (ip && mac) {\n    ip2mac[ip] = mac;\n    flow.set('ip2mac', ip2mac);\n  }\n  if (mac) {\n    macMeta[mac] = { ip: ip || macMeta[mac]?.ip || null, room };\n    flow.set('macMeta', macMeta);\n  }\n\n  // --- Ping case ---\n} else {\n  sourceType = 'Ping';\n  const ip = msg.host || (typeof msg.topic === 'string' ? msg.topic : null);\n  mac = (ip && ip2mac[ip])\n    || normalizeMac(msg.mac)\n    || normalizeMac(msg.originalPayload?.mac);\n\n  if (ip && mac) {\n    ip2mac[ip] = mac;\n    flow.set('ip2mac', ip2mac);\n    macMeta[mac] = {\n      ip,\n      room: macMeta[mac]?.room || mac2room[mac] || 'Unknown Room'\n    };\n    flow.set('macMeta', macMeta);\n  }\n}\n\nif (!mac) return null;\n\n// --- create state if new ---\nif (!states[mac]) {\n  states[mac] = {\n    pingOk: false,\n    mqttOk: false,\n    lastMqttTs: 0,\n    ping_ms: null,\n    offlineSince: null,\n    lastCombinedState: 'offline',\n    room: macMeta[mac]?.room || mac2room[mac] || 'Unknown Room',\n    ip: macMeta[mac]?.ip || null\n  };\n}\n\nconst s = states[mac];\nconst prev = s.lastCombinedState;\n\n// --- update state ---\nif (sourceType === 'MQTT') {\n  s.mqttOk = String(msg.payload?.status || '').toLowerCase() === 'online';\n  s.lastMqttTs = now();\n  s.room = msg.payload?.room || s.room || macMeta[mac]?.room || mac2room[mac] || 'Unknown Room';\n  s.ip = msg.payload?.ip || s.ip || macMeta[mac]?.ip || null;\n\n} else { // Ping\n  s.pingOk = (msg.payload !== false);\n  if (s.pingOk && typeof msg.payload === 'number') s.ping_ms = Number(msg.payload);\n  const ip = msg.host || (typeof msg.topic === 'string' ? msg.topic : null);\n  if (ip) s.ip = ip;\n  if (!s.room) s.room = macMeta[mac]?.room || mac2room[mac] || 'Unknown Room';\n}\n\n// --- mqtt timeout ---\nconst mqttFresh = (now() - s.lastMqttTs) <= MQTT_TIMEOUT_MS;\nif (!mqttFresh) s.mqttOk = false;\n\n// --- combined state ---\nconst combined = (s.pingOk && s.mqttOk) ? 'online' : 'offline';\nlet statusMsg = null;\nlet configRequestMsg = null;\n\nif (combined === 'online') {\n  s.offlineSince = null;\n  if (prev !== 'online') {\n    s.lastCombinedState = 'online';\n    statusMsg = {\n      payload: {\n        mac, room: s.room, ip: s.ip,\n        status: 'online',\n        ping_ms: s.ping_ms,\n        event_time: new Date().toISOString(),\n        pin: 'OVERALL'\n      }\n    };\n    configRequestMsg = {\n      payload: { command: 'get_config', mac, requestId: `auto-get-${Date.now()}` }\n    };\n    node.status({ fill: 'green', shape: 'dot', text: `${mac} online` });\n  }\n} else {\n  if (prev === 'online' && s.offlineSince == null) s.offlineSince = now();\n  if (s.offlineSince && (now() - s.offlineSince) > OFFLINE_GRACE_PERIOD_MS && prev === 'online') {\n    s.lastCombinedState = 'offline';\n    statusMsg = {\n      payload: {\n        mac, room: s.room, ip: s.ip,\n        status: 'offline',\n        ping_ms: s.ping_ms,\n        event_time: new Date().toISOString(),\n        pin: 'OVERALL'\n      }\n    };\n    node.status({ fill: 'red', shape: 'ring', text: `${mac} offline` });\n  }\n}\n\nflow.set('deviceStates', states);\nreturn [statusMsg, configRequestMsg];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 460,
        "wires": [
            [
                "switch-status",
                "b248acd368a047f0",
                "2305c4099135cc94"
            ],
            [
                "af8f7ad43f68ed23"
            ]
        ]
    },
    {
        "id": "switch-status",
        "type": "switch",
        "z": "640c6734fdac3595",
        "g": "group-auto-ping",
        "name": "Status Switch",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "online",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "offline",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 780,
        "y": 440,
        "wires": [
            [
                "fn-insert-db"
            ],
            [
                "fn-insert-db"
            ]
        ]
    },
    {
        "id": "fn-insert-db",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "group-auto-ping",
        "name": "Insert to DB",
        "func": "function toLocalSqlDate(d) {\n  d = d || new Date();\n  const local = new Date(d.getTime() - d.getTimezoneOffset() * 60000);\n  return local.toISOString().slice(0,19).replace('T',' ');\n}\n\nconst d = msg.payload || {};\nconst time = d.event_time ? toLocalSqlDate(new Date(d.event_time)) : toLocalSqlDate();\n\n// safety เล็กน้อย\nconst mac    = (d.mac || '').toUpperCase();\nconst room   = (d.room || 'Server Room 1').replace(/'/g, \"''\");  // กัน quote แตก\nconst status = (d.status || '').toLowerCase();                    // online/offline เท่านั้น\n\nmsg.topic = `\n  INSERT INTO esp_status_log\n    (mac, room, status, time)\n  VALUES\n    ('${mac}', '${room}', '${status}', '${time}');\n`.replace(/\\s+/g, ' ');\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 440,
        "wires": [
            [
                "mysql-log"
            ]
        ]
    },
    {
        "id": "mysql-log",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "group-auto-ping",
        "mydb": "5e560f07cfec117a",
        "name": "esp_status_log",
        "x": 1120,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "e341b45e963b3ef5",
        "type": "http request",
        "z": "640c6734fdac3595",
        "g": "group-auto-ping",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/api/device-map",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 360,
        "wires": [
            [
                "ac695710a3a0f1e3"
            ]
        ]
    },
    {
        "id": "2c342f3ce76b6402",
        "type": "inject",
        "z": "640c6734fdac3595",
        "g": "group-auto-ping",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 790,
        "y": 360,
        "wires": [
            [
                "e341b45e963b3ef5"
            ]
        ]
    },
    {
        "id": "ac695710a3a0f1e3",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "group-auto-ping",
        "name": "Update Device Map",
        "func": "// msg.payload ตัวอย่างคือ\n// { roomA:\"94:B9:7E:CE:01:EF\", nameA:\"ATS\", roomB:\"\", nameB:\"\", ... }\n\nlet map = {};\nfor (let i = 1; i <= 4; i++) {\n    const mac = (msg.payload[`room${String.fromCharCode(64+i)}`] || \"\").toUpperCase();\n    const name = msg.payload[`name${String.fromCharCode(64+i)}`] || \"\";\n    if (mac && name) {\n        map[mac] = name;\n    }\n}\n\nflow.set(\"mac2room\", map);\nnode.status({fill:\"green\", shape:\"dot\", text:`Device map updated (${Object.keys(map).length})`});\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "inject-ping-scheduler",
        "type": "inject",
        "z": "640c6734fdac3595",
        "g": "group-auto-ping",
        "name": "Ping Loop",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "x": 210,
        "y": 360,
        "wires": [
            [
                "fn-ping-scheduler"
            ]
        ]
    },
    {
        "id": "fn-ping-scheduler",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "group-auto-ping",
        "name": "Ping Scheduler",
        "func": "let ip2mac = flow.get(\"ip2mac\") || {};\nlet msgs = [];\n\nfor (const ip in ip2mac) {\n    msgs.push({ payload: ip, host: ip });\n}\n\nreturn [msgs];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "node-ping-dyn"
            ]
        ]
    },
    {
        "id": "13efb5e06ad934da",
        "type": "link in",
        "z": "640c6734fdac3595",
        "name": "To Dashboard",
        "links": [
            "2bd4a9b70bf84131",
            "3ccca56ce30903d7",
            "62335ac41ba6e50a",
            "64cd48591caf09c0",
            "9dbbf45c90e6073e",
            "9dd3a95f243b48ea",
            "b248acd368a047f0",
            "c8535339264f094e"
        ],
        "x": 1415,
        "y": 680,
        "wires": [
            [
                "9708f9c81584ae9a"
            ]
        ]
    },
    {
        "id": "c8535339264f094e",
        "type": "link out",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "To Dashboard",
        "mode": "link",
        "links": [
            "13efb5e06ad934da"
        ],
        "x": 485,
        "y": 160,
        "wires": []
    },
    {
        "id": "9dd3a95f243b48ea",
        "type": "link out",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "To Dashboard(Sensor status)",
        "mode": "link",
        "links": [
            "13efb5e06ad934da"
        ],
        "x": 865,
        "y": 220,
        "wires": []
    },
    {
        "id": "b248acd368a047f0",
        "type": "link out",
        "z": "640c6734fdac3595",
        "g": "group-auto-ping",
        "name": "To Dashboard(Check status)",
        "mode": "link",
        "links": [
            "13efb5e06ad934da"
        ],
        "x": 715,
        "y": 400,
        "wires": []
    },
    {
        "id": "2bd4a9b70bf84131",
        "type": "link out",
        "z": "640c6734fdac3595",
        "g": "bf24f1109e557024",
        "name": "To Dashboard(Reply action reboot)",
        "mode": "link",
        "links": [
            "13efb5e06ad934da"
        ],
        "x": 1295,
        "y": 260,
        "wires": []
    },
    {
        "id": "9dbbf45c90e6073e",
        "type": "link out",
        "z": "640c6734fdac3595",
        "g": "bf24f1109e557024",
        "name": "To Dashboard(Command reboot)",
        "mode": "link",
        "links": [
            "13efb5e06ad934da"
        ],
        "x": 1235,
        "y": 180,
        "wires": []
    },
    {
        "id": "3ccca56ce30903d7",
        "type": "link out",
        "z": "640c6734fdac3595",
        "g": "04363f3d44ea50b0",
        "name": "To Dashboard(Put request id)",
        "mode": "link",
        "links": [
            "13efb5e06ad934da"
        ],
        "x": 1825,
        "y": 180,
        "wires": []
    },
    {
        "id": "62335ac41ba6e50a",
        "type": "link out",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "To Dashboard(System summary)",
        "mode": "link",
        "links": [
            "13efb5e06ad934da"
        ],
        "x": 575,
        "y": 800,
        "wires": []
    },
    {
        "id": "64cd48591caf09c0",
        "type": "link out",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "To Dashboard(Toast Alert)",
        "mode": "link",
        "links": [
            "13efb5e06ad934da"
        ],
        "x": 965,
        "y": 760,
        "wires": []
    },
    {
        "id": "cad07b2b3eea95a9",
        "type": "link out",
        "z": "640c6734fdac3595",
        "name": "To Request id",
        "mode": "link",
        "links": [
            "a5c1e87646cfa1b3"
        ],
        "x": 1665,
        "y": 640,
        "wires": []
    },
    {
        "id": "a5c1e87646cfa1b3",
        "type": "link in",
        "z": "640c6734fdac3595",
        "g": "04363f3d44ea50b0",
        "name": "To Request id",
        "links": [
            "cad07b2b3eea95a9"
        ],
        "x": 1505,
        "y": 120,
        "wires": [
            [
                "c46318095bd096a9"
            ]
        ]
    },
    {
        "id": "164d2e7018120437",
        "type": "link out",
        "z": "640c6734fdac3595",
        "name": "To Node(Alert Recovery)",
        "mode": "link",
        "links": [
            "2d29e4bdbb212815"
        ],
        "x": 1665,
        "y": 720,
        "wires": []
    },
    {
        "id": "2d29e4bdbb212815",
        "type": "link in",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "link in 1",
        "links": [
            "164d2e7018120437"
        ],
        "x": 1955,
        "y": 860,
        "wires": [
            [
                "b8274aa11208401e"
            ]
        ]
    },
    {
        "id": "af8f7ad43f68ed23",
        "type": "link out",
        "z": "640c6734fdac3595",
        "g": "group-auto-ping",
        "name": "To node(Send topic)",
        "mode": "link",
        "links": [
            "faef73a25c6f6561"
        ],
        "x": 715,
        "y": 520,
        "wires": []
    },
    {
        "id": "faef73a25c6f6561",
        "type": "link in",
        "z": "640c6734fdac3595",
        "g": "d314b1ded220aada",
        "name": "link in 2",
        "links": [
            "af8f7ad43f68ed23"
        ],
        "x": 2135,
        "y": 120,
        "wires": [
            [
                "84de7bd1374c55ed"
            ]
        ]
    },
    {
        "id": "b6e1d5d135cbbd65",
        "type": "link out",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "To node(Sensor Status for Alert)",
        "mode": "link",
        "links": [
            "c829bb366e68e647"
        ],
        "x": 865,
        "y": 260,
        "wires": []
    },
    {
        "id": "c829bb366e68e647",
        "type": "link in",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "link in 3",
        "links": [
            "b6e1d5d135cbbd65"
        ],
        "x": 285,
        "y": 660,
        "wires": [
            [
                "4557dd1bb41b4158"
            ]
        ]
    },
    {
        "id": "2305c4099135cc94",
        "type": "link out",
        "z": "640c6734fdac3595",
        "g": "group-auto-ping",
        "name": "To node(Device status for Alert)",
        "mode": "link",
        "links": [
            "e634590e551137c4"
        ],
        "x": 715,
        "y": 480,
        "wires": []
    },
    {
        "id": "e634590e551137c4",
        "type": "link in",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "link in 4",
        "links": [
            "2305c4099135cc94"
        ],
        "x": 275,
        "y": 700,
        "wires": [
            [
                "6889d15e433846c7"
            ]
        ]
    },
    {
        "id": "f67d6f62f7b2e4e0",
        "type": "link out",
        "z": "640c6734fdac3595",
        "g": "63f59a4d8f7d47e7",
        "name": "To node(Query rules)",
        "mode": "link",
        "links": [
            "41ae12f967d3101e"
        ],
        "x": 2335,
        "y": 720,
        "wires": []
    },
    {
        "id": "18b28f96f1b41483",
        "type": "link out",
        "z": "640c6734fdac3595",
        "g": "04363f3d44ea50b0",
        "name": "To node(Command reoot)",
        "mode": "link",
        "links": [
            "b783d99212b2714a"
        ],
        "x": 1825,
        "y": 100,
        "wires": []
    },
    {
        "id": "b783d99212b2714a",
        "type": "link in",
        "z": "640c6734fdac3595",
        "g": "bf24f1109e557024",
        "name": "link in 6",
        "links": [
            "18b28f96f1b41483"
        ],
        "x": 965,
        "y": 160,
        "wires": [
            [
                "8527f967384360ec"
            ]
        ]
    },
    {
        "id": "dfa92c6ca3e394f6",
        "type": "link out",
        "z": "640c6734fdac3595",
        "g": "04363f3d44ea50b0",
        "name": "To node(Check command)",
        "mode": "link",
        "links": [
            "6e9fe1efdf55fb5c"
        ],
        "x": 1825,
        "y": 140,
        "wires": []
    },
    {
        "id": "6e9fe1efdf55fb5c",
        "type": "link in",
        "z": "640c6734fdac3595",
        "g": "d314b1ded220aada",
        "name": "link in 7",
        "links": [
            "dfa92c6ca3e394f6"
        ],
        "x": 1945,
        "y": 160,
        "wires": [
            [
                "61401c21d911973d"
            ]
        ]
    },
    {
        "id": "e5287d092bd432ea",
        "type": "inject",
        "z": "640c6734fdac3595",
        "g": "3dd353a896e35cd3",
        "name": "Load Rules every 1 mins",
        "props": [],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2710,
        "y": 640,
        "wires": [
            [
                "d2db7bec5131a6cf"
            ]
        ]
    },
    {
        "id": "d21531b83e0203e0",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "3dd353a896e35cd3",
        "mydb": "5e560f07cfec117a",
        "name": "alert_rules",
        "x": 2670,
        "y": 700,
        "wires": [
            [
                "66a23818b29b5dbc"
            ]
        ]
    },
    {
        "id": "66a23818b29b5dbc",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3dd353a896e35cd3",
        "name": "Rule loader",
        "func": "// Function: load_rules_to_global (FIXED to include sensor_connectivity)\nconst rules = msg.payload;\nconst deviceMap = flow.get('device_map', 'file') || {};\n\n// ค้นหากฎของระบบ (system-level rules) ทั้งหมดที่เรามี\nconst systemTempRule = rules.find(r => r.scope === 'system' && r.metric === 'temp' && r.active) || {};\nconst systemHumRule = rules.find(r => r.scope === 'system' && r.metric === 'hum' && r.active) || {};\nconst systemConnRule = rules.find(r => r.scope === 'system' && r.metric === 'connectivity' && r.active) || {};\n// --- ✨ เพิ่มบรรทัดนี้เข้ามา ✨ ---\nconst systemSensorConnRule = rules.find(r => r.scope === 'system' && r.metric === 'sensor_connectivity' && r.active) || {};\n// --- ✨ สิ้นสุดส่วนที่เพิ่ม ✨ ---\n\nconst roomRules = rules.filter(r => r.scope === 'room' && r.active);\nconst sensorRules = rules.filter(r => r.scope === 'sensor' && r.active);\n\nconst effectiveMap = {};\n\nconst inherit = (specific, room, system) => {\n    const origins = {};\n    const merged = {};\n    const allKeys = new Set([...Object.keys(system), ...Object.keys(room), ...Object.keys(specific)]);\n\n    for (const key of allKeys) {\n        if (specific && specific[key] !== null && specific[key] !== undefined) {\n            merged[key] = specific[key];\n            origins[key] = 'sensor';\n        } else if (room && room[key] !== null && room[key] !== undefined) {\n            merged[key] = room[key];\n            origins[key] = 'room';\n        } else if (system && system[key] !== null && system[key] !== undefined) {\n            merged[key] = system[key];\n            origins[key] = 'system';\n        }\n    }\n    merged.origins = origins;\n    return merged;\n};\n\nconst allMacs = Object.values(deviceMap).filter(val => typeof val === 'string' && val.includes(':'));\n\nfor (const mac of allMacs) {\n    const sensorsForDevice = sensorRules.filter(r => r.mac === mac);\n\n    const roomTempRule = roomRules.find(r => r.mac === mac && r.metric === 'temp') || {};\n    const roomHumRule = roomRules.find(r => r.mac === mac && r.metric === 'hum') || {};\n\n    const overallTempKey = `${mac}|overall|temp`;\n    effectiveMap[overallTempKey] = inherit({}, roomTempRule, systemTempRule);\n\n    const overallHumKey = `${mac}|overall|hum`;\n    effectiveMap[overallHumKey] = inherit({}, roomHumRule, systemHumRule);\n\n    for (const sensorRule of sensorsForDevice) {\n        const key = `${mac}|${sensorRule.sensor_name}|${sensorRule.metric}`;\n        if (sensorRule.metric === 'temp') {\n            effectiveMap[key] = inherit(sensorRule, roomTempRule, systemTempRule);\n        } else if (sensorRule.metric === 'hum') {\n            effectiveMap[key] = inherit(sensorRule, roomHumRule, systemHumRule);\n        }\n    }\n}\n\neffectiveMap['system_temp'] = systemTempRule;\neffectiveMap['system_hum'] = systemHumRule;\neffectiveMap['system_connectivity'] = systemConnRule;\n// --- ✨ เพิ่มบรรทัดนี้เข้ามา ✨ ---\neffectiveMap['system_sensor_connectivity'] = systemSensorConnRule; \n// --- ✨ สิ้นสุดส่วนที่เพิ่ม ✨ ---\n\nglobal.set('effectiveRuleMap', effectiveMap);\nnode.status({ fill: 'green', shape: 'dot', text: `Loaded ${Object.keys(effectiveMap).length} effective rules` });\n\nreturn null;",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 700,
        "wires": []
    },
    {
        "id": "d2db7bec5131a6cf",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3dd353a896e35cd3",
        "name": "Query rule",
        "func": "// โค้ดสำหรับโหนด Function: Build SQL for Rules\nmsg.topic = \"SELECT * FROM alert_rules WHERE active = 1 ORDER BY scope DESC\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2950,
        "y": 640,
        "wires": [
            [
                "d21531b83e0203e0"
            ]
        ]
    },
    {
        "id": "15d1d79aeec5b369",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "3dd353a896e35cd3",
        "name": "อัพเดทเงื่อนไขในการใช้กับ Alert",
        "info": "",
        "x": 2700,
        "y": 600,
        "wires": []
    },
    {
        "id": "41ae12f967d3101e",
        "type": "link in",
        "z": "640c6734fdac3595",
        "g": "3dd353a896e35cd3",
        "name": "link in 8",
        "links": [
            "f67d6f62f7b2e4e0"
        ],
        "x": 2865,
        "y": 600,
        "wires": [
            [
                "d2db7bec5131a6cf"
            ]
        ]
    },
    {
        "id": "9708f9c81584ae9a",
        "type": "uibuilder",
        "z": "640c6734fdac3595",
        "name": "",
        "topic": "",
        "url": "dashboard",
        "okToGo": true,
        "fwdInMessages": false,
        "allowScripts": true,
        "allowStyles": true,
        "templateFolder": "blank",
        "extTemplate": "",
        "reload": false,
        "sourceFolder": "src",
        "deployedVersion": "7.4.3",
        "showMsgUib": false,
        "title": "",
        "descr": "",
        "editurl": "vscode://file\\Users\\PCSGH\\.node-red\\uibuilder/dashboard/?windowId=_blank",
        "x": 1550,
        "y": 680,
        "wires": [
            [
                "cad07b2b3eea95a9"
            ],
            [
                "164d2e7018120437"
            ]
        ]
    },
    {
        "id": "8301192ec347dbc9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.42.9",
        "port": "18831",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5e560f07cfec117a",
        "type": "MySQLdatabase",
        "name": "",
        "host": "192.168.42.9",
        "port": "33061",
        "db": "Server_Monitoring_Environment",
        "tz": "",
        "charset": "UTF8"
    }
]
